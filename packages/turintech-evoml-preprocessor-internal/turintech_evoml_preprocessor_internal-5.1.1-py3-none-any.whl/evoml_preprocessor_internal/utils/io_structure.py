# Generated at 2023-01-20 14:09:15
# ───────────────────────────────────────────────────── imports ────────────────────────────────────────────────────── #
# Standard Library
from dataclasses import dataclass
from pathlib import Path

# Dependencies
import pandas as pd

# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────── #
#                           specifies all modules that shall be loaded and imported into the                           #
#                                current namespace when we use 'from package import *'                                 #
# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────── #

__all__ = [
    "Graphs",
    "SplitData",
    "Data",
    "Appendix",
    "Outputs",
]


# ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────── #


@dataclass
class Graphs:
    directory: Path

    @property
    def timeline(self) -> Path:
        return self.directory / "preprocessing_timeline_graph.json"

    @property
    def tags(self) -> Path:
        return self.directory / "column_tags_table.json"

    @property
    def report(self) -> Path:
        return self.directory / "preprocessing_report.json"

    @property
    def feature_importance_aggregation(self) -> Path:
        return self.directory / "feature_importance_aggregation_graph.json"

    @property
    def feature_generation_table(self) -> Path:
        return self.directory / "feature_generation_table.json"


@dataclass
class SplitData:
    x_train: pd.DataFrame
    y_train: pd.DataFrame
    x_test: pd.DataFrame
    y_test: pd.DataFrame


@dataclass
class Data:
    def __init__(self, directory: Path, parquet: bool = False):
        super().__init__()
        self.directory = directory
        self._extension = ".parquet" if parquet else ".csv"

    @property
    def original_train(self) -> Path:
        return (self.directory / "original_train").with_suffix(self._extension)

    @property
    def original_test(self) -> Path:
        return (self.directory / "original_test").with_suffix(self._extension)

    @property
    def train(self) -> Path:
        return (self.directory / "train").with_suffix(self._extension)

    @property
    def test(self) -> Path:
        return (self.directory / "test").with_suffix(self._extension)

    @property
    def dropped(self) -> Path:
        return (self.directory / "dropped").with_suffix(self._extension)

    @property
    def metadata(self) -> Path:
        return self.directory / "extra-infos.json"

    @property
    def feature_generation_table(self) -> Path:
        return self.directory / "feature_generation_table.json"


@dataclass
class Appendix:
    """Structure of the appendix directory containing the preprocessing code"""

    directory: Path

    # ------------------------------- folders -------------------------------- #
    @property
    def data(self) -> Path:
        return self.directory / "data"

    @property
    def sources(self) -> Path:
        return self.directory / "src"

    @property
    def setup(self) -> Path:
        return self.directory / "setup"

    # -------------------------------- files --------------------------------- #
    @property
    def preprocessor_meta(self) -> Path:
        return self.data / "preprocessor_meta.json"

    @property
    def joblib(self) -> Path:
        return self.data / "prepro.joblib"

    @property
    def requirements(self) -> Path:
        return self.setup / "requirements_prepro.txt"

    # ------------------------------- methods -------------------------------- #
    def mkdir(self) -> None:
        """Create the path directories"""
        self.data.mkdir(exist_ok=True, parents=True)
        self.sources.mkdir(exist_ok=True, parents=True)
        self.setup.mkdir(exist_ok=True, parents=True)


@dataclass
class Outputs:
    """Structure of the output directory generated by the preprocess component"""

    directory: Path
    parquet: bool = False

    @property
    def appendix(self) -> Appendix:
        return Appendix(directory=self.directory / "pipeline_appendix")

    @property
    def data(self) -> Data:
        return Data(directory=self.directory, parquet=self.parquet)

    @property
    def graphs(self) -> Graphs:
        return Graphs(directory=self.directory)


@dataclass
class OutputFlags:
    """This model describes all the options configuring what the preprocessor
    will produce
    """

    # Producing the preprocessor's appendix (joblib & source code)
    appendix: bool = False
    # Producing the tables & graphs
    graphs: bool = False
    # Producing the internal preprocessor report
    internal_report: bool = False
    # Producing the original dataset splits
    original_split: bool = False

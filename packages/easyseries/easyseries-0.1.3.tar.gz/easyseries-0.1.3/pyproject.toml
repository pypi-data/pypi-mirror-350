[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "easyseries"
dynamic = ["version"]
description = "A comprehensive HTTP utility toolkit built on httpx with CLI support"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Marvin Guo", email = "support@memolog.us" },
]
maintainers = [
    { name = "Marvin Guo", email = "support@memolog.us" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
keywords = ["http", "httpx", "client", "api", "utility"]
requires-python = ">=3.10"
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.5.0",
    "typer>=0.12.0",
    "rich>=13.7.0",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pre-commit>=3.6.0",
    "mypy>=1.8.0",
    "ruff>=0.1.15",
    "black>=24.0.0",
    "isort>=5.13.0",
    "twine>=6.1.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.27.0",
    "respx>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/ScienisTmiaoT/easyseries"
Documentation = "https://easyseries.readthedocs.io"
Repository = "https://github.com/ScienisTmiaoT/easyseries"
"Bug Tracker" = "https://github.com/ScienisTmiaoT/easyseries/issues"
Changelog = "https://github.com/ScienisTmiaoT/easyseries/blob/main/CHANGELOG.md"

[project.scripts]
easyseries = "easyseries.cli.main:app"

[tool.hatch.version]
path = "src/easyseries/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/easyseries"]

[tool.ruff]
target-version = "py310"
line-length = 88
extend-exclude = ["migrations"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-args
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "FLY",    # flynt
    "PERF",   # perflint
    "RUF",    # ruff-specific
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise from
    "C901",   # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "FBT", "PLR2004", "S101", "TID252"]

[tool.ruff.lint.isort]
known-first-party = ["easyseries"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--cov=easyseries",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--asyncio-mode=auto",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "def __repr__",
    "@abstractmethod",
]

[tool.bandit]
skips = ["B101"]  # Example: skip assert used warning
exclude_dirs = ["tests", "docs"]

version: "3"

vars:
  SRC_DIR: src
  TESTS_DIR: tests
  SCRIPT_DIR: scripts
  COV_MODULE: src/codemap
  VERSION:
    sh: python -c "import re; print(re.search(r'__version__ = \"(.+?)\"', open('src/codemap/__init__.py').read()).group(1))"

tasks:
  default:
    desc: List all available tasks
    cmds:
      - task -l

  lint:
    desc: Run all linting checks
    cmds:
      - task: lint:ruff
      - task: lint:pyrefly

  lint:ruff:
    desc: Run ruff linter
    cmds:
      - uv run ruff check {{.SRC_DIR}} {{.TESTS_DIR}} {{.SCRIPT_DIR}}

  lint:fix:
    desc: Run ruff linter with auto-fix
    cmds:
      - uv run ruff check --fix {{.SRC_DIR}} {{.TESTS_DIR}} {{.SCRIPT_DIR}}

  lint:fix-unsafe:
    desc: Run ruff linter with unsafe auto-fixes
    cmds:
      - uv run ruff check --fix --unsafe-fixes {{.SRC_DIR}} {{.TESTS_DIR}} {{.SCRIPT_DIR}}

  lint:pyrefly:
    desc: Run pyrefly type checker
    cmds:
      - uv run pyrefly check {{.SRC_DIR}}

  format:
    desc: Run all formatters
    cmds:
      - task: lint:fix-unsafe
      - task: format:ruff

  format:ruff:
    desc: Run ruff formatter
    cmds:
      - uv run ruff format {{.SRC_DIR}} {{.TESTS_DIR}} {{.SCRIPT_DIR}}

  test:
    desc: Run all tests
    cmds:
    - |
      if [ -z "{{.CLI_ARGS}}" ]; then
        uv run pytest {{.TESTS_DIR}} -n logical --no-cov
      else
        uv run pytest {{.CLI_ARGS}} -p no:xdist --no-cov
      fi

  test:coverage:
    desc: Run tests with coverage analysis
    cmds:
      - uv run pytest --cov={{.COV_MODULE}} --cov-report=term-missing {{.TESTS_DIR}} -n logical

  test:coverage:xml:
    desc: Run tests with coverage analysis and generate XML report
    cmds:
      - uv run pytest --cov={{.COV_MODULE}} --cov-branch --cov-report=xml {{.TESTS_DIR}} -n logical

  docs:
    desc: Check documentation coverage
    cmds:
      - task: docs:coverage
      - task: docs:coverage:badge
      - task: docs:update

  docs:coverage:
    desc: Check documentation coverage
    cmds:
      - uv run interrogate --style google -v --fail-under 100 {{.SRC_DIR}}

  docs:coverage:badge:
    desc: Generate documentation badge
    cmds:
      - uv run interrogate --style google --generate-badge docs/assets --badge-style flat {{.SRC_DIR}}

  docs:update:
    desc: Update documentation
    cmds:
      - uv run python {{.SCRIPT_DIR}}/update_api_docs.py

  docs:mkdocs:
    desc: Serve documentation from the current version
    cmds:
      - uv run mkdocs serve

  docs:mike:
    desc: Serve documentation from the latest version
    cmds:
      - uv run mike serve

  docs:push:
    desc: Push docs to latest version
    cmds:
      - task: docs:update
      - uv run mike deploy {{.VERSION}} latest --update-aliases --push
    preconditions:
      - sh: '! echo "{{.VERSION}}" | grep -q "rc"'
        msg: "Cannot publish to latest with a pre-release version (contains 'rc'). Use docs:push:pre instead."

  docs:push:pre:
    desc: Push docs to pre-release version
    cmds:
      - task: docs:update
      - DOCS_PRERELEASE=true uv run mike deploy {{.VERSION}} pre-release --update-aliases --push
    preconditions:
      - sh: 'echo "{{.VERSION}}" | grep -q "rc"'
        msg: "Cannot publish to pre-release with a stable version (missing 'rc'). Use docs:push instead."

  ci:
    desc: Run all checks and tests
    cmds:
      - task: format
      - task: lint
      - task: test:coverage

  ci:full:
    desc: Run all checks and tests in CI mode
    cmds:
      - task: lint
      - task: test:coverage:xml

  pre-commit:
    desc: Run pre-commit checks on staged files only
    cmds:
      - task: lint:ruff


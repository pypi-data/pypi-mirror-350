"""
This type stub file was generated by pyright.
"""

from numbers import Integral
from ..utils._param_validation import HasMethods, Interval, StrOptions, validate_params
from . import DecisionTreeClassifier, DecisionTreeRegressor

"""
This module defines export functions for decision trees.
"""
class Sentinel:
    def __repr__(self): # -> Literal['"tree.dot"']:
        ...
    


SENTINEL = ...
@validate_params({ "decision_tree": [DecisionTreeClassifier, DecisionTreeRegressor],"max_depth": [Interval(Integral, 0, None, closed="left"), None],"feature_names": ["array-like", None],"class_names": ["array-like", "boolean", None],"label": [StrOptions("all", "root", "none")],"filled": ["boolean"],"impurity": ["boolean"],"node_ids": ["boolean"],"proportion": ["boolean"],"rounded": ["boolean"],"precision": [Interval(Integral, 0, None, closed="left"), None],"ax": "no_validation","fontsize": [Interval(Integral, 0, None, closed="left"), None] }, prefer_skip_nested_validation=True)
def plot_tree(decision_tree, *, max_depth=..., feature_names=..., class_names=..., label=..., filled=..., impurity=..., node_ids=..., proportion=..., rounded=..., precision=..., ax=..., fontsize=...): # -> list[Annotation]:
    """Plot a decision tree.

    The sample counts that are shown are weighted with any sample_weights that
    might be present.

    The visualization is fit automatically to the size of the axis.
    Use the ``figsize`` or ``dpi`` arguments of ``plt.figure``  to control
    the size of the rendering.

    Read more in the :ref:`User Guide <tree>`.

    .. versionadded:: 0.21

    Parameters
    ----------
    decision_tree : decision tree regressor or classifier
        The decision tree to be plotted.

    max_depth : int, default=None
        The maximum depth of the representation. If None, the tree is fully
        generated.

    feature_names : array-like of str, default=None
        Names of each of the features.
        If None, generic names will be used ("x[0]", "x[1]", ...).

    class_names : array-like of str or True, default=None
        Names of each of the target classes in ascending numerical order.
        Only relevant for classification and not supported for multi-output.
        If ``True``, shows a symbolic representation of the class name.

    label : {'all', 'root', 'none'}, default='all'
        Whether to show informative labels for impurity, etc.
        Options include 'all' to show at every node, 'root' to show only at
        the top root node, or 'none' to not show at any node.

    filled : bool, default=False
        When set to ``True``, paint nodes to indicate majority class for
        classification, extremity of values for regression, or purity of node
        for multi-output.

    impurity : bool, default=True
        When set to ``True``, show the impurity at each node.

    node_ids : bool, default=False
        When set to ``True``, show the ID number on each node.

    proportion : bool, default=False
        When set to ``True``, change the display of 'values' and/or 'samples'
        to be proportions and percentages respectively.

    rounded : bool, default=False
        When set to ``True``, draw node boxes with rounded corners and use
        Helvetica fonts instead of Times-Roman.

    precision : int, default=3
        Number of digits of precision for floating point in the values of
        impurity, threshold and value attributes of each node.

    ax : matplotlib axis, default=None
        Axes to plot to. If None, use current axis. Any previous content
        is cleared.

    fontsize : int, default=None
        Size of text font. If None, determined automatically to fit figure.

    Returns
    -------
    annotations : list of artists
        List containing the artists for the annotation boxes making up the
        tree.

    Examples
    --------
    >>> from sklearn.datasets import load_iris
    >>> from sklearn import tree

    >>> clf = tree.DecisionTreeClassifier(random_state=0)
    >>> iris = load_iris()

    >>> clf = clf.fit(iris.data, iris.target)
    >>> tree.plot_tree(clf)
    [...]
    """
    ...

class _BaseTreeExporter:
    def __init__(self, max_depth=..., feature_names=..., class_names=..., label=..., filled=..., impurity=..., node_ids=..., proportion=..., rounded=..., precision=..., fontsize=...) -> None:
        ...
    
    def get_color(self, value): # -> str:
        ...
    
    def get_fill_color(self, tree, node_id): # -> str:
        ...
    
    def node_to_str(self, tree, node_id, criterion):
        ...
    
    def str_escape(self, string):
        ...
    


class _DOTTreeExporter(_BaseTreeExporter):
    def __init__(self, out_file=..., max_depth=..., feature_names=..., class_names=..., label=..., filled=..., leaves_parallel=..., impurity=..., node_ids=..., proportion=..., rotate=..., rounded=..., special_characters=..., precision=..., fontname=...) -> None:
        ...
    
    def export(self, decision_tree): # -> None:
        ...
    
    def tail(self): # -> None:
        ...
    
    def head(self): # -> None:
        ...
    
    def recurse(self, tree, node_id, criterion, parent=..., depth=...): # -> None:
        ...
    
    def str_escape(self, string):
        ...
    


class _MPLTreeExporter(_BaseTreeExporter):
    def __init__(self, max_depth=..., feature_names=..., class_names=..., label=..., filled=..., impurity=..., node_ids=..., proportion=..., rounded=..., precision=..., fontsize=...) -> None:
        ...
    
    def export(self, decision_tree, ax=...): # -> list[Annotation]:
        ...
    
    def recurse(self, node, tree, ax, max_x, max_y, depth=...): # -> None:
        ...
    


@validate_params({ "decision_tree": "no_validation","out_file": [str, None, HasMethods("write")],"max_depth": [Interval(Integral, 0, None, closed="left"), None],"feature_names": ["array-like", None],"class_names": ["array-like", "boolean", None],"label": [StrOptions("all", "root", "none")],"filled": ["boolean"],"leaves_parallel": ["boolean"],"impurity": ["boolean"],"node_ids": ["boolean"],"proportion": ["boolean"],"rotate": ["boolean"],"rounded": ["boolean"],"special_characters": ["boolean"],"precision": [Interval(Integral, 0, None, closed="left"), None],"fontname": [str] }, prefer_skip_nested_validation=True)
def export_graphviz(decision_tree, out_file=..., *, max_depth=..., feature_names=..., class_names=..., label=..., filled=..., leaves_parallel=..., impurity=..., node_ids=..., proportion=..., rotate=..., rounded=..., special_characters=..., precision=..., fontname=...): # -> None:
    """Export a decision tree in DOT format.

    This function generates a GraphViz representation of the decision tree,
    which is then written into `out_file`. Once exported, graphical renderings
    can be generated using, for example::

        $ dot -Tps tree.dot -o tree.ps      (PostScript format)
        $ dot -Tpng tree.dot -o tree.png    (PNG format)

    The sample counts that are shown are weighted with any sample_weights that
    might be present.

    Read more in the :ref:`User Guide <tree>`.

    Parameters
    ----------
    decision_tree : object
        The decision tree estimator to be exported to GraphViz.

    out_file : object or str, default=None
        Handle or name of the output file. If ``None``, the result is
        returned as a string.

        .. versionchanged:: 0.20
            Default of out_file changed from "tree.dot" to None.

    max_depth : int, default=None
        The maximum depth of the representation. If None, the tree is fully
        generated.

    feature_names : array-like of shape (n_features,), default=None
        An array containing the feature names.
        If None, generic names will be used ("x[0]", "x[1]", ...).

    class_names : array-like of shape (n_classes,) or bool, default=None
        Names of each of the target classes in ascending numerical order.
        Only relevant for classification and not supported for multi-output.
        If ``True``, shows a symbolic representation of the class name.

    label : {'all', 'root', 'none'}, default='all'
        Whether to show informative labels for impurity, etc.
        Options include 'all' to show at every node, 'root' to show only at
        the top root node, or 'none' to not show at any node.

    filled : bool, default=False
        When set to ``True``, paint nodes to indicate majority class for
        classification, extremity of values for regression, or purity of node
        for multi-output.

    leaves_parallel : bool, default=False
        When set to ``True``, draw all leaf nodes at the bottom of the tree.

    impurity : bool, default=True
        When set to ``True``, show the impurity at each node.

    node_ids : bool, default=False
        When set to ``True``, show the ID number on each node.

    proportion : bool, default=False
        When set to ``True``, change the display of 'values' and/or 'samples'
        to be proportions and percentages respectively.

    rotate : bool, default=False
        When set to ``True``, orient tree left to right rather than top-down.

    rounded : bool, default=False
        When set to ``True``, draw node boxes with rounded corners.

    special_characters : bool, default=False
        When set to ``False``, ignore special characters for PostScript
        compatibility.

    precision : int, default=3
        Number of digits of precision for floating point in the values of
        impurity, threshold and value attributes of each node.

    fontname : str, default='helvetica'
        Name of font used to render text.

    Returns
    -------
    dot_data : str
        String representation of the input tree in GraphViz dot format.
        Only returned if ``out_file`` is None.

        .. versionadded:: 0.18

    Examples
    --------
    >>> from sklearn.datasets import load_iris
    >>> from sklearn import tree

    >>> clf = tree.DecisionTreeClassifier()
    >>> iris = load_iris()

    >>> clf = clf.fit(iris.data, iris.target)
    >>> tree.export_graphviz(clf)
    'digraph Tree {...
    """
    ...

@validate_params({ "decision_tree": [DecisionTreeClassifier, DecisionTreeRegressor],"feature_names": ["array-like", None],"class_names": ["array-like", None],"max_depth": [Interval(Integral, 0, None, closed="left"), None],"spacing": [Interval(Integral, 1, None, closed="left"), None],"decimals": [Interval(Integral, 0, None, closed="left"), None],"show_weights": ["boolean"] }, prefer_skip_nested_validation=True)
def export_text(decision_tree, *, feature_names=..., class_names=..., max_depth=..., spacing=..., decimals=..., show_weights=...): # -> Literal['']:
    """Build a text report showing the rules of a decision tree.

    Note that backwards compatibility may not be supported.

    Parameters
    ----------
    decision_tree : object
        The decision tree estimator to be exported.
        It can be an instance of
        DecisionTreeClassifier or DecisionTreeRegressor.

    feature_names : array-like of shape (n_features,), default=None
        An array containing the feature names.
        If None generic names will be used ("feature_0", "feature_1", ...).

    class_names : array-like of shape (n_classes,), default=None
        Names of each of the target classes in ascending numerical order.
        Only relevant for classification and not supported for multi-output.

        - if `None`, the class names are delegated to `decision_tree.classes_`;
        - otherwise, `class_names` will be used as class names instead of
          `decision_tree.classes_`. The length of `class_names` must match
          the length of `decision_tree.classes_`.

        .. versionadded:: 1.3

    max_depth : int, default=10
        Only the first max_depth levels of the tree are exported.
        Truncated branches will be marked with "...".

    spacing : int, default=3
        Number of spaces between edges. The higher it is, the wider the result.

    decimals : int, default=2
        Number of decimal digits to display.

    show_weights : bool, default=False
        If true the classification weights will be exported on each leaf.
        The classification weights are the number of samples each class.

    Returns
    -------
    report : str
        Text summary of all the rules in the decision tree.

    Examples
    --------

    >>> from sklearn.datasets import load_iris
    >>> from sklearn.tree import DecisionTreeClassifier
    >>> from sklearn.tree import export_text
    >>> iris = load_iris()
    >>> X = iris['data']
    >>> y = iris['target']
    >>> decision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)
    >>> decision_tree = decision_tree.fit(X, y)
    >>> r = export_text(decision_tree, feature_names=iris['feature_names'])
    >>> print(r)
    |--- petal width (cm) <= 0.80
    |   |--- class: 0
    |--- petal width (cm) >  0.80
    |   |--- petal width (cm) <= 1.75
    |   |   |--- class: 1
    |   |--- petal width (cm) >  1.75
    |   |   |--- class: 2
    """
    ...


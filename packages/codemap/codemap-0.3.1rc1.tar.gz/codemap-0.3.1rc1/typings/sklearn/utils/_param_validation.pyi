"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from numbers import Real

class InvalidParameterError(ValueError, TypeError):
    """Custom exception to be raised when the parameter of a class/method/function
    does not have a valid type or value.
    """
    ...


def validate_parameter_constraints(parameter_constraints, params, caller_name): # -> None:
    """Validate types and values of given parameters.

    Parameters
    ----------
    parameter_constraints : dict or {"no_validation"}
        If "no_validation", validation is skipped for this parameter.

        If a dict, it must be a dictionary `param_name: list of constraints`.
        A parameter is valid if it satisfies one of the constraints from the list.
        Constraints can be:
        - an Interval object, representing a continuous or discrete range of numbers
        - the string "array-like"
        - the string "sparse matrix"
        - the string "random_state"
        - callable
        - None, meaning that None is a valid value for the parameter
        - any type, meaning that any instance of this type is valid
        - an Options object, representing a set of elements of a given type
        - a StrOptions object, representing a set of strings
        - the string "boolean"
        - the string "verbose"
        - the string "cv_object"
        - the string "nan"
        - a MissingValues object representing markers for missing values
        - a HasMethods object, representing method(s) an object must have
        - a Hidden object, representing a constraint not meant to be exposed to the user

    params : dict
        A dictionary `param_name: param_value`. The parameters to validate against the
        constraints.

    caller_name : str
        The name of the estimator or function or method that called this function.
    """
    ...

def make_constraint(constraint): # -> _ArrayLikes | _SparseMatrices | _RandomStates | _Callables | _NoneConstraint | _InstancesOf | Interval | StrOptions | Options | HasMethods | MissingValues | _Booleans | _VerboseHelper | _CVObjects | _NanConstraint:
    """Convert the constraint into the appropriate Constraint object.

    Parameters
    ----------
    constraint : object
        The constraint to convert.

    Returns
    -------
    constraint : instance of _Constraint
        The converted constraint.
    """
    ...

def validate_params(parameter_constraints, *, prefer_skip_nested_validation): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    """Decorator to validate types and values of functions and methods.

    Parameters
    ----------
    parameter_constraints : dict
        A dictionary `param_name: list of constraints`. See the docstring of
        `validate_parameter_constraints` for a description of the accepted constraints.

        Note that the *args and **kwargs parameters are not validated and must not be
        present in the parameter_constraints dictionary.

    prefer_skip_nested_validation : bool
        If True, the validation of parameters of inner estimators or functions
        called by the decorated function will be skipped.

        This is useful to avoid validating many times the parameters passed by the
        user from the public facing API. It's also useful to avoid validating
        parameters that we pass internally to inner functions that are guaranteed to
        be valid by the test suite.

        It should be set to True for most functions, except for those that receive
        non-validated objects as parameters or that are just wrappers around classes
        because they only perform a partial validation.

    Returns
    -------
    decorated_function : function or method
        The decorated function.
    """
    ...

class RealNotInt(Real):
    """A type that represents reals that are not instances of int.

    Behaves like float, but also works with values extracted from numpy arrays.
    isintance(1, RealNotInt) -> False
    isinstance(1.0, RealNotInt) -> True
    """
    ...


class _Constraint(ABC):
    """Base class for the constraint objects."""
    def __init__(self) -> None:
        ...
    
    @abstractmethod
    def is_satisfied_by(self, val): # -> None:
        """Whether or not a value satisfies the constraint.

        Parameters
        ----------
        val : object
            The value to check.

        Returns
        -------
        is_satisfied : bool
            Whether or not the constraint is satisfied by this value.
        """
        ...
    
    @abstractmethod
    def __str__(self) -> str:
        """A human readable representational string of the constraint."""
        ...
    


class _InstancesOf(_Constraint):
    """Constraint representing instances of a given type.

    Parameters
    ----------
    type : type
        The valid type.
    """
    def __init__(self, type) -> None:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _NoneConstraint(_Constraint):
    """Constraint representing the None singleton."""
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _NanConstraint(_Constraint):
    """Constraint representing the indicator `np.nan`."""
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _PandasNAConstraint(_Constraint):
    """Constraint representing the indicator `pd.NA`."""
    def is_satisfied_by(self, val): # -> Literal[False]:
        ...
    
    def __str__(self) -> str:
        ...
    


class Options(_Constraint):
    """Constraint representing a finite set of instances of a given type.

    Parameters
    ----------
    type : type

    options : set
        The set of valid scalars.

    deprecated : set or None, default=None
        A subset of the `options` to mark as deprecated in the string
        representation of the constraint.
    """
    def __init__(self, type, options, *, deprecated=...) -> None:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class StrOptions(Options):
    """Constraint representing a finite set of strings.

    Parameters
    ----------
    options : set of str
        The set of valid strings.

    deprecated : set of str or None, default=None
        A subset of the `options` to mark as deprecated in the string
        representation of the constraint.
    """
    def __init__(self, options, *, deprecated=...) -> None:
        ...
    


class Interval(_Constraint):
    """Constraint representing a typed interval.

    Parameters
    ----------
    type : {numbers.Integral, numbers.Real, RealNotInt}
        The set of numbers in which to set the interval.

        If RealNotInt, only reals that don't have the integer type
        are allowed. For example 1.0 is allowed but 1 is not.

    left : float or int or None
        The left bound of the interval. None means left bound is -∞.

    right : float, int or None
        The right bound of the interval. None means right bound is +∞.

    closed : {"left", "right", "both", "neither"}
        Whether the interval is open or closed. Possible choices are:

        - `"left"`: the interval is closed on the left and open on the right.
          It is equivalent to the interval `[ left, right )`.
        - `"right"`: the interval is closed on the right and open on the left.
          It is equivalent to the interval `( left, right ]`.
        - `"both"`: the interval is closed.
          It is equivalent to the interval `[ left, right ]`.
        - `"neither"`: the interval is open.
          It is equivalent to the interval `( left, right )`.

    Notes
    -----
    Setting a bound to `None` and setting the interval closed is valid. For instance,
    strictly speaking, `Interval(Real, 0, None, closed="both")` corresponds to
    `[0, +∞) U {+∞}`.
    """
    def __init__(self, type, left, right, *, closed) -> None:
        ...
    
    def __contains__(self, val): # -> bool:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _ArrayLikes(_Constraint):
    """Constraint representing array-likes"""
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _SparseMatrices(_Constraint):
    """Constraint representing sparse matrices."""
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _Callables(_Constraint):
    """Constraint representing callables."""
    def is_satisfied_by(self, val): # -> TypeIs[Callable[..., object]]:
        ...
    
    def __str__(self) -> str:
        ...
    


class _RandomStates(_Constraint):
    """Constraint representing random states.

    Convenience class for
    [Interval(Integral, 0, 2**32 - 1, closed="both"), np.random.RandomState, None]
    """
    def __init__(self) -> None:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _Booleans(_Constraint):
    """Constraint representing boolean likes.

    Convenience class for
    [bool, np.bool_]
    """
    def __init__(self) -> None:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _VerboseHelper(_Constraint):
    """Helper constraint for the verbose parameter.

    Convenience class for
    [Interval(Integral, 0, None, closed="left"), bool, numpy.bool_]
    """
    def __init__(self) -> None:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class MissingValues(_Constraint):
    """Helper constraint for the `missing_values` parameters.

    Convenience for
    [
        Integral,
        Interval(Real, None, None, closed="both"),
        str,   # when numeric_only is False
        None,  # when numeric_only is False
        _NanConstraint(),
        _PandasNAConstraint(),
    ]

    Parameters
    ----------
    numeric_only : bool, default=False
        Whether to consider only numeric missing value markers.

    """
    def __init__(self, numeric_only=...) -> None:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class HasMethods(_Constraint):
    """Constraint representing objects that expose specific methods.

    It is useful for parameters following a protocol and where we don't want to impose
    an affiliation to a specific module or class.

    Parameters
    ----------
    methods : str or list of str
        The method(s) that the object is expected to expose.
    """
    @validate_params({ "methods": [str, list] }, prefer_skip_nested_validation=True)
    def __init__(self, methods) -> None:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _IterablesNotString(_Constraint):
    """Constraint representing iterables that are not strings."""
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class _CVObjects(_Constraint):
    """Constraint representing cv objects.

    Convenient class for
    [
        Interval(Integral, 2, None, closed="left"),
        HasMethods(["split", "get_n_splits"]),
        _IterablesNotString(),
        None,
    ]
    """
    def __init__(self) -> None:
        ...
    
    def is_satisfied_by(self, val): # -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    


class Hidden:
    """Class encapsulating a constraint not meant to be exposed to the user.

    Parameters
    ----------
    constraint : str or _Constraint instance
        The constraint to be used internally.
    """
    def __init__(self, constraint) -> None:
        ...
    


def generate_invalid_param_val(constraint): # -> LiteralString | NDArray[Any] | HasNotMethods | float | Literal[-1, 'a string', 'not a cv object']:
    """Return a value that does not satisfy the constraint.

    Raises a NotImplementedError if there exists no invalid value for this constraint.

    This is only useful for testing purpose.

    Parameters
    ----------
    constraint : _Constraint instance
        The constraint to generate a value for.

    Returns
    -------
    val : object
        A value that does not satisfy the constraint.
    """
    ...

def generate_valid_param(constraint): # -> NDArray[Any] | csr_matrix | RandomState | Callable[..., Any] | float | ValidHasMethods | list[int] | Literal[1, True, 'missing', 5, 0] | None:
    """Return a value that does satisfy a constraint.

    This is only useful for testing purpose.

    Parameters
    ----------
    constraint : Constraint instance
        The constraint to generate a value for.

    Returns
    -------
    val : object
        A value that does satisfy the constraint.
    """
    ...


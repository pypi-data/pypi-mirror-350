"""
This type stub file was generated by pyright.
"""

from typing import Protocol, runtime_checkable
from ._available_if import available_if

def check_library_installed(library): # -> ModuleType:
    """Check library is installed."""
    ...

def get_columns(columns): # -> object | None:
    ...

@runtime_checkable
class ContainerAdapterProtocol(Protocol):
    container_lib: str
    def create_container(self, X_output, X_original, columns, inplace=...): # -> None:
        """Create container from `X_output` with additional metadata.

        Parameters
        ----------
        X_output : {ndarray, dataframe}
            Data to wrap.

        X_original : {ndarray, dataframe}
            Original input dataframe. This is used to extract the metadata that should
            be passed to `X_output`, e.g. pandas row index.

        columns : callable, ndarray, or None
            The column names or a callable that returns the column names. The
            callable is useful if the column names require some computation. If `None`,
            then no columns are passed to the container's constructor.

        inplace : bool, default=False
            Whether or not we intend to modify `X_output` in-place. However, it does
            not guarantee that we return the same object if the in-place operation
            is not possible.

        Returns
        -------
        wrapped_output : container_type
            `X_output` wrapped into the container type.
        """
        ...
    
    def is_supported_container(self, X): # -> None:
        """Return True if X is a supported container.

        Parameters
        ----------
        Xs: container
            Containers to be checked.

        Returns
        -------
        is_supported_container : bool
            True if X is a supported container.
        """
        ...
    
    def rename_columns(self, X, columns): # -> None:
        """Rename columns in `X`.

        Parameters
        ----------
        X : container
            Container which columns is updated.

        columns : ndarray of str
            Columns to update the `X`'s columns with.

        Returns
        -------
        updated_container : container
            Container with new names.
        """
        ...
    
    def hstack(self, Xs): # -> None:
        """Stack containers horizontally (column-wise).

        Parameters
        ----------
        Xs : list of containers
            List of containers to stack.

        Returns
        -------
        stacked_Xs : container
            Stacked containers.
        """
        ...
    


class PandasAdapter:
    container_lib = ...
    def create_container(self, X_output, X_original, columns, inplace=...):
        ...
    
    def is_supported_container(self, X): # -> bool:
        ...
    
    def rename_columns(self, X, columns):
        ...
    
    def hstack(self, Xs): # -> Any:
        ...
    


class PolarsAdapter:
    container_lib = ...
    def create_container(self, X_output, X_original, columns, inplace=...): # -> Any:
        ...
    
    def is_supported_container(self, X): # -> bool:
        ...
    
    def rename_columns(self, X, columns):
        ...
    
    def hstack(self, Xs): # -> Any:
        ...
    


class ContainerAdaptersManager:
    def __init__(self) -> None:
        ...
    
    @property
    def supported_outputs(self): # -> set[str | Any]:
        ...
    
    def register(self, adapter): # -> None:
        ...
    


ADAPTERS_MANAGER = ...
class _SetOutputMixin:
    """Mixin that dynamically wraps methods to return container based on config.

    Currently `_SetOutputMixin` wraps `transform` and `fit_transform` and configures
    it based on `set_output` of the global configuration.

    `set_output` is only defined if `get_feature_names_out` is defined and
    `auto_wrap_output_keys` is the default value.
    """
    def __init_subclass__(cls, auto_wrap_output_keys=..., **kwargs): # -> None:
        ...
    
    @available_if(_auto_wrap_is_configured)
    def set_output(self, *, transform=...): # -> Self:
        """Set output container.

        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
        for an example on how to use the API.

        Parameters
        ----------
        transform : {"default", "pandas", "polars"}, default=None
            Configure output of `transform` and `fit_transform`.

            - `"default"`: Default output format of a transformer
            - `"pandas"`: DataFrame output
            - `"polars"`: Polars output
            - `None`: Transform configuration is unchanged

            .. versionadded:: 1.4
                `"polars"` option was added.

        Returns
        -------
        self : estimator instance
            Estimator instance.
        """
        ...
    



"""
This type stub file was generated by pyright.
"""

import numpy as np
from pathlib import Path
from typing import Any, Iterator, Protocol
from joblib import Parallel
from tokenizers import Tokenizer

logger = ...
class ProgressParallel(Parallel):
    """A drop-in replacement for joblib.Parallel that shows a tqdm progress bar."""
    def __init__(self, use_tqdm: bool = ..., total: int | None = ..., *args: Any, **kwargs: Any) -> None:
        """
        Initialize the ProgressParallel object.

        :param use_tqdm: Whether to show the progress bar.
        :param total: Total number of tasks (batches) you expect to process. If None,
                    it updates the total dynamically to the number of dispatched tasks.
        :param *args: Additional arguments to pass to `Parallel.__init__`.
        :param **kwargs: Additional keyword arguments to pass to `Parallel.__init__`.
        """
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Create a tqdm context."""
        ...
    
    def print_progress(self) -> None:
        """Hook called by joblib as tasks complete. We update the tqdm bar here."""
        ...
    


class SafeOpenProtocol(Protocol):
    """Protocol to fix safetensors safe open."""
    def get_tensor(self, key: str) -> np.ndarray:
        """Get a tensor."""
        ...
    


_MODULE_MAP = ...
_DIVIDERS = ...
def get_package_extras(package: str, extra: str) -> Iterator[str]:
    """Get the extras of the package."""
    ...

def importable(module: str, extra: str) -> None:
    """Check if a module is importable."""
    ...

def setup_logging() -> None:
    """Simple logging setup."""
    ...

def load_local_model(folder: Path) -> tuple[np.ndarray, Tokenizer, dict[str, str]]:
    """Load a local model."""
    ...


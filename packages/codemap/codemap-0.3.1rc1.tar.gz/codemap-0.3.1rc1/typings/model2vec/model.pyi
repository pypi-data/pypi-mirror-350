"""
This type stub file was generated by pyright.
"""

import numpy as np
from pathlib import Path
from typing import Any, Union
from tokenizers import Tokenizer

PathLike = Union[Path, str]
logger = ...
class StaticModel:
    def __init__(self, vectors: np.ndarray, tokenizer: Tokenizer, config: dict[str, Any] | None = ..., normalize: bool | None = ..., base_model_name: str | None = ..., language: list[str] | None = ...) -> None:
        """
        Initialize the StaticModel.

        :param vectors: The vectors to use.
        :param tokenizer: The Transformers tokenizer to use.
        :param config: Any metadata config.
        :param normalize: Whether to normalize the embeddings.
        :param base_model_name: The used base model name. Used for creating a model card.
        :param language: The language of the model. Used for creating a model card.
        :raises: ValueError if the number of tokens does not match the number of vectors.
        """
        ...
    
    @property
    def dim(self) -> int:
        """Get the dimension of the model."""
        ...
    
    @property
    def normalize(self) -> bool:
        """
        Get the normalize value.

        :return: The normalize value.
        """
        ...
    
    @normalize.setter
    def normalize(self, value: bool) -> None:
        """Update the config if the value of normalize changes."""
        ...
    
    def save_pretrained(self, path: PathLike, model_name: str | None = ...) -> None:
        """
        Save the pretrained model.

        :param path: The path to save to.
        :param model_name: The model name to use in the Model Card.
        """
        ...
    
    def tokenize(self, sentences: list[str], max_length: int | None = ...) -> list[list[int]]:
        """
        Tokenize a list of sentences.

        :param sentences: The sentences to tokenize.
        :param max_length: The maximum length of the sentences in tokens. If this is None, sequences
            are not truncated.
        :return: A list of list of tokens.
        """
        ...
    
    @classmethod
    def from_pretrained(cls: type[StaticModel], path: PathLike, token: str | None = ..., normalize: bool | None = ...) -> StaticModel:
        """
        Load a StaticModel from a local path or huggingface hub path.

        NOTE: if you load a private model from the huggingface hub, you need to pass a token.

        :param path: The path to load your static model from.
        :param token: The huggingface token to use.
        :param normalize: Whether to normalize the embeddings.
        :return: A StaticModel
        """
        ...
    
    @classmethod
    def from_sentence_transformers(cls: type[StaticModel], path: PathLike, token: str | None = ..., normalize: bool | None = ...) -> StaticModel:
        """
        Load a StaticModel trained with sentence transformers from a local path or huggingface hub path.

        NOTE: if you load a private model from the huggingface hub, you need to pass a token.

        :param path: The path to load your static model from.
        :param token: The huggingface token to use.
        :param normalize: Whether to normalize the embeddings.
        :return: A StaticModel
        """
        ...
    
    def encode_as_sequence(self, sentences: list[str] | str, max_length: int | None = ..., batch_size: int = ..., show_progress_bar: bool = ..., use_multiprocessing: bool = ..., multiprocessing_threshold: int = ...) -> list[np.ndarray] | np.ndarray:
        """
        Encode a list of sentences as a list of numpy arrays of tokens.

        This is useful if you want to use the tokens for further processing, or if you want to do sequence
        modeling.
        Note that if you just want the mean, you should use the `encode` method.
        This is about twice as slow.
        Sentences that do not contain any tokens will be turned into an empty array.

        :param sentences: The list of sentences to encode.
        :param max_length: The maximum length of the sentences. Any tokens beyond this length will be truncated.
            If this is None, no truncation is done.
        :param batch_size: The batch size to use.
        :param show_progress_bar: Whether to show the progress bar.
        :param use_multiprocessing: Whether to use multiprocessing.
            By default, this is enabled for inputs > multiprocessing_threshold sentences and disabled otherwise.
        :param multiprocessing_threshold: The threshold in number of sentences for using multiprocessing.
        :return: The encoded sentences with an embedding per token.
        """
        ...
    
    def encode(self, sentences: list[str] | str, show_progress_bar: bool = ..., max_length: int | None = ..., batch_size: int = ..., use_multiprocessing: bool = ..., multiprocessing_threshold: int = ..., **kwargs: Any) -> np.ndarray:
        """
        Encode a list of sentences.

        This function encodes a list of sentences by averaging the word embeddings of the tokens in the sentence.
        For ease of use, we don't batch sentences together.

        :param sentences: The list of sentences to encode. You can also pass a single sentence.
        :param show_progress_bar: Whether to show the progress bar.
        :param max_length: The maximum length of the sentences. Any tokens beyond this length will be truncated.
            If this is None, no truncation is done.
        :param batch_size: The batch size to use.
        :param use_multiprocessing: Whether to use multiprocessing.
            By default, this is enabled for inputs > multiprocessing_threshold sentences and disabled otherwise.
        :param multiprocessing_threshold: The threshold in number of sentences for using multiprocessing.
        :param **kwargs: Any additional arguments. These are ignored.
        :return: The encoded sentences. If a single sentence was passed, a vector is returned.
        """
        ...
    
    def push_to_hub(self, repo_id: str, private: bool = ..., token: str | None = ...) -> None:
        """
        Push the model to the huggingface hub.

        NOTE: you need to pass a token if you are pushing a private model.

        :param repo_id: The repo id to push to.
        :param private: Whether the repo, if created is set to private.
            If the repo already exists, this doesn't change the visibility.
        :param token: The huggingface token to use.
        """
        ...
    
    @classmethod
    def load_local(cls: type[StaticModel], path: PathLike) -> StaticModel:
        """
        Loads a model from a local path.

        You should only use this code path if you are concerned with start-up time.
        Loading via the `from_pretrained` method is safer, and auto-downloads, but
        also means we import a whole bunch of huggingface code that we don't need.

        Additionally, huggingface will check the most recent version of the model,
        which can be slow.

        :param path: The path to load the model from. The path is a directory saved by the
            `save_pretrained` method.
        :return: A StaticModel
        :raises: ValueError if the path is not a directory.
        """
        ...
    



"""
This type stub file was generated by pyright.
"""

import numpy as np
from pathlib import Path
from typing import Any
from tokenizers import Tokenizer

logger = ...
def save_pretrained(folder_path: Path, embeddings: np.ndarray, tokenizer: Tokenizer, config: dict[str, Any], create_model_card: bool = ..., **kwargs: Any) -> None:
    """
    Save a model to a folder.

    :param folder_path: The path to the folder.
    :param embeddings: The embeddings.
    :param tokenizer: The tokenizer.
    :param config: A metadata config.
    :param create_model_card: Whether to create a model card.
    :param **kwargs: Any additional arguments.
    """
    ...

def load_pretrained(folder_or_repo_path: str | Path, token: str | None = ..., from_sentence_transformers: bool = ...) -> tuple[np.ndarray, Tokenizer, dict[str, Any], dict[str, Any]]:
    """
    Loads a pretrained model from a folder.

    :param folder_or_repo_path: The folder or repo path to load from.
        - If this is a local path, we will load from the local path.
        - If the local path is not found, we will attempt to load from the huggingface hub.
    :param token: The huggingface token to use.
    :param from_sentence_transformers: Whether to load the model from a sentence transformers model.
    :raises: FileNotFoundError if the folder exists, but the file does not exist locally.
    :return: The embeddings, tokenizer, config, and metadata.

    """
    ...

def push_folder_to_hub(folder_path: Path, repo_id: str, private: bool, token: str | None) -> None:
    """
    Push a model folder to the huggingface hub, including model card.

    :param folder_path: The path to the folder.
    :param repo_id: The repo name.
    :param private: Whether the repo is private.
    :param token: The huggingface token.
    """
    ...


"""
This type stub file was generated by pyright.
"""

import lightning as pl
import numpy as np
import torch
from typing import TypeVar
from lightning.pytorch.utilities.types import OptimizerLRScheduler
from tokenizers import Tokenizer
from torch import nn
from model2vec.inference import StaticModelPipeline
from model2vec.train.base import FinetunableStaticModel

logger = ...
_RANDOM_SEED = ...
LabelType = TypeVar("LabelType", list[str], list[list[str]])
class StaticModelForClassification(FinetunableStaticModel):
    def __init__(self, *, vectors: torch.Tensor, tokenizer: Tokenizer, n_layers: int = ..., hidden_dim: int = ..., out_dim: int = ..., pad_id: int = ...) -> None:
        """Initialize a standard classifier model."""
        ...
    
    @property
    def classes(self) -> np.ndarray:
        """Return all clasess in the correct order."""
        ...
    
    def construct_head(self) -> nn.Sequential:
        """Constructs a simple classifier head."""
        ...
    
    def predict(self, X: list[str], show_progress_bar: bool = ..., batch_size: int = ..., threshold: float = ...) -> np.ndarray:
        """
        Predict labels for a set of texts.

        In single-label mode, each prediction is a single class.
        In multilabel mode, each prediction is a list of classes.

        :param X: The texts to predict on.
        :param show_progress_bar: Whether to show a progress bar.
        :param batch_size: The batch size.
        :param threshold: The threshold for multilabel classification.
        :return: The predictions.
        """
        ...
    
    def predict_proba(self, X: list[str], show_progress_bar: bool = ..., batch_size: int = ...) -> np.ndarray:
        """
        Predict probabilities for each class.

        In single-label mode, returns softmax probabilities.
        In multilabel mode, returns sigmoid probabilities.
        """
        ...
    
    def fit(self, X: list[str], y: LabelType, learning_rate: float = ..., batch_size: int | None = ..., min_epochs: int | None = ..., max_epochs: int | None = ..., early_stopping_patience: int | None = ..., test_size: float = ..., device: str = ...) -> StaticModelForClassification:
        """
        Fit a model.

        This function creates a Lightning Trainer object and fits the model to the data.
        It supports both single-label and multi-label classification.
        We use early stopping. After training, the weights of the best model are loaded back into the model.

        This function seeds everything with a seed of 42, so the results are reproducible.
        It also splits the data into a train and validation set, again with a random seed.

        :param X: The texts to train on.
        :param y: The labels to train on. If the first element is a list, multi-label classification is assumed.
        :param learning_rate: The learning rate.
        :param batch_size: The batch size. If None, a good batch size is chosen automatically.
        :param min_epochs: The minimum number of epochs to train for.
        :param max_epochs: The maximum number of epochs to train for.
            If this is -1, the model trains until early stopping is triggered.
        :param early_stopping_patience: The patience for early stopping.
            If this is None, early stopping is disabled.
        :param test_size: The test size for the train-test split.
        :param device: The device to train on. If this is "auto", the device is chosen automatically.
        :return: The fitted model.
        """
        ...
    
    def evaluate(self, X: list[str], y: LabelType, batch_size: int = ..., threshold: float = ..., output_dict: bool = ...) -> str | dict[str, dict[str, float]]:
        """
        Evaluate the classifier on a given dataset using scikit-learn's classification report.

        :param X: The texts to predict on.
        :param y: The ground truth labels.
        :param batch_size: The batch size.
        :param threshold: The threshold for multilabel classification.
        :param output_dict: Whether to output the classification report as a dictionary.
        :return: A classification report.
        """
        ...
    
    def to_pipeline(self) -> StaticModelPipeline:
        """Convert the model to an sklearn pipeline."""
        ...
    


class _ClassifierLightningModule(pl.LightningModule):
    def __init__(self, model: StaticModelForClassification, learning_rate: float) -> None:
        """Initialize the LightningModule."""
        ...
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """Simple forward pass."""
        ...
    
    def training_step(self, batch: tuple[torch.Tensor, torch.Tensor], batch_idx: int) -> torch.Tensor:
        """Training step using cross-entropy loss for single-label and binary cross-entropy for multilabel training."""
        ...
    
    def validation_step(self, batch: tuple[torch.Tensor, torch.Tensor], batch_idx: int) -> torch.Tensor:
        """Validation step computing loss and accuracy."""
        ...
    
    def configure_optimizers(self) -> OptimizerLRScheduler:
        """Configure optimizer and learning rate scheduler."""
        ...
    



{
  "ModuleNotFoundError": {
    "explanation": "You are trying to import a module that is not installed.",
    "fix": "Run `pip install <module_name>` to install the missing module."
  },
  "ImportError": {
    "explanation": "Python encountered an issue while trying to import a module or name.",
    "fix": "Check that the module or object exists and is correctly spelled."
  },
  "SyntaxError": {
    "explanation": "There is a syntax mistake in your code, like a missing colon or parenthesis.",
    "fix": "Review your code syntax carefully."
  },
  "IndentationError": {
    "explanation": "You have an incorrect indentation level.",
    "fix": "Ensure consistent use of spaces or tabs for indentation."
  },
  "NameError": {
    "explanation": "You are trying to use a variable or function name that has not been defined.",
    "fix": "Define the variable or check for typos."
  },
  "TypeError": {
    "explanation": "An operation was applied to an object of inappropriate type.",
    "fix": "Check your function inputs and data types."
  },
  "ValueError": {
    "explanation": "A function received an argument of the right type but inappropriate value.",
    "fix": "Check the value passed to the function for correctness."
  },
  "IndexError": {
    "explanation": "You tried to access an index that is out of range for a list or array.",
    "fix": "Make sure your index is within the valid range."
  },
  "KeyError": {
    "explanation": "You tried to access a dictionary key that does not exist.",
    "fix": "Check if the key exists before accessing it."
  },
  "AttributeError": {
    "explanation": "You tried to access an attribute or method that the object does not have.",
    "fix": "Verify the attribute name and that the object supports it."
  },
  "ZeroDivisionError": {
    "explanation": "You tried to divide a number by zero.",
    "fix": "Make sure the divisor is not zero."
  },
  "FileNotFoundError": {
    "explanation": "The file you tried to access does not exist.",
    "fix": "Check the file path and ensure the file is present."
  },
  "PermissionError": {
    "explanation": "You do not have the required permissions to access the file or directory.",
    "fix": "Check file permissions or run the script with proper privileges."
  },
  "IsADirectoryError": {
    "explanation": "A directory was used when a file was expected.",
    "fix": "Check the path and ensure you're referencing a file, not a directory."
  },
  "NotADirectoryError": {
    "explanation": "A file was used when a directory was expected.",
    "fix": "Ensure the path points to a directory."
  },
  "TimeoutError": {
    "explanation": "An operation timed out.",
    "fix": "Increase timeout or check network conditions."
  },
  "ConnectionError": {
    "explanation": "A connection attempt failed.",
    "fix": "Check network settings or service availability."
  },
  "RecursionError": {
    "explanation": "Maximum recursion depth exceeded.",
    "fix": "Ensure base cases exist in recursive functions."
  },
  "MemoryError": {
    "explanation": "Your program ran out of memory.",
    "fix": "Optimize memory usage or use a machine with more RAM."
  },
  "RuntimeError": {
    "explanation": "A generic runtime error occurred.",
    "fix": "Check the specific message and traceback for more information."
  },
  
  "ArithmeticError": {
    "explanation": "A base class for arithmetic-related errors.",
    "fix": "Check your arithmetic expressions for division or operation issues."
  },
  "FloatingPointError": {
    "explanation": "Raised when a floating point operation fails.",
    "fix": "Check precision or use the decimal module for higher accuracy."
  },
  "OverflowError": {
    "explanation": "Numeric calculation results in a number too large.",
    "fix": "Use the decimal module or check your algorithm for unbounded growth."
  },
  "StopIteration": {
    "explanation": "Raised to signal the end of an iterator.",
    "fix": "Use a for-loop or handle with try-except."
  },
  "UnboundLocalError": {
    "explanation": "Local variable referenced before assignment.",
    "fix": "Assign a value to the variable before using it."
  },
  "AssertionError": {
    "explanation": "Raised when an assert statement fails.",
    "fix": "Ensure conditions in assert statements are correct."
  },
  "EOFError": {
    "explanation": "Raised when input() hits end-of-file (EOF).",
    "fix": "Avoid calling input() on empty input streams."
  },
  "OSError": {
    "explanation": "Base class for operating system-related errors.",
    "fix": "Check permissions and paths for system calls."
  },
  "SystemExit": {
    "explanation": "Raised when sys.exit() is called.",
    "fix": "Handle gracefully if needed in cleanup routines."
  },
  "TemplateNotFound": {
    "explanation": "Flask can't find the specified template.",
    "fix": "Check the template folder path and template file name."
  },
  "WerkzeugRoutingError": {
    "explanation": "Flask/Werkzeug cannot match a URL to any defined routes.",
    "fix": "Verify the route definition and method used in the request."
  },
  "django.core.exceptions.ImproperlyConfigured": {
    "explanation": "Django setting or configuration is missing or incorrect.",
    "fix": "Ensure all required settings are defined in settings.py."
  },
  "django.core.exceptions.ObjectDoesNotExist": {
    "explanation": "An attempt to get an object from the database that doesn\u2019t exist.",
    "fix": "Handle the exception or check existence with .exists() first."
  },
  "django.db.utils.IntegrityError": {
    "explanation": "Database constraint (e.g., unique, null) was violated.",
    "fix": "Ensure data meets all constraints before saving."
  },
  "fastapi.exceptions.RequestValidationError": {
    "explanation": "FastAPI input validation failed.",
    "fix": "Ensure request payload matches the expected schema."
  },
  "sqlalchemy.exc.OperationalError": {
    "explanation": "SQLAlchemy encountered a database connection or query issue.",
    "fix": "Check database connection and query syntax."
  },
  "pydantic.error_wrappers.ValidationError": {
    "explanation": "Pydantic model input validation failed.",
    "fix": "Ensure all required fields and correct types are supplied."
  },
  "werkzeug.routing.BuildError": {
    "explanation": "Flask cannot generate a URL because a required dynamic parameter is missing.",
    "fix": "Check the route definition and pass all required arguments to url_for()."
  },
  "jinja2.exceptions.UndefinedError": {
    "explanation": "You're trying to use a variable in your Jinja template that hasn't been passed from your Flask view.",
    "fix": "Ensure the variable is included in the context when rendering the template."
  },
  "flask.app.BadRequestKeyError": {
    "explanation": "You tried to access a form or request parameter that doesn't exist.",
    "fix": "Use request.form.get('key') instead of request.form['key'] to avoid this error."
  },
  "RuntimeError: Working outside of request context.": {
    "explanation": "You're trying to access the request object outside of a request context.",
    "fix": "Make sure the code that uses the request object runs during an actual HTTP request."
  },
  "jinja2.exceptions.TemplateNotFound": {
    "explanation": "The template file you're trying to render was not found in the templates directory.",
    "fix": "Ensure the template file exists and is located in the correct templates folder."
  },
  "ImportError: cannot import name 'Flask'": {
    "explanation": "Flask is either not installed or the import statement is incorrect.",
    "fix": "Install Flask using pip and make sure you're using the correct import syntax: from flask import Flask."
  },
  "TypeError: 'NoneType' object is not callable": {
    "explanation": "You're probably returning None from a route or view function that Flask is trying to use as a view.",
    "fix": "Make sure your view functions return a valid response like a string or render_template() call."
  },
  "AssertionError: View function mapping is overwriting an existing endpoint function": {
    "explanation": "Two view functions are registered with the same endpoint name.",
    "fix": "Ensure each route uses a unique function name or explicitly define the endpoint."
  },
  "werkzeug.exceptions.HTTPException.wrap.<locals>.newcls: 404 Not Found": {
    "explanation": "The requested route does not exist in your Flask app.",
    "fix": "Check your route definitions and ensure you're accessing the correct URL."
  },
  "TemplateSyntaxError: expected token 'end of print statement', got": {
    "explanation": "There is a syntax error in your Jinja2 template.",
    "fix": "Check for missing or extra braces, incorrect tags, or invalid syntax in your templates."
  },
  
 
  "django.db.utils.OperationalError": {
    "explanation": "There was a problem connecting to the database or executing an operation.",
    "fix": "Verify your database settings and ensure the database server is running."
  },
  "django.urls.exceptions.NoReverseMatch": {
    "explanation": "Django couldn't reverse a URL because the view name or parameters don't match any defined URL patterns.",
    "fix": "Check the name used in reverse() or url template tags and the arguments passed."
  },
  "django.template.exceptions.TemplateDoesNotExist": {
    "explanation": "Django can't find the template you're trying to render.",
    "fix": "Ensure the template file exists and is in a directory listed in your TEMPLATES settings."
  },
  "django.core.exceptions.ValidationError": {
    "explanation": "Data submitted to a Django form or model didn't pass validation.",
    "fix": "Check your model/form validators and ensure submitted data meets the expected format."
  },
  
  "fastapi.routing.APIRoute.__call__.<locals>.app": {
    "explanation": "There was an issue calling a FastAPI route, likely due to invalid request handling or missing parameters.",
    "fix": "Ensure your endpoint function has the correct parameters and types defined."
  },
  "ImportError: cannot import name 'FastAPI'": {
    "explanation": "FastAPI is not installed or the import is incorrect.",
    "fix": "Install FastAPI with pip and ensure you're using the correct import syntax: from fastapi import FastAPI."
  },
  "AttributeError: 'Depends' object has no attribute": {
    "explanation": "You might be misusing dependency injection in FastAPI.",
    "fix": "Verify your dependency setup and ensure you're using Depends() correctly."
  }
  
}
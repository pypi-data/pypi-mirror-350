[tool.poetry]
name = "fastlink"
version = "0.1.5"
description = "FastLink OAuth 2.0 client for various platforms, asynchronous, easy-to-use, extensible"
authors = ["everysoftware <pravitel2015ify@gmail.com>"]
readme = "README.md"
license = "MIT"
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
]
packages = [{ include = "fastlink" }]

[project]
name = "fastlink"

[project.urls]
Homepage = "https://github.com/everysoftware/fastlink"
Documentation = "https://github.com/everysoftware/fastlink"
Repository = "https://github.com/everysoftware/fastlink"

[tool.poetry.dependencies]
python = "^3.12"
httpx = "^0.28.1"
pyjwt = "^2.10.1"
fastapi = {extras = ["standart"], version = "^0.115.7"}
aiogram = "^3.20.0.post0"
pydantic = "^2.11.5"

[tool.poetry.group.dev.dependencies]
ruff = "^0.9.3"
fastapi = {extras = ["all"], version = "^0.115.7"}
pre-commit = "^4.1.0"
mypy = "^1.15.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py312"
output-format = "concise"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF",  # ruff rules
    "C90",  # mccabe
    "N",  # pep8-naming
    "ASYNC",  # flake8-async
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-puse-pathlib
    "TCH",  # flake8-type-checking
    "PERF",  # Perflint
    # new
    "S",  # flake8-bandit
    "FBT",  # flake8-boolean-trap
    "A",  # flake8-builtins
    "DTZ",  # flake8-datetimez
    "FA",  # flake8-future-annotations
    "LOG",  # flake8-logging
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "FLY",  # flynt
    "PGH",  # pygrep-hooks
    "PL",  # pylint
    "FURB",  # refurb
    "TRY",  # tryceratops
]
ignore = [
    "E501",  # line too long, handled by formatter later
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "RUF012",  # mutable class attributes should be annotated with `typing.ClassVar`
    "S101",  # use of assert detected
    "TRY003",  # avoid specifying long messages outside the exception class
    "PLR6301",  # method could be a function, class method, or static method
    "RUF200",  # failed to parse pyproject.toml
]

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
strict = true
pretty = true
python_version = "3.12"

ignore_missing_imports = true
install_types = true
non_interactive = true
plugins = ["pydantic.mypy"]

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.pytest.ini_options]
asyncio_mode = "auto"

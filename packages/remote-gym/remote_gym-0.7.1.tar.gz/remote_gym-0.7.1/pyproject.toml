[tool.poetry]
name = "remote-gym"
version = "0.7.1"
description = "This is a module to run Gym environments remotely, to enable splitting environment hosting and agent training into separate processes (or even separate machines)."
homepage = "https://github.com/alexander-zap/remote-gym"
authors = ["Alexander Zap"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent"
]
license = "MIT License"
packages = [
    { include = "remote_gym", from = "src" },
]
include = ["src/remote_gym/res/*"]
keywords = [
    "reinforcement learning",
    "rl",
    "imitation learning",
    "gym",
    "gymnasium",
    "dm_env",
]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
setuptools = "^68.0"
gymnasium = "^0.29.0"
gym = "^0.26.2"
protobuf = ">=3.20, <5"
dm-env-rpc = "^1.1.6"
opencv-python = "^4.9.0.80"
fasteners = "^0.19"
gitpython = "^3.1.43"
psutil = "^6.0.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.2"
pytest-cov = "^4.0"
tqdm = "^4.66.1"
gym = { version = "^0.26.2", extras = ["classic-control"] }

[tool.poetry.group.dev.dependencies]
black = "^23.3"
pre-commit = "^2.21.0"
ruff = "^0.8.3"

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Skip unused import rule.
extend-ignore = ["F401"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = { }

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.8.
target-version = "py38"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.yamlfix]
line_length = 89
preserve_quotes = false
quote_basic_values = false
quote_representation = "'"
section_whitelines = 1
sequence_style = "block_style"
whitelines = 1

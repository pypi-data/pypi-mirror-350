"""
This type stub file was generated by cyright.
"""

from .core import baseHandler

class RenderFrameCommandSubmission(baseHandler):
    def configure(self, callback, **kwargs): # -> None:
        ...
    
    def _run_async(self): # -> None:
        ...
    
    def _delayed_delete(self): # -> None:
        """Free the item in the queue frame,
           as we cannot do it safely during rendering.
        """
        ...
    


class _FileDialogQuery:
    def _submit_in_frame(self): # -> None:
        """Submission of the dialog during the frame"""
        ...
    
    def submit(self): # -> None:
        """Submits on the next frame. Must be Incref'd before
           submission, as it will be decref'd after the callback
           is called.
        """
        ...
    


def show_open_file_dialog(context: Context, callback, default_location: str = ..., allow_multiple_files: bool = ..., filters=..., title: str = ..., accept: str = ..., cancel: str = ...): # -> None:
    """
    Open the OS file open selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected.

    default_location: optional default location
    allow_multiple_files (default to False): if True, allow
        selecting several paths which will be passed to the list
        given to the callback. If False, the list has maximum a
        single argument.
    filters: optional list of tuple (name, pattern) for filtering
        visible files
    title: optional title for the modal window
    accept: optional string displayed on the accept button
    cancel: optional string displayed on the cancel button
    """
    ...

def show_save_file_dialog(context: Context, callback, default_location: str = ..., allow_multiple_files: bool = ..., filters=..., title: str = ..., accept: str = ..., cancel: str = ...): # -> None:
    """
    Open the OS file save selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected.

    default_location: optional default location
    allow_multiple_files (default to False): if True, allow
        selecting several paths which will be passed to the list
        given to the callback. If False, the list has maximum a
        single argument.
    filters: optional list of tuple (name, pattern) for filtering
        visible files
    title: optional title for the modal window
    accept: optional string displayed on the accept button
    cancel: optional string displayed on the cancel button
    """
    ...

def show_open_folder_dialog(context: Context, callback, default_location: str = ..., allow_multiple_files: bool = ..., filters=..., title: str = ..., accept: str = ..., cancel: str = ...): # -> None:
    """
    Open the OS directory open selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected.

    default_location: optional default location
    allow_multiple_files (default to False): if True, allow
        selecting several paths which will be passed to the list
        given to the callback. If False, the list has maximum a
        single argument.
    filters: optional list of tuple (name, pattern) for filtering
        visible files
    title: optional title for the modal window
    accept: optional string displayed on the accept button
    cancel: optional string displayed on the cancel button
    """
    ...


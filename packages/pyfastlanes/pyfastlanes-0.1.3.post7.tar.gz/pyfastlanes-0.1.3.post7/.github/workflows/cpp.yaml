name: CPP
run-name: >-
  ${{ github.workflow }} on ${{ github.ref_name }} (#${{ github.run_number }})
  — ${{ github.event.pull_request.title || github.event.head_commit.message }}

# ──────────────────────────────────────────────────────────────────────────────
# Events
# ──────────────────────────────────────────────────────────────────────────────
on:
  push:
  pull_request:
    branches: [ "main", "dev" ]

# Cancel in-flight runs on the same branch/PR so we do not waste minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global env (tweak once, use everywhere)
env:
  CMAKE_GENERATOR: Ninja            # much faster than Makefiles

jobs:
  # ──────────────────────────────────────────────────────────────────────────────
  # 1️⃣  Format-check (quick)
  # ──────────────────────────────────────────────────────────────────────────────
  check-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect CPU count
        shell: bash
        run: make detect-cpu | tee -a "$GITHUB_ENV"

      - name: Run format check
        run: make format-check

  # ──────────────────────────────────────────────────────────────────────────────
  # 2️⃣  Main build + clang-tidy (Linux + macOS)
  # ──────────────────────────────────────────────────────────────────────────────
  build:
    needs: check-format
    strategy:
      fail-fast: false
      matrix:
        platform: [ ubuntu-latest, macos-latest, windows-latest ]
        build_type: [ Debug, Release ]
        cxx: [ clang++ ]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Detect CPU count
        shell: bash
        run: make detect-cpu | tee -a "$GITHUB_ENV"

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Print clang/clang-tidy version
        run: |
          clang --version
          clang-tidy --version

      # ----------------------------------------------------------------------
      # Configure (runs clang-tidy via CMake)
      # ----------------------------------------------------------------------
      - name: Configure (with clang-tidy checks)
        shell: bash
        run: |
          cmake -S "${{ github.workspace }}" \
                -B build_${{ matrix.build_type }} \
                -DFLS_ENABLE_VERBOSE_OUTPUT=ON \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_C_COMPILER=clang \
                -DFLS_ENABLE_CLANG_TIDY=ON \
                -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}

      - name: Build (clang-tidy runs automatically)
        run: cmake --build build_${{ matrix.build_type }} -j $BUILD_THREADS

  # ──────────────────────────────────────────────────────────────────────────────
  # 3️⃣  IWYU build (Linux only)
  # ──────────────────────────────────────────────────────────────────────────────
  #  build-iwyu:
  #    needs: build
  #    strategy:
  #      matrix:
  #        build_type: [ Debug, Release ]
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #      - name: Detect CPU count
  #        shell: bash
  #        run: make detect-cpu | tee -a "$GITHUB_ENV"
  #      - name: Cache IWYU build
  #        uses: actions/cache@v4
  #        with:
  #          path: build_iwyu_${{ matrix.build_type }}
  #          key: ${{ runner.os }}-iwyu-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', '**/*.cmake', '**/*.[ch]pp', '**/*.h') }}
  #          restore-keys: |
  #            ${{ runner.os }}-iwyu-${{ matrix.build_type }}-
  #      - name: Configure (IWYU)
  #        run: |
  #          cmake -S ${{ github.workspace }} \
  #                -B build_iwyu_${{ matrix.build_type }} \
  #                -DFLS_ENABLE_IWYU=ON \
  #                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
  #                -DCMAKE_C_COMPILER=clang \
  #                -DCMAKE_CXX_COMPILER=clang++
  #      - name: Build (IWYU)
  #        run: cmake --build build_iwyu_${{ matrix.build_type }} -j $BUILD_THREADS

  # ──────────────────────────────────────────────────────────────────────────────
  # 4️⃣  Synthetic-dataset generator (Python, cached pip)
  # ──────────────────────────────────────────────────────────────────────────────
  generate_dataset:
    strategy:
      matrix:
        platform: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Detect CPU count
        shell: bash
        run: make detect-cpu | tee -a "$GITHUB_ENV"

      - name: Generate synthetic dataset
        uses: ./.github/actions/generate-dataset

  # ──────────────────────────────────────────────────────────────────────────────
  # 5️⃣  Example build & run
  # ──────────────────────────────────────────────────────────────────────────────
  example:
    strategy:
      matrix:
        platform: [ ubuntu-latest, macos-latest, windows-latest ]
        build_type: [ Release ]
        cxx: [ clang++ ]
    runs-on: ${{ matrix.platform }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Detect CPU count
        shell: bash
        run: make detect-cpu | tee -a "$GITHUB_ENV"

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Configure example
        run: |
          CMAKE_ARGS=(
            -S "${{ github.workspace }}"
            -B "build_${{ matrix.build_type }}"
            -DFLS_BUILD_EXAMPLES=ON
            -DFLS_ENABLE_VERBOSE_OUTPUT=ON
            -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}"
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER="${{ matrix.cxx }}"
          )
          # Use static MSVC runtime on Windows to avoid ASAN/UBSAN mismatch
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            CMAKE_ARGS+=(-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded)
          fi
          cmake "${CMAKE_ARGS[@]}"

      - name: Build example
        run: cmake --build "build_${{ matrix.build_type }}" --parallel

      - name: Run cpp_example
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ./build_${{ matrix.build_type }}/examples/cpp_example.exe
          else
            ./build_${{ matrix.build_type }}/examples/cpp_example
          fi

  # ──────────────────────────────────────────────────────────────────────────────
  # 6️⃣  Tests (Linux + macOS, Release only)
  # ──────────────────────────────────────────────────────────────────────────────
  test:
    strategy:
      matrix:
        platform: [ ubuntu-latest, macos-latest ]
        build_type: [ Release ]
    runs-on: ${{ matrix.platform }}

    defaults:
      run:
        shell: bash  # Use bash on all platforms to avoid PowerShell issues on Windows

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Detect CPU count
        shell: bash
        run: make detect-cpu | tee -a "$GITHUB_ENV"

      - name: Generate synthetic dataset
        uses: ./.github/actions/generate-dataset

      - name: Install LLVM
        uses: ./.github/actions/install-llvm

      - name: Configure tests
        run: |
          CMAKE_ARGS=(
            -S "${{ github.workspace }}"
            -B "test_build_${{ matrix.build_type }}"
            -DFLS_BUILD_TESTING=ON
            -DFLS_ENABLE_VERBOSE_OUTPUT=ON
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
          )
          # On Windows, use static MSVC runtime to prevent ASAN/UBSAN mismatch
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            CMAKE_ARGS+=(-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded)
          fi
          cmake "${CMAKE_ARGS[@]}"

      - name: Build tests
        run: cmake --build "test_build_${{ matrix.build_type }}" -j $BUILD_THREADS

      - name: Run tests
        working-directory: "test_build_${{ matrix.build_type }}"
        run: ctest -j $BUILD_THREADS --stop-on-failure --output-on-failure --timeout 5000

  # ──────────────────────────────────────────────────────────────────────────────
  # 7️⃣  Install job
  # ──────────────────────────────────────────────────────────────────────────────
  install:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Detect CPU count
        shell: bash
        run: make detect-cpu | tee -a "$GITHUB_ENV"

      # Use the same LLVM toolchain as the other jobs
      - name: Install LLVM toolchain
        uses: ./.github/actions/install-llvm

      - name: Configure + build + install
        shell: bash
        run: |
          CMAKE_ARGS=(
            -S "${{ github.workspace }}"
            -B build
            -G "${CMAKE_GENERATOR}"
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=build/install
          )
          # Use static MSVC runtime on Windows to avoid ASAN/UBSAN mismatch
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            CMAKE_ARGS+=(-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded)
          fi
          cmake "${CMAKE_ARGS[@]}"
          cmake --build build --target install -j $BUILD_THREADS

      - name: Verify installed header files
        shell: bash
        run: |
          set -euo pipefail

          SOURCE_INCLUDE=include
          INSTALL_INCLUDE=build/install/include

          # 1) fail fast if the install tree isn't there
          if [[ ! -d "$INSTALL_INCLUDE" ]]; then
            echo "❌ Error: '$INSTALL_INCLUDE' directory not found"
            exit 1
          fi

          # 2) show what *did* get installed
          echo "✅ Found install include directory; installed headers:"
          find "$INSTALL_INCLUDE" -type f -print

          # 3) walk every .h/.hpp under your source include/, check its counterpart
          missing=()
          while IFS= read -r -d '' src; do
            # strip leading "./"
            rel="${src#./}"
            if [[ ! -f "$INSTALL_INCLUDE/$rel" ]]; then
              missing+=("$rel")
            fi
          done < <(
            cd "$SOURCE_INCLUDE"
            find . -type f \( -name '*.h' -o -name '*.hpp' \) -print0
          )

          # 4) report & fail if anything’s missing
          if (( ${#missing[@]} > 0 )); then
            echo "❌ Missing expected header(s):"
            for hdr in "${missing[@]}"; do
              echo "   • $hdr"
            done
            exit 1
          fi

          echo "✅ All expected headers are present."

      - name: Upload C++ install tree
        uses: actions/upload-artifact@v4
        with:
          name: fastlanes-cpp-install-${{ matrix.os }}
          path: build/install

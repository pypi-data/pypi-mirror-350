name: "TEST: Release and Publish to PyPI and GitHub Container Registry (TEST MODE)"

on:
  workflow_dispatch:
    inputs:
      create_release_notes:
        description: 'Auto-generate release notes'
        type: boolean
        default: true
      draft_release:
        description: 'Create as draft release'
        type: boolean
        default: true
  push:
    branches:
      - dar-minor-release-adjustments

permissions:
  contents: write
  packages: write

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Install dependencies for testing
      run: |
        make dev-deps

    - name: Run tests
      run: |
        make test

    - name: Install dependencies for release
      run: |
        uv pip install --system toml

    - name: Get version
      id: get_version
      run: |
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        # For testing, append a test suffix to avoid conflicts
        TEST_VERSION="${VERSION}-test-${{ github.run_number }}"
        echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_ENV

    - name: Build package
      run: |
        mkdir -p dist
        pip install build
        python -m build

#    - name: Create GitHub Release (TEST MODE)
#      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/dar-minor-release-adjustments')
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      run: |
#        # Use TEST_VERSION for test releases
#        RELEASE_VERSION="v${TEST_VERSION}"
#
#        if [ "${{ github.event.inputs.create_release_notes }}" == "true" ]; then
#          GENERATE_NOTES="--generate-notes"
#        else
#          GENERATE_NOTES=""
#        fi
#
#        # Always create as draft in test mode
#        DRAFT_FLAG="--draft"
#
#        echo "Creating TEST release: $RELEASE_VERSION"
#        gh release create $RELEASE_VERSION \
#          --title "TEST RELEASE: $RELEASE_VERSION" \
#          --notes "This is a TEST release created from branch: ${{ github.ref_name }}" \
#          $GENERATE_NOTES \
#          $DRAFT_FLAG \
#          --prerelease \
#          dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 1

#    - name: Display test results
#      if: github.event_name == 'push'
#      run: |
#        echo "âœ… Test build completed successfully!"
#        echo "Version detected: $VERSION"
#        echo "Test version would be: $TEST_VERSION"
#        echo "Artifacts built:"
#        ls -la dist/

  publish_pypi:
    needs: prepare_release
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Publish to PyPI
      run: |
        uv pip install --system twine
        twine upload dist/*
      env:
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

#  publish_ghcr:
#    needs: prepare_release
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    steps:
#    - name: Check out the repository
#      uses: actions/checkout@v4
#
#    - name: Set up QEMU
#      uses: docker/setup-qemu-action@v3
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v3
#
#    - name: Login to GitHub Container Registry
#      uses: docker/login-action@v3
#      with:
#        registry: ghcr.io
#        username: ${{ github.actor }}
#        password: ${{ secrets.GITHUB_TOKEN }}
#
#    - name: Build and push Docker image
#      uses: docker/build-push-action@v5
#      with:
#        context: .
#        push: true
#        platforms: linux/amd64,linux/arm64
#        tags: |
#          ghcr.io/${{ github.repository }}:latest
#          ghcr.io/${{ github.repository }}:${{ needs.prepare_release.outputs.version }}
#        labels: |
#          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
#          org.opencontainers.image.description=MCP Panther
#          org.opencontainers.image.licenses=Apache-2.0
#        cache-from: type=gha
#        cache-to: type=gha,mode=max
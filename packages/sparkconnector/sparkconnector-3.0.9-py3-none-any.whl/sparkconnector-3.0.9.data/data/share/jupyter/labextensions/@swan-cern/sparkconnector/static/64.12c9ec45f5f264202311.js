"use strict";(self.webpackChunk_swan_cern_sparkconnector=self.webpackChunk_swan_cern_sparkconnector||[]).push([[64],{2064:(e,o,t)=>{t.r(o),t.d(o,{default:()=>b});var n=t(2358),s=t(1490),a=t(6943),r=t(8449),i=t(6029),c=t.n(i),l=t(2914);const d=c().lazy((()=>Promise.all([t.e(241),t.e(98),t.e(704),t.e(262)]).then(t.bind(t,132)))),h=()=>c().createElement(i.Suspense,{fallback:c().createElement("div",null,"loading")},c().createElement(d,null));var k=t(6414),u=t(7572);class p{constructor(e,o){this.labApp=e,this.notebookTracker=o,this.comms=new Map,this.initConfigurationFromServer(),this.initStateHandling()}async initConfigurationFromServer(){const e=await u.ConfigSection.create({name:"sparkconnector_spark_options"}),o=await u.ConfigSection.create({name:"sparkconnector_bundles"});l.h.updateConfigurationFromServer(e.data,o.data)}getNotebookPanel(e){const o=this.notebookTracker.find((o=>o.id===e));if(!o)throw new Error("SparkConnector: Notebook Panel does not exist");return o}createComm(e){var o;const t=null===(o=e.sessionContext.session)||void 0===o?void 0:o.kernel;if(!t)throw new Error("SparkConnector: Trying to create comm when kernel/session is null");console.log("SparkConnector: CREATE COMM for ",e.title.label,t.id);const n=t.createComm("SparkConnector");this.comms.set(e.id,n),n.open({type:"action",action:"sparkconn-action-open"}),n.onClose=()=>{this.comms.delete(e.id),(0,k.runInAction)((()=>{l.h.notebooks[e.id].status="notattached"})),console.log("SparkConnector: Comm closed:",e.title.label)},n.onMsg=o=>{this.handleCommMessage(o,e)}}async trackNotebook(e){if(l.h.notebooks[e.id]||l.h.createNotebookState(e.id,{title:e.title.label}),await e.sessionContext.ready,!this.comms.has(e.id))try{this.createComm(e)}catch(e){console.error("SparkConnector: Error creating comm")}e.sessionContext.statusChanged.connect(((o,t)=>{switch(t){case"restarting":case"terminating":case"autorestarting":case"dead":case"unknown":this.comms.delete(e.id),(0,k.runInAction)((()=>{l.h.notebooks[e.id].status="notattached"}));break;case"starting":if(!this.comms.has(e.id))try{this.createComm(e)}catch(e){console.error("SparkConnector: Error creating comm")}}}),this)}initStateHandling(){this.notebookTracker.widgetAdded.connect(((e,o)=>{this.trackNotebook(o)})),this.notebookTracker.currentChanged.connect(((e,o)=>{o?l.h.setActiveNotebook(o.id):l.h.setActiveNotebook(null)}))}handleCommMessage(e,o){(0,k.runInAction)((()=>{const t=e.content.data;switch(t.msgtype){case"sparkconn-action-open":{const n=e.content.data.page,s=this.getSavedConfigFromNotebookMetadata(o);l.h.setNotebookConfig(o.id,{maxMemory:t.maxmemory,sparkVersion:t.sparkversion,clusterName:t.cluster,savedConfig:s}),"sparkconn-config"===n?l.h.notebooks[o.id].status="configuring":"sparkconn-auth"===n?l.h.notebooks[o.id].status="auth":"sparkconn-connected"===n||console.log("SparkConnector: Unknown page from server");break}case"sparkconn-connected":l.h.notebooks[o.id].connectionResources={sparkWebuiUrl:t.config.sparkwebui,sparkMetricsUrl:t.config.sparkmetrics},l.h.notebooks[o.id].status="connected";break;case"sparkconn-config":l.h.notebooks[o.id].status="configuring";break;case"sparkconn-auth":l.h.notebooks[o.id].status="auth",l.h.notebooks[o.id].authError=t.error;break;case"sparkconn-connect-error":l.h.notebooks[o.id].errorMessage=t.error,l.h.notebooks[o.id].status="error";break;case"sparkconn-action-follow-log":l.h.appendConnectionLog(o.id,t.msg);break;case"sparkconn-action-tail-log":l.h.updateLogs(o.id,t.msg);break;default:console.error("SparkConnector: Received an unknown msgtype from kernel:",e)}}))}onClickAuthenticate(e,o){const t=this.comms.get(e);t&&t.send({action:"sparkconn-action-auth",password:o})}onClickConnect(e,o){const t=this.comms.get(e);t&&t.send({action:"sparkconn-action-connect",options:o})}async promptUserForKernelRestart(e){return this.labApp.commands.execute("notebook:restart-kernel")}async onClickRestart(e){if(await this.promptUserForKernelRestart(e)){const o=this.comms.get(e);o&&o.send({action:"sparkconn-action-disconnect"})}}onRefreshLogs(e){const o=this.comms.get(e);o&&o.send({action:"sparkconn-action-getlogs"})}getSavedConfigFromNotebookMetadata(e){var o;let t;const n=(null===(o=e.model)||void 0===o?void 0:o.metadata)||{};return t=n.sparkconnect?n.sparkconnect:{bundled_options:[],list_of_options:[]},t}saveCurrentConfigToNotebookMetadata(e,o){var t;((null===(t=this.getNotebookPanel(e).model)||void 0===t?void 0:t.metadata)||{}).sparkconnect=o}}const b={id:"@swan-cern/sparkconnector:plugin",description:"Helper to connect to CERN's Spark Clusters",requires:[n.ILabShell,s.INotebookTracker,n.ILayoutRestorer],optional:[a.IThemeManager],activate:function(e,o,t,n,s){const i=new p(e,t);l.h.setAppConnector(i);const d=a.ReactWidget.create(c().createElement(h));d.id="spark-connector",d.title.caption="Apache Spark",d.title.icon=new r.LabIcon({name:"sparkconnector:sparkicon",svgstr:'<svg fill="#616161" class="jp-icon3" role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title>Apache Spark</title><path d="M10.812 0c-.425.013-.845.215-1.196.605a3.593 3.593 0 00-.493.722c-.355.667-.425 1.415-.556 2.143a551.9 551.9 0 00-.726 4.087c-.027.16-.096.227-.244.273C5.83 8.386 4.06 8.94 2.3 9.514c-.387.125-.773.289-1.114.506-1.042.665-1.196 1.753-.415 2.71.346.422.79.715 1.284.936 1.1.49 2.202.976 3.3 1.47.019.01.036.013.053.019h-.004l1.306.535c0 .023.002.045 0 .073-.2 2.03-.39 4.063-.58 6.095-.04.419-.012.831.134 1.23.317.87 1.065 1.148 1.881.701.372-.204.666-.497.937-.818 1.372-1.623 2.746-3.244 4.113-4.872.111-.133.205-.15.363-.098.349.117.697.231 1.045.347h.001c.02.012.045.02.073.03l.142.042c1.248.416 2.68.775 3.929 1.19.4.132.622.164 1.045.098.311-.048.592-.062.828-.236.602-.33.995-.957.988-1.682-.005-.427-.154-.813-.35-1.186-.82-1.556-1.637-3.113-2.461-4.666-.078-.148-.076-.243.037-.375 1.381-1.615 2.756-3.236 4.133-4.855.272-.32.513-.658.653-1.058.308-.878-.09-1.57-1-1.741a2.783 2.783 0 00-1.235.069c-1.974.521-3.947 1.041-5.918 1.57-.175.047-.26.015-.355-.144a353.08 353.08 0 00-2.421-4.018 4.61 4.61 0 00-.652-.849c-.371-.37-.802-.549-1.227-.536zm.172 3.703a.592.592 0 01.189.211c.87 1.446 1.742 2.89 2.609 4.338.07.118.135.16.277.121 1.525-.41 3.052-.813 4.579-1.217.367-.098.735-.193 1.103-.289a.399.399 0 01-.1.2c-1.259 1.48-2.516 2.962-3.779 4.438-.11.13-.12.22-.04.37.937 1.803 1.768 3.309 2.498 4.76l-3.696-1.019c-.538-.18-1.077-.358-1.615-.539-.163-.055-.25-.03-.36.1-1.248 1.488-2.504 2.97-3.759 4.454a.398.398 0 01-.18.132c.035-.378.068-.757.104-1.136.149-1.572.297-3.144.451-4.716-.03-.318.117-.405-.322-.545-1.493-.593-3.346-1.321-4.816-1.905a.595.595 0 01.24-.134c1.797-.57 3.595-1.14 5.394-1.705.127-.04.199-.092.211-.233.013-.148.05-.294.076-.441.241-1.363.483-2.726.726-4.088.068-.386.14-.771.21-1.157z"/></svg>'}),o.add(d,"right",{rank:700}),s&&(s.theme&&s.isLight(s.theme)?l.h.colorTheme="light":l.h.colorTheme="dark",s.themeChanged.connect(((e,o)=>{s.isLight(o.newValue)?l.h.colorTheme="light":l.h.colorTheme="dark"}))),console.log("JupyterLab extension @swan-cern/sparkconnector is activated!")},autoStart:!0}},2914:(e,o,t)=>{t.d(o,{h:()=>r});var n=t(6414);let s=0;class a{constructor(){this.status="configuring",this.selectedConfigurations=[],this.selectedBundles=[],this.logs=[],(0,n.makeAutoObservable)(this)}get filteredAvailableBundles(){const e={};return Object.keys(r.allAvailableBundles).forEach((o=>{const t=r.allAvailableBundles[o],n=t.cluster_filter&&0!==t.cluster_filter.length&&!t.cluster_filter.includes(this.clusterName),s=t.spark_version_filter&&0!==t.spark_version_filter.length&&!t.spark_version_filter.includes(this.sparkVersion);n||s||(e[o]=t)})),e}get optionsToSendToKernel(){const e={};return this.selectedConfigurations.forEach((o=>{o.isEnabled&&(e[o.name]=o.value)})),this.selectedBundles.forEach((o=>{this.filteredAvailableBundles[o].options.forEach((o=>{o.name in e?o.concatenate&&""!==o.concatenate&&(e[o.name]=e[o.name]+o.concatenate+o.value):e[o.name]=o.value}))})),e}addConfiguration(e,o){this.selectedConfigurations.push({id:""+ ++s,name:e,value:o,isEnabled:!0})}removeConfiguration(e){const o=this.selectedConfigurations.findIndex((o=>o.id===e));o>-1&&this.selectedConfigurations.splice(o,1)}addBundle(e){this.selectedBundles.push(e)}removeBundle(e){const o=this.selectedBundles.indexOf(e);o>-1&&this.selectedBundles.splice(o,1)}}const r=new class{constructor(){this.colorTheme="light",this.notebooks={},this.allAvailableBundles={},this.availableOptions=[],this.currentNotebookPanelId=null,(0,n.makeAutoObservable)(this)}setAppConnector(e){this.appConnector=e}updateConfigurationFromServer(e,o){this.allAvailableBundles=o.bundled_options||{};const t=(null==e?void 0:e.spark_options)||[];t.sort(((e,o)=>e.data.category.localeCompare(o.data.category))),this.availableOptions=t}get currentNotebook(){return this.notebooks[this.currentNotebookPanelId]}createNotebookState(e,o){const t=new a;t.title=o.title,t.status="notattached",this.notebooks[e]=t,this.currentNotebookPanelId=e}setActiveNotebook(e){this.currentNotebookPanelId=e}deleteNotebookState(e){delete this.notebooks[e],(this.currentNotebookPanelId=e)&&(this.currentNotebookPanelId=null)}setNotebookConfig(e,o){var t,n,a;this.notebooks[e].clusterName=o.clusterName,this.notebooks[e].sparkVersion=o.sparkVersion,this.notebooks[e].maxMemory=o.maxMemory,this.notebooks[e].selectedConfigurations=[],this.notebooks[e].selectedBundles=[],null===(t=null==o?void 0:o.savedConfig)||void 0===t||t.bundled_options.forEach((o=>{this.allAvailableBundles[o]&&this.notebooks[e].filteredAvailableBundles[o]&&this.notebooks[e].selectedBundles.push(o)})),null===(a=null===(n=null==o?void 0:o.savedConfig)||void 0===n?void 0:n.list_of_options)||void 0===a||a.forEach((o=>{this.notebooks[e].selectedConfigurations.push({id:""+ ++s,name:o.name,value:o.value,isEnabled:void 0===o.isEnabled||o.isEnabled})}))}appendConnectionLog(e,o){this.notebooks[e].logs.push(o)}updateLogs(e,o){this.notebooks[e].logs=o}onClickConnect(){var e,o;if(!this.currentNotebookPanelId)throw Error("SparkConnector: Inconsistent state. Attempting to connect with no active notebook.");console.log("SparkConnector: Connecting to Spark",this.currentNotebook.optionsToSendToKernel),r.currentNotebook.status="connecting",r.currentNotebook.logs=["Waiting for spark context to start"];const t={bundled_options:r.currentNotebook.selectedBundles,list_of_options:r.currentNotebook.selectedConfigurations.map((e=>({name:e.name,value:e.value})))};null===(e=this.appConnector)||void 0===e||e.saveCurrentConfigToNotebookMetadata(this.currentNotebookPanelId,t),null===(o=this.appConnector)||void 0===o||o.onClickConnect(this.currentNotebookPanelId,this.currentNotebook.optionsToSendToKernel)}onClickAuthenticate(e){var o;this.currentNotebook.status="loading",r.currentNotebook.authError=void 0,null===(o=this.appConnector)||void 0===o||o.onClickAuthenticate(this.currentNotebookPanelId,e)}onClickRestart(){var e;null===(e=this.appConnector)||void 0===e||e.onClickRestart(r.currentNotebookPanelId)}onRefreshLogs(){var e;null===(e=this.appConnector)||void 0===e||e.onRefreshLogs(this.currentNotebookPanelId)}};window.sparkConnectorStore=r}}]);
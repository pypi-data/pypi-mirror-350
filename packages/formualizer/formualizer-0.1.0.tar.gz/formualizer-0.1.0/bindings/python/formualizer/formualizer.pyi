"""Type stubs for formualizer Python bindings."""

from typing import Any, Dict, Iterator, List, Optional, Union
import typing

class TokenType:
    """Token type enumeration."""
    ...

class TokenSubtype:
    """Token subtype enumeration."""
    ...

class Token:
    """Represents a token in a formula."""
    
    def __init__(self, value: str, token_type: TokenType, subtype: TokenSubtype) -> None: ...
    def value(self) -> str: ...
    def token_type(self) -> TokenType: ...
    def subtype(self) -> TokenSubtype: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Tokenizer:
    """Tokenizer for Excel formulas."""
    
    def __init__(self, formula: str) -> None: ...
    def tokens(self) -> List[Token]: ...
    def render(self) -> str: ...
    def __iter__(self) -> Iterator[Token]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Token: ...
    def __repr__(self) -> str: ...

class TokenizerError(Exception):
    """Exception raised during tokenization."""
    
    def __init__(self, message: str, position: Optional[int] = None) -> None: ...
    @property
    def message(self) -> str: ...
    @property
    def position(self) -> Optional[int]: ...

class ParserError(Exception):
    """Exception raised during parsing."""
    
    def __init__(self, message: str, position: Optional[int] = None) -> None: ...
    @property
    def message(self) -> str: ...
    @property
    def position(self) -> Optional[int]: ...

class ReferenceLike:
    """Base class for reference-like objects."""
    ...

class CellReference(ReferenceLike):
    """Represents a cell reference."""
    
    def sheet(self) -> Optional[str]: ...
    def column(self) -> str: ...
    def row(self) -> int: ...
    def absolute_column(self) -> bool: ...
    def absolute_row(self) -> bool: ...
    def normalise(self) -> str: ...
    def to_excel(self) -> str: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class RangeReference(ReferenceLike):
    """Represents a range reference."""
    
    def sheet(self) -> Optional[str]: ...
    def start_column(self) -> str: ...
    def start_row(self) -> int: ...
    def end_column(self) -> str: ...
    def end_row(self) -> int: ...
    def absolute_start_column(self) -> bool: ...
    def absolute_start_row(self) -> bool: ...
    def absolute_end_column(self) -> bool: ...
    def absolute_end_row(self) -> bool: ...
    def normalise(self) -> str: ...
    def to_excel(self) -> str: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class ColumnReference(ReferenceLike):
    """Represents a column reference."""
    
    def sheet(self) -> Optional[str]: ...
    def start_column(self) -> str: ...
    def end_column(self) -> str: ...
    def absolute_start_column(self) -> bool: ...
    def absolute_end_column(self) -> bool: ...
    def normalise(self) -> str: ...
    def to_excel(self) -> str: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class RowReference(ReferenceLike):
    """Represents a row reference."""
    
    def sheet(self) -> Optional[str]: ...
    def start_row(self) -> int: ...
    def end_row(self) -> int: ...
    def absolute_start_row(self) -> bool: ...
    def absolute_end_row(self) -> bool: ...
    def normalise(self) -> str: ...
    def to_excel(self) -> str: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class ASTNode:
    """Represents a node in the Abstract Syntax Tree."""
    
    def pretty(self) -> str: ...
    def to_formula(self) -> str: ...
    def fingerprint(self) -> int: ...
    def children(self) -> List[ASTNode]: ...
    def walk_refs(self) -> Iterator[Reference]: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def node_type(self) -> str: ...
    def get_literal_value(self) -> Any: ...
    def get_reference_string(self) -> Optional[str]: ...
    def get_reference(self) -> Optional[ReferenceLike]: ...
    def get_operator(self) -> Optional[str]: ...
    def get_function_name(self) -> Optional[str]: ...
    def get_source_token(self) -> Optional[Token]: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Reference:
    """Represents a reference in an AST."""
    
    def normalise(self) -> str: ...
    def to_excel(self) -> str: ...
    def original(self) -> str: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Parser:
    """Parser for Excel formulas."""
    
    def __init__(self) -> None: ...
    def parse_string(self, formula: str, include_whitespace: Optional[bool] = None) -> ASTNode: ...
    def parse_tokens(self, tokenizer: Tokenizer, include_whitespace: Optional[bool] = None) -> ASTNode: ...

def tokenize(formula: str) -> Tokenizer:
    """Convenience function to tokenize a formula string."""
    ...

def parse(formula: str, include_whitespace: bool = False) -> ASTNode:
    """Convenience function to parse a formula string."""
    ...

def parse_formula(formula: str, include_whitespace: bool = False) -> ASTNode:
    """Parse a formula string into an AST."""
    ...
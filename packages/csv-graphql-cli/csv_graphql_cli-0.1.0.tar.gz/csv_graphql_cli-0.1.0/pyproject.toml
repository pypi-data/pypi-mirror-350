[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "csv-graphql-cli"
authors = [
    {name = "Cory Janowski", email = "cory@example.com"},
]
maintainers = [
    {name = "Cory Janowski", email = "cory@example.com"},
]
description = "🍓 A beautiful CLI tool for ingesting CSV files into PostgreSQL and serving data via GraphQL"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Operating System :: OS Independent",
]
keywords = ["csv", "postgresql", "graphql", "cli", "data", "ingestion", "strawberry", "fastapi", "database", "api", "etl", "pandas"]
version = "0.1.0"

dependencies = [
    "click>=8.1.7",
    "pandas>=2.1.4",
    "sqlalchemy>=2.0.23",
    "psycopg2-binary>=2.9.9",
    "strawberry-graphql>=0.216.1",
    "uvicorn>=0.24.0",
    "fastapi>=0.104.1",
    "python-dotenv>=1.0.0",
    "alembic>=1.13.1",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]
lint = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]
all = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.urls]
Homepage = "https://github.com/cjanowski/graphql-ingest"
Documentation = "https://github.com/cjanowski/graphql-ingest#readme"
Repository = "https://github.com/cjanowski/graphql-ingest"
"Bug Tracker" = "https://github.com/cjanowski/graphql-ingest/issues"
Changelog = "https://github.com/cjanowski/graphql-ingest/releases"

[project.scripts]
# Primary CLI commands - using the CLI module
csvgql = "src.cli:cli"
csv-graphql = "src.cli:cli"

# Individual command shortcuts - these don't exist as separate entry points
# Users should use: csvgql command-name or python -m src.cli command-name

# Tool configurations
[tool.setuptools_scm]
write_to = "_version.py"
fallback_version = "0.1.0"

[tool.setuptools]
# Updated to find packages in src directory
packages = {find = {where = ["src"]}}
py-modules = []
include-package-data = true

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.csv", "*.example", "LICENSE"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "build", "dist", ".venv", "venv"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_default_fixture_loop_scope = "function"


# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "tools/setup.py",
    "_version.py",
    ".venv/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 
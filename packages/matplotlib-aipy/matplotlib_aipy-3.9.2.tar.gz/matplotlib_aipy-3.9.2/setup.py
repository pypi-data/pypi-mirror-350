#!/usr/bin/env python

# ...

from distutils.core import setup
import shutil,os

root = __file__[:__file__.rfind('/')]
lib = os.environ['HOME']+'/lib'

sos = ['libfreetype.so', 'libbrotlidec.so', 'libbrotlicommon.so']

current_directory = os.path.dirname(os.path.abspath(__file__))
readme_path = os.path.join(current_directory, 'README.md')
try:
    with open(readme_path, 'r', encoding='utf-8') as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = """Matplotlib strives to produce publication quality 2D graphics
for interactive graphing, scientific publishing, user interface development and web application servers targeting multiple user interfaces and hardcopy output formats. There is a 'pylab' mode which emulates matlab graphics.
"""


setup(name='matplotlib-aipy',
      version='3.9.2',
      description='Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.',
      author='The QPYPI Team',
      author_email='qpypi@qpython.org',
      url='https://qpypi.qpython.org/project/matplotlib-aipy/',
      data_files=[(lib, sos)],
      py_modules=['pylab'],
      packages=["matplotlib","mpl_toolkits"],
      package_data={
            "mpl_toolkits":[
"axes_grid1/*",
"axes_grid1/tests/*",
"axisartist/*",
"axisartist/tests/*",
"mplot3d/*",
"mplot3d/tests/*"
],

            "matplotlib": [
"__init__.py",
"__init__.pyi",
"_afm.py",
"_animation_data.py",
"_api/*",
"_blocking_input.py",
"_c_internal_utils.cpython-312.so",
"_c_internal_utils.pyi",
"_cm.py",
"_cm_listed.py",
"_color_data.py",
"_color_data.pyi",
"_constrained_layout.py",
"_docstring.py",
"_docstring.pyi",
"_enums.py",
"_enums.pyi",
"_fontconfig_pattern.py",
"_image.cpython-312.so",
"_image.pyi",
"_internal_utils.py",
"_layoutgrid.py",
"_mathtext.py",
"_mathtext_data.py",
"_path.cpython-312.so",
"_path.pyi",
"_pylab_helpers.py",
"_pylab_helpers.pyi",
"_qhull.cpython-312.so",
"_qhull.pyi",
"_text_helpers.py",
"_tight_bbox.py",
"_tight_layout.py",
"_tri.cpython-312.so",
"_tri.pyi",
"_ttconv.cpython-312.so",
"_ttconv.pyi",
"_type1font.py",
"_version.py",
"animation.py",
"animation.pyi",
"artist.py",
"artist.pyi",
"axes/*",
"axis.py",
"axis.pyi",
"backend_bases.py",
"backend_bases.pyi",
"backend_managers.py",
"backend_managers.pyi",
"backend_tools.py",
"backend_tools.pyi",
"backends/*",
"backends/qt_editor/*",
"backends/web_backend/*",
"backends/web_backend/css/*",
"backends/web_backend/js/*",
"bezier.py",
"bezier.pyi",
"category.py",
"cbook.py",
"cbook.pyi",
"cm.py",
"cm.pyi",
"collections.py",
"collections.pyi",
"colorbar.py",
"colorbar.pyi",
"colors.py",
"colors.pyi",
"container.py",
"container.pyi",
"contour.py",
"contour.pyi",
"dates.py",
"dviread.py",
"dviread.pyi",
"figure.py",
"figure.pyi",
"font_manager.py",
"font_manager.pyi",
"ft2font.cpython-312.so",
"ft2font.pyi",
"gridspec.py",
"gridspec.pyi",
"hatch.py",
"hatch.pyi",
"image.py",
"image.pyi",
"layout_engine.py",
"layout_engine.pyi",
"legend.py",
"legend.pyi",
"legend_handler.py",
"legend_handler.pyi",
"lines.py",
"lines.pyi",
"markers.py",
"markers.pyi",
"mathtext.py",
"mathtext.pyi",
"mlab.py",
"mlab.pyi",
"mpl-data/*",
"mpl-data/fonts/afm/*",
"mpl-data/fonts/pdfcorefonts/*",
"mpl-data/fonts/ttf/*",
"mpl-data/images/*",
"mpl-data/plot_directive/*",
"mpl-data/sample_data/*",
"mpl-data/sample_data/axes_grid/*",
"mpl-data/stylelib/*",
"offsetbox.py",
"offsetbox.pyi",
"patches.py",
"patches.pyi",
"path.py",
"path.pyi",
"patheffects.py",
"patheffects.pyi",
"projections/*",
"py.typed",
"pylab.py",
"pyplot.py",
"quiver.py",
"quiver.pyi",
"rcsetup.py",
"rcsetup.pyi",
"sankey.py",
"sankey.pyi",
"scale.py",
"scale.pyi",
"sphinxext/*",
"spines.py",
"spines.pyi",
"stackplot.py",
"stackplot.pyi",
"streamplot.py",
"streamplot.pyi",
"style/*",
"table.py",
"table.pyi",
"testing/*",
"testing/jpl_units/*",
"tests/*",
"texmanager.py",
"texmanager.pyi",
"text.py",
"text.pyi",
"textpath.py",
"textpath.pyi",
"ticker.py",
"ticker.pyi",
"transforms.py",
"transforms.pyi",
"tri/*",
"typing.py",
"units.py",
"widgets.py",
"widgets.pyi"
            ]
      },
      
      long_description=long_description,
      long_description_content_type="text/markdown",
      classifiers=[
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: Android",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
],
      license="OSI Approved :: Python Software Foundation License",
      install_requires=["kiwisolver-qpython", "numpy-aipy", "pillow-qpython", "pyparsing", "backports.functools_lru_cache", "cycler", "python-dateutil"],
     )

for item in sos:
    try:
        shutil.copy(root+'/'+item, lib)
    except:
        pass


#! Generated by VisualDCT v2.5
#! DBDSTART
#! DBD("../../dbd/dlsPLC_vdct.dbd")
#! DBDEND

# % macro, __doc__, Template allowing overrideRequestIndividual instances to be created
# % macro, P, device prefix. This must match a dlsPLC_read100.template device macro
# % macro, Q, device suffix
# % macro, outaddr, Output address. Input address is $(outaddr)+1. E.g. if outaddr=80, read DM81 and write DM80.
# % macro, port, Asyn port for doing serial comms
record(bo, "$(P)$(Q):TIMER") {
  field(DESC, "Timer for override message")
  field(SCAN, "5 second")
  field(DTYP, "Soft Channel")
  field(FLNK, "$(P)$(Q):OUTPUT")
  field(VAL, "1")
}

record(subArray, "$(P)$(Q):GETINTERLOCKS") {
  field(DESC, "Get status")
  field(DTYP, "Soft Channel")
  field(FLNK, "$(P)$(Q):INTERLOCKS")
  field(FTVL, "USHORT")
  field(MALM, "100")
}

# INTERLOCKS read is in DM$(outaddr)+1. Calc the index into the 
# century record
record(calcout, "$(P)$(Q):INTERLOCKSINDX") {
  field(CALC, "$(outaddr)%100+1")
  field(OUT, "$(P)$(Q):GETINTERLOCKS.INDX PP")
  field(PINI, "YES")
}

# INTERLOCKS is in DM$(addr)+3. Calc the inp link to the 
# century record. Needs to be done after PINI, so note
# the flnk
record(scalcout, "$(P)$(Q):INTERLOCKSINP") {
  field(CALC, "PRINTF(AA,FLOOR($(outaddr)/100))")
  field(AA, "$(P):DM%dXX CP MS")
  field(OUT, "$(P)$(Q):GETINTERLOCKS.INP CA")
  field(FLNK, "$(P)$(Q):INTERLOCKSINPDIS")
  field(SCAN, "1 second")
}

# Disable the scalcout record so we don't keep writing values
record(ao, "$(P)$(Q):INTERLOCKSINPDIS") {
  field(VAL, "1")
  field(OUT, "$(P)$(Q):INTERLOCKSINP.DISA")
}

record(mbbiDirect, "$(P)$(Q):INTERLOCKS") {
  field(DTYP, "Raw Soft Channel")
  field(INP, "$(P)$(Q):GETINTERLOCKS.VAL")
}

# Takes 8 inputs (all already turned into bits)
# and adds them to create overall output.
# All unused values are 0 by default.
# +0.5 used to stop rounding problem.
record(mbboDirect, "$(P)$(Q):OUTPUT") {
  field(DESC, "Calc output bits required")
  field(OUT, "$(P)$(Q):WRITEINTERLOCKS PP")
}
  
record(longout, "$(P)$(Q):WRITEINTERLOCKS") {
  field(PRIO, "HIGH")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(port), $(outaddr), $(timeout=0)) FINS_DM_WRITE")  
}

#! Further lines contain data used by VisualDCT
#! View(2136,723,1.1)
#! Record("$(P)$(Q):TIMER",2180,754,0,1,"$(P)$(Q):TIMER")
#! Field("$(P)$(Q):TIMER.FLNK",16777215,1,"$(P)$(Q):TIMER.FLNK")
#! Link("$(P)$(Q):TIMER.FLNK","$(P)$(Q):OUTPUT")
#! Record("$(P)$(Q):SUBARR",2180,1000,0,1,"$(P)$(Q):SUBARR")
#! Field("$(P)$(Q):SUBARR.INP",16777215,1,"$(P)$(Q):SUBARR.INP")
#! Field("$(P)$(Q):SUBARR.FLNK",16777215,1,"$(P)$(Q):SUBARR.FLNK")
#! Link("$(P)$(Q):SUBARR.FLNK","$(P)$(Q):INTERLOCKS")
#! Field("$(P)$(Q):SUBARR.VAL",16777215,1,"$(P)$(Q):SUBARR.VAL")
#! Record("$(P)$(Q):INTERLOCKS",2440,1096,0,0,"$(P)$(Q):INTERLOCKS")
#! Field("$(P)$(Q):INTERLOCKS.INP",16777215,0,"$(P)$(Q):INTERLOCKS.INP")
#! Link("$(P)$(Q):INTERLOCKS.INP","$(P)$(Q):SUBARR.VAL")
#! Record("$(P)$(Q):OUTPUT",2440,774,0,0,"$(P)$(Q):OUTPUT")
#! Box(Box2,2160,940,2620,1220,0,16777215,null)
#! Box(Box1,2160,700,2620,920,0,16777215,null)
#! TextBox(TB2,2180,960,2540,1020,0,"Dialog",24,1,16777215,"Readback",null)
#! TextBox(TB1,2180,720,2480,760,0,"Dialog",24,1,16777215,"Output",null)

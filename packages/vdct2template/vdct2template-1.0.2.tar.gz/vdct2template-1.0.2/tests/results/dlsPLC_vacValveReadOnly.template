# vacuumValveReadOnly_asyn.template
#
#% macro, __doc__, Template for read only vacuum valves - manual valves with limit switches read back by valve controller PLC so their state is known, but control is not available.  
#
# They have a slightly different state set to the valves in a normal template.
#
# Substitutions:
#% macro, device, device name of the valve.
#% macro, vlvcc, device name of valve control crate
#% macro, addr, First address in the DM variable range decade. E.g. if valve is in DM110..118 then addr=110
#% macro, sta_label0, Label string for status value 0 (Optional - defaults to Fault)
#% macro, sta_label1, Label string for status value 1 (Optional - defaults to Open)
#% macro, sta_label2, Label string for status value 2 (Optional - defaults to Partial)
#% macro, sta_label3, Label string for status value 3 (Optional - defaults to Closed)
#% macro, sta_label4, Label string for status value 4 (Optional - defaults to "")
#% macro, sta_label5, Label string for status value 5 (Optional - defaults to "")
#% macro, sta_label6, Label string for status value 6 (Optional - defaults to "")
#% macro, name, Object name and associated gui name
# This associates an edm screen with the template
# % gui, $(name=), edm, vacuumValveReadOnly.edl, device=$(device)
#

# This associates BOY screens with the template
# % gui, $(name=), boydetail, dlsPLCApp_opi/vacValveReadOnly_detail.opi, device=$(device), DESC=$(device), name=$(name=), valvetype=$(valvetype=manualValve)
# % gui, $(name=), boyembed, dlsPLCApp_opi/vacValveReadOnly_embed_box.opi, device=$(device), DESC=$(device), name=$(name=), valvetype=$(valvetype=manualValve)
# % gui, $(name=), boyembed, dlsPLCApp_opi/vacValveReadOnly_embed.opi, device=$(device), DESC=$(device), name=$(name=), valvetype=$(valvetype=manualValve)
#
# These define what PVs a valve detail screen should contain
# % gui, $(name=), readback, Status,  $(device):STA
#


# #########################################################################
# Valve Status
# 
# % archiver 10 Monitor
# % controldesk Status smon
record(mbbi, "$(device):STA") {
  field(DESC, "Status")
  field(DTYP, "Soft Channel")
  field(ZRST, "$(sta_label0=Fault)")
  field(ONST, "$(sta_label1=Open)")
  field(TWST, "$(sta_label2=Partial)")
  field(THST, "$(sta_label3=Closed)")
  field(FRST, "$(sta_label4=)")
  field(FVST, "$(sta_label5=)")
  field(SXST, "$(sta_label6=)")
  field(ZRSV, "MAJOR")
  field(ONSV, "NO_ALARM")
  field(TWSV, "NO_ALARM")
  field(THSV, "NO_ALARM")
  field(FRSV, "NO_ALARM")
  field(FVSV, "NO_ALARM")
  field(SXSV, "NO_ALARM")
  field(INP, "$(device):GETSTA MS")
}

record(subArray, "$(device):GETSTA") {
  field(DESC, "Get status")
  field(DTYP, "Soft Channel")
  field(FLNK, "$(device):STA")
  field(FTVL, "USHORT")
  field(MALM, "100")
}

# STA is in DM$(addr)+3. Calc the index into the 
# century record
record(calcout, "$(device):STAINDX") {
  field(CALC, "$(addr)%100+3")
  field(OUT, "$(device):GETSTA.INDX PP")
  field(PINI, "YES")
}

# STA is in DM$(addr)+3. Calc the inp link to the 
# century record. Needs to be done after PINI, so note
# the flnk
record(scalcout, "$(device):STAINP") {
  field(CALC, "PRINTF(AA,FLOOR($(addr)/100))")
  field(AA, "$(vlvcc):DM%dXX CP MS")
  field(OUT, "$(device):GETSTA.INP CA")
  field(FLNK, "$(device):STAINPDIS")
  field(SCAN, "1 second")
}

# Disable the scalcout record so we don't keep writing values
record(ao, "$(device):STAINPDIS") {
  field(VAL, "1")
  field(OUT, "$(device):STAINP.DISA")
}

# NX102_temperature.vdb is expanded to NX102_temperature.template by flatdb.
#
#% macro, __doc__, Template database for an individual temperature on an Omron NX102 PLC.
#
#% macro, device, PV prefix
#% macro, temp, PV suffix
#% macro, desc, Description
#% macro, port, port name of ether_ip driver
#% macro, tagidx, Tag index for PLC
#% macro, lolo, Lolo alarm limit
#% macro, low, Low alarm limit
#% macro, high, High alarm limit
#% macro, hihi, Hihi alarm limit
#% macro, hopr, High operating range
#% macro, lopr, Low operating range
#
#% macro, tag,          Optional.  Tag name on PLC     Defaults to "Temp" for e.g. Temp.Value[tagindex] E
#% macro, llsv,         Optional.  Lolo severity.      Defaults to NO_ALARM
#% macro, lsv,          Optional.  Low severity.       Defaults to NO_ALARM
#% macro, hyst,         Optional.  Alarm deadband.     Defaults to 0
#% macro, adel,         Optional.  Archiver deadband.  Defaults to 0.2
#% macro, scalefac,     Optional.  Scale factor for temperature/setpoint (1 for new PLC templates, 10 for old where PLC reports in 10ths of a degree).  Defaults to 1.
#% macro, tempcal,      Optional.  Temperature calibration offset in egu. Defaults to 0
#% macro, prec,         Optional.  Precision for reporting value back.    Defaults to 1
#% macro, disable_pv,   Optional.  If set, then this is the value of A in disable_calc.  Defaults to $(device)$(temp):ZERO
#% macro, disable_calc, Optional.  If this condition is met then save the current limit and set the limit to 3276.7, disabling the interlock for this PV.  Defaults to A=1
#% macro, egu,          Optional.  Engineering units for temperature.     Defaults to C
#% macro, name,         Optional.  Object and gui association name.       Defaults to be empty.
#
# This associates an edm screen with the template
# % gui, $(name=), edm, temperature-config.edl, temp=$(device)$(temp)
# % gui, $(name=), edmembed, temperature-embed.edl, temp=$(device)$(temp),label=$(desc)
# This associates a BOY screen with the template
# % gui, $(name=), boydetail, dlsPLCApp_opi/temperature_detail.opi, device=$(device),temp=$(temp),desc=$(desc)
# % gui, $(name=), boyembed, dlsPLCApp_opi/temperature_embed_box.opi, device=$(device),temp=$(temp),desc=$(desc)
# % gui, $(name=), boyembed, dlsPLCApp_opi/temperature_embed.opi, device=$(device),temp=$(temp),desc=$(desc)
# These define what PVs a flow detail screen should contain
# % gui, $(name=), readback, Current Temp,   $(device)$(temp)
# % gui, $(name=), demand, Error Level,   $(device)$(temp):HIHI
# % gui, $(name=), readback, Error Level RBV,   $(device)$(temp):GETCALC
# % gui, $(name=), demand, Warning Level,   $(device)$(temp).HIGH
#
# Hihi limit now in a separate record so that limits can be enforced
#% archiver 10 monitor
#% autosave 1 VAL
record(ao, "$(device)$(temp):HIHI") {
  field(DESC, "Hihi Limit")
  field(DRVH, "32768")
  field(DRVL, "-273.15")
  field(VAL, "$(hihi)")
  field(FLNK, "$(device)$(temp):SETLIMIT")
  field(PREC, "$(prec=1)")
  field(EGU, "$(egu=C)")
}

# High limit now in a separate record so that its value can be autosaved and archived
#% archiver 10 monitor
#% autosave 1 VAL
record(ai, "$(device)$(temp):HIGH") {
  field(DESC, "High Limit")
  field(INP, "$(device)$(temp).HIGH CP")
  field(EGU, "$(egu=C)")
  field(VAL, "$(high)")
}

# This record runs once when the IOC starts to
# write the value of :HIGH restored by autosave
# to the .HIGH field of the temperature record
record(calcout, "$(device)$(temp):HIGH_INIT") {
  field(DESC, "Write value to HIGH field")
  field(INPA, "$(device)$(temp):HIGH PP")
  field(CALC, "A")
  field(OUT, "$(device)$(temp).HIGH PP")
  field(PINI, "YES")
}

record(ai, "$(device)$(temp):ZERO") {
  field(DESC, "Default limit disabled pv")
  field(PINI, "YES")
  field(VAL, "0")
}

#% archiver 10 monitor
record(calcout, "$(device)$(temp):DISABLED") {
  field(DESC, "Is limit interlock disabled")
  field(INPA, "$(disable_pv=$(device)$(temp):ZERO) CP")
  field(INPB, "$(device)$(temp):DISABLED")
  field(CALC, "$(disable_calc=A=1)")
  field(OOPT, "On Change")
  field(OCAL, "B+1")
  field(DOPT, "Use OCAL")
  field(OUT, "$(device)$(temp):SEQ.SELN PP")
}

record(seq, "$(device)$(temp):SEQ") {
  field(SELM, "Specified")
  field(LNK1, "$(device)$(temp):SAVELIMIT.PROC PP")
  field(LNK2, "$(device)$(temp):RESTORELIMIT.PROC PP")
}

#% archiver 10 monitor
record(ai, "$(device)$(temp):SAVELIMIT") {
  field(DESC, "Saved interlock limit")
  field(VAL, "$(hihi)")
  field(INP, "$(device)$(temp):HIHI")
  field(FLNK, "$(device)$(temp):SETOVER")
}

record(ao, "$(device)$(temp):SETOVER") {
  field(VAL, "3276.7")
  field(OUT, "$(device)$(temp):HIHI PP")
  field(FLNK, "$(device)$(temp):SETHSV")
}

record(stringout, "$(device)$(temp):SETHSV") {
  field(VAL, "NO_ALARM")
  field(OUT, "$(device)$(temp).HSV PP")
}

record(calcout, "$(device)$(temp):RESTORELIMIT") {
  field(DESC, "Restore saved limit")
  field(INPA, "$(device)$(temp):SAVELIMIT")
  field(CALC, "A")
  field(OUT, "$(device)$(temp):HIHI PP")
  field(FLNK, "$(device)$(temp):RESTOREHSV")
}

record(stringout, "$(device)$(temp):RESTOREHSV") {
  field(VAL, "MINOR")
  field(OUT, "$(device)$(temp).HSV PP")
}

# Set limit on PLC.
# Note value needs to be an unsigned short,
# since we are using double and is converted to an int,
# we cheat by offsetting the value to allow it to be sent.
record(calcout, "$(device)$(temp):SETLIMIT") {
  field(SCAN, "1 second")
  field(DESC, "Set limit")
  field(FLNK, "$(device)$(temp):FAN")
  field(CALC, "A")
  field(OUT, "$(device)$(temp):SETLIMITOUT PP")
  field(PINI, "YES")
  field(INPA, "$(device)$(temp):HIHI")
  field(PREC, "$(prec=1)")
}

record(ao, "$(device)$(temp):SETLIMITOUT") {
  field(DESC, "Set limit")
  field(DTYP, "EtherIP")
  field(SCAN, "Passive")
  field(OUT, "@$(port) $(tag=Temp).HiHiLimit[$(tagidx)] E")
}

record(dfanout, "$(device)$(temp):FAN") {
  field(DESC, "Set record limits")
  field(OUTA, "$(device)$(temp).HIHI")
  field(OUTB, "$(device)$(temp):GETCALC.HIGH")
  field(OUTC, "$(device)$(temp):GETCALC.LOW")
  field(DOL, "$(device)$(temp):SETLIMIT.A")
  field(OMSL, "closed_loop")
}

record(ai, "$(device)$(temp):GETTEMP") {
  field(DESC, "Get temperature")
  field(DTYP, "EtherIP")
  field(SCAN, "1 second")
  field(INP, "@$(port) $(tag=Temp).Value[$(tagidx)] E")
  field(FLNK, "$(device)$(temp)")
}

record(bo, "$(device)$(temp):STRING_ENABLED") {
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

record(stringin, "$(device)$(temp):DESC") {
  field(DESC, "Description of temperature")
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "EtherIP")
  field(INP, "@$(port) $(tag=Temp).Interface_Desc0[$(tagidx)] S 0 E")
  field(SDIS, "$(device)$(temp):STRING_ENABLED")
  field(DISV, "0")
  field(FLNK, "$(device)$(temp):DESC:FAN")
  field(SIOL, "@")
}

record(sseq, "$(device)$(temp):DESC:FAN") {
  field(DOL1, "$(device)$(temp):DESC")
  field(LNK1, "$(device)$(temp).DESC")
}

# % archiver 10 Monitor
#% alh
#% alh $SEVRCOMMAND UP_ANY dls-alh-handler.py $(device)$(temp)
# This makes the component icon reflect the status and severity
# % gui, $(name=), sevr
record(calcout, "$(device)$(temp)") {
  field(DTYP, "Soft Channel")
  field(CALC, "(A/$(scalefac=1))+$(tempcal=0)")
  field(INPA, "$(device)$(temp):GETTEMP.VAL MS")
  field(HSV, "MINOR")
  field(HOPR, "$(hopr)")
  field(LOPR, "$(lopr)")
  field(HHSV, "MAJOR")
  field(LSV, "$(lsv=NO_ALARM)")
  field(LOW, "$(low)")
  field(LLSV, "$(llsv=NO_ALARM)")
  field(LOLO, "$(lolo)")
  field(EGU, "$(egu=C)")
  field(PREC, "$(prec=1)")
  field(ADEL, "$(adel=0.2)")
  field(HYST, "$(hyst=0)")
}

record(ai, "$(device)$(temp):GETLIMIT") {
  field(DESC, "Get temperature limit")
  field(DTYP, "EtherIP")
  field(SCAN, "1 second")
  field(INP, "@$(port) $(tag=Temp).HiHiLimit_RB[$(tagidx)] E")
  field(FLNK, "$(device)$(temp):GETLIMIT:FAN")
}

record(calcout, "$(device)$(temp):GETCALC") {
  field(SCAN, "Passive")
  field(DESC, "Scale setpoint")
  field(DTYP, "Soft Channel")
  field(CALC, "(A/$(scalefac=1))+$(tempcal=0)")
  field(INPA, "$(device)$(temp):GETLIMIT.VAL")
  field(HSV, "INVALID")
  field(LSV, "INVALID")
  field(EGU, "$(egu=C)")
  field(PREC, "$(prec=1)")
}

# A flag that indicates whether the temperature has a calibration
# offset.  The value is set to 1 by the calibrationOverlay template.
record(bo, "$(device)$(temp):HASOFFSET") {
  field(VAL, "0")
}

record(fanout, "$(device)$(temp):GETLIMIT:FAN") {
  field(LNK1, "$(device)$(temp)")
  field(LNK2, "$(device)$(temp):GETCALC")
}

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "polaris-marl"
dynamic = ["version"]
description = "POLARIS: Partially Observable Learning with Active Reinforcement In Social Environments"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Ege Can Doğaroğlu", email = "ege.dogaroglu@example.com"}
]
maintainers = [
    {name = "Ege Can Doğaroğlu", email = "ege.dogaroglu@example.com"}
]
keywords = [
    "multi-agent",
    "reinforcement-learning", 
    "social-learning",
    "graph-neural-networks",
    "pytorch",
    "partially-observable",
    "game-theory"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Environment :: GPU :: NVIDIA CUDA",
    "Environment :: MacOS X",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.8.0",
    "numpy>=1.20.0",
    "matplotlib>=3.4.0",
    "networkx>=2.6.0",
    "scikit-learn>=1.0.0",
    "tqdm>=4.60.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "seaborn>=0.11.0",
]

[project.optional-dependencies]
gnn = [
    "torch-geometric>=2.0.0",
    "torch-scatter>=2.0.9",
    "torch-sparse>=0.6.13",
    "torch-cluster>=1.6.0",
    "torch-spline-conv>=1.2.1",
]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "isort>=5.9.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "sphinx-autodoc-typehints>=1.12.0",
]
all = [
    "torch-geometric>=2.0.0",
    "torch-scatter>=2.0.9",
    "torch-sparse>=0.6.13",
    "torch-cluster>=1.6.0",
    "torch-spline-conv>=1.2.1",
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "isort>=5.9.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "sphinx-autodoc-typehints>=1.12.0",
]

[project.urls]
Homepage = "https://github.com/ecdogaroglu/polaris"
Documentation = "https://github.com/ecdogaroglu/polaris#documentation"
Repository = "https://github.com/ecdogaroglu/polaris"
"Bug Tracker" = "https://github.com/ecdogaroglu/polaris/issues"

[project.scripts]
polaris-simulate = "polaris.simulation:main"
polaris-brandl = "experiments.brandl_experiment:main"
polaris-strategic = "experiments.keller_rady_experiment:main"
polaris-sweep = "experiments.keller_rady_sweep:main"
polaris-experiment = "experiments.run_experiment:main"

[tool.setuptools]
packages = {find = {}}

[tool.setuptools.dynamic]
version = {attr = "polaris.__version__"}

[tool.setuptools.package-data]
polaris = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["polaris"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "matplotlib.*",
    "networkx.*",
    "sklearn.*",
    "scipy.*",
    "pandas.*",
    "seaborn.*",
    "torch_geometric.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
]

# Coverage configuration
[tool.coverage.run]
source = ["polaris"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
] 
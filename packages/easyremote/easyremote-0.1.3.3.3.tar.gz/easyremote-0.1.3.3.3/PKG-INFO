Metadata-Version: 2.4
Name: easyremote
Version: 0.1.3.3.3
Summary: A lightweight framework for hassle-free remote computing resource sharing
Author: Silan Hu
Author-email: Silan Hu <silan.hu@u.nus.edu>
Maintainer-email: Silan Hu <silan.hu@u.nus.edu>
License: MIT
Project-URL: Homepage, https://github.com/Qingbolan/EasyRemote
Project-URL: Documentation, https://github.com/Qingbolan/EasyRemote/blob/main/README.md
Project-URL: Repository, https://github.com/Qingbolan/EasyRemote.git
Project-URL: Bug Tracker, https://github.com/Qingbolan/EasyRemote/issues
Project-URL: Changelog, https://github.com/Qingbolan/EasyRemote/releases
Project-URL: Source Code, https://github.com/Qingbolan/EasyRemote
Keywords: remote-computing,distributed-computing,gpu-sharing,cloud-computing,grpc,asyncio
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Distributed Computing
Classifier: Topic :: System :: Networking
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Operating System :: OS Independent
Classifier: Environment :: Web Environment
Classifier: Environment :: Console
Classifier: Framework :: AsyncIO
Classifier: Natural Language :: English
Classifier: Natural Language :: Chinese (Simplified)
Classifier: Typing :: Typed
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: NOTICE.md
Requires-Dist: grpcio<2.0.0,>=1.51.0
Requires-Dist: grpcio-tools<2.0.0,>=1.51.0
Requires-Dist: protobuf<6.0.0,>=4.21.0
Requires-Dist: uvicorn>=0.20.0
Requires-Dist: python-multipart>=0.0.19
Requires-Dist: rich>=13.0.0
Requires-Dist: pyfiglet>=0.8.0
Requires-Dist: GPUtil
Requires-Dist: psutil>=5.8.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.10.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=2.17.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Provides-Extra: docs
Requires-Dist: mkdocs>=1.4.0; extra == "docs"
Requires-Dist: mkdocs-material>=8.0.0; extra == "docs"
Requires-Dist: mkdocstrings>=0.19.0; extra == "docs"
Dynamic: author
Dynamic: license-file

# EasyRemote: Building the Next-Generation Computing Internet - EasyNet

<div align="center">

![EasyRemote Logo](docs/easyremote-logo.png)

[![PyPI version](https://badge.fury.io/py/easyremote.svg)](https://badge.fury.io/py/easyremote)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python Version](https://img.shields.io/pypi/pyversions/easyremote)]()

> **"Torchrun for the World"**: Enabling any terminal user to mobilize global computing resources with a single command to execute local code.

**üåê Building the Next-Generation Computing Internet - EasyNet**

English | [‰∏≠Êñá](README_ZH.md)

</div>

---

## üß† From Private Functions to Global Computing Orchestration Engine

**EasyRemote is not just a Private Function-as-a-Service (Private FaaS) platform‚Äîit's our answer to the future of computing:**

> While current cloud computing models are platform-centric, requiring data and code to "go to the cloud" to exchange resources, we believe‚Äî  
> **The next-generation computing network should be terminal-centric, language-interfaced, function-granular, and trust-bounded**.

We call it: **"EasyNet"**.

### üéØ Core Philosophy: Code as Resource, Device as Node, Execution as Collaboration

EasyRemote is the first-stage implementation of EasyNet, allowing you to:

* **üß† Define task logic using familiar Python function structures**
* **üîí Deploy computing nodes on any device while maintaining privacy, performance, and control**  
* **üåê Transform local functions into globally accessible task interfaces through lightweight VPS gateways**
* **üöÄ Eventually launch tasks as simply as using `torchrun`, automatically scheduling to the most suitable resources for execution**

### üí° Our Paradigm Shift

| Traditional Cloud Computing | **EasyNet Mode** |
|------------|-------------|
| Platform-centric | **Terminal-centric** |
| Code must go to cloud | **Code stays on your device** |
| Pay for computing power | **Contribute to earn computing power** |
| Vendor lock-in | **Decentralized collaboration** |
| Cold start delays | **Always warm** |

---

## üî≠ Current Implementation: Private Function-as-a-Service

### **Quick Experience: Join EasyNet with 12 Lines of Code**

```python
# 1. Start gateway node (any VPS)
from easyremote import Server
Server(port=8080).start()

# 2. Contribute computing node (your device)
from easyremote import ComputeNode
node = ComputeNode("your-gateway:8080")

@node.register
def ai_inference(prompt):
    return your_local_model.generate(prompt)  # Runs on your GPU

node.serve()

# 3. Global computing access (anywhere)
from easyremote import Client
result = Client("your-gateway:8080").execute("ai_inference", "Hello AI")
```

**üéâ Your device has joined EasyNet!**

### **üÜö Comparison with Traditional Cloud Services**

| Feature | AWS Lambda | Google Cloud | **EasyNet Node** |
|------|------------|--------------|----------------|
| **Computing Location** | Cloud servers | Cloud servers | **Your device** |
| **Data Privacy** | Upload to cloud | Upload to cloud | **Never leaves local** |
| **Computing Cost** | $200+/million calls | $200+/million calls | **$5 gateway fee** |
| **Hardware Limitations** | Cloud specs | Cloud specs | **Your GPU/CPU** |
| **Startup Latency** | 100-1000ms | 100-1000ms | **0ms (always online)** |

---

## üìö Complete Documentation Guide

### üåê Multilingual Documentation

#### üá∫üá∏ English Documentation
- **[üìñ English Documentation Center](docs/en/README.md)** - Complete English documentation navigation

#### üá®üá≥ Chinese Documentation
- **[üìñ ‰∏≠ÊñáÊñáÊ°£‰∏≠ÂøÉ](docs/zh/README.md)** - Complete Chinese documentation navigation

### üöÄ Quick Start
- **[5-Minute Quick Start](docs/en/user-guide/quick-start.md)** - Fastest way to get started | [‰∏≠Êñá](docs/zh/user-guide/quick-start.md)
- **[Installation Guide](docs/en/user-guide/installation.md)** - Detailed installation instructions | [‰∏≠Êñá](docs/zh/user-guide/installation.md)

### üìñ User Guide
- **[API Reference](docs/en/user-guide/api-reference.md)** - Complete API documentation | [‰∏≠Êñá](docs/zh/user-guide/api-reference.md)
- **[Basic Tutorial](docs/en/tutorials/basic-usage.md)** - Detailed basic tutorial | [‰∏≠Êñá](docs/zh/tutorials/basic-usage.md)
- **[Advanced Scenarios](docs/en/tutorials/advanced-scenarios.md)** - Complex application implementation | [‰∏≠Êñá](docs/zh/tutorials/advanced-scenarios.md)

### üèóÔ∏è Technical Deep Dive
- **[System Architecture](docs/en/architecture/overview.md)** - Overall architecture design | [‰∏≠Êñá](docs/zh/architecture/overview.md)
- **[Deployment Guide](docs/en/tutorials/deployment.md)** - Multi-environment deployment solutions | [‰∏≠Êñá](docs/zh/tutorials/deployment.md)

### üî¨ Research Materials
- **[Technical Whitepaper](docs/en/research/whitepaper.md)** - EasyNet theoretical foundation | [‰∏≠Êñá](docs/zh/research/whitepaper.md)
- **[Research Proposal](docs/en/research/research-proposal.md)** - Academic research plan | [‰∏≠Êñá](docs/zh/research/research-proposal.md)
- **[Project Pitch](docs/en/research/pitch.md)** - Business plan overview | [‰∏≠Êñá](docs/zh/research/pitch.md)

---

## üåü Three Major Breakthroughs of EasyNet

### **1. üîí Privacy-First Architecture**
```python
@node.register
def medical_diagnosis(scan_data):
    # Medical data never leaves your HIPAA-compliant device
    # But diagnostic services can be securely accessed globally
    return your_private_ai_model.diagnose(scan_data)
```

### **2. üí∞ Economic Model Reconstruction**
- **Traditional Cloud Services**: Pay-per-use, costs increase exponentially with scale
- **EasyNet Model**: Contribute computing power to earn credits, use credits to call others' computing power
- **Gateway Cost**: $5/month vs traditional cloud $200+/million calls

### **3. üöÄ Consumer Devices Participating in Global AI**
```python
# Your gaming PC can provide AI inference services globally
@node.register
def image_generation(prompt):
    return your_stable_diffusion.generate(prompt)

# Your MacBook can participate in distributed training
@node.register  
def gradient_computation(batch_data):
    return your_local_model.compute_gradients(batch_data)
```

---

## üéØ Three-Paradigm Evolution: Computing Revolution Through Paradigmatic Leaps

> **"Computing Evolution is not linear progression, but paradigmatic leaps"**

### **üöÄ Paradigm 1: FDCN (Function-Driven Compute Network)**
**Core Innovation**: From local calls ‚Üí cross-node function calls  
**Technical Expression**: `@remote` decorator for transparent distributed execution  
**Paradigm Analogy**: RPC ‚Üí gRPC ‚Üí **EasyRemote** (spatial decoupling of function calls)

```python
# Traditional local calls
def ai_inference(data): return model.predict(data)

# EasyRemote: Function calls across global networks
@node.register  
def ai_inference(data): return model.predict(data)
result = client.execute("global_node.ai_inference", data)
```

**Breakthrough Metrics**: 
- API Simplicity: 25+ lines ‚Üí **12 lines** (-52%)
- Startup Latency: 100-1000ms ‚Üí **0ms** (-100%)
- Privacy Protection: Data to cloud ‚Üí **Never leaves local**

### **üß© Paradigm 2: Intelligence-Linked Scheduling**
**Core Innovation**: From explicit scheduling ‚Üí adaptive intelligent scheduling  
**Technical Expression**: Intent-driven multi-objective optimization scheduling  
**Paradigm Analogy**: Kubernetes ‚Üí Ray ‚Üí **EasyRemote ComputePool**

```python
# Traditional explicit scheduling
client.execute("specific_node.specific_function", data)

# EasyRemote: Intelligent intent scheduling
result = await compute_pool.execute_optimized(
    task_intent="image_classification",
    requirements=TaskRequirements(accuracy=">95%", cost="<$5")
)
# System automatically: task analysis ‚Üí resource matching ‚Üí optimal scheduling
```

**Breakthrough Metrics**:
- Scheduling Efficiency: Manual config ‚Üí **Millisecond auto-decisions**
- Resource Utilization: 60% ‚Üí **85%** (+42%)
- Cognitive Load: Complex config ‚Üí **Intent expression**

### **üåü Paradigm 3: Intent-Graph Execution**
**Core Innovation**: From calling functions ‚Üí expressing intentions  
**Technical Expression**: Natural language-driven expert collaboration networks  
**Paradigm Analogy**: LangChain ‚Üí AutoGPT ‚Üí **EasyRemote Intent Engine**

```python
# Traditional function call mindset
await compute_pool.execute_optimized(function="train_classifier", ...)

# EasyRemote: Natural language intent expression
result = await easynet.fulfill_intent(
    "Train a medical imaging AI with >90% accuracy for under $10"
)
# System automatically: intent understanding ‚Üí task decomposition ‚Üí expert discovery ‚Üí collaborative execution
```

**Breakthrough Metrics**:
- User Barrier: Python developers ‚Üí **General users** (10M+ user scale)
- Interaction Mode: Code calls ‚Üí **Natural language**
- Collaboration Depth: Tool calls ‚Üí **Intelligent agent networks**

### **üîÑ Paradigm Spiral: Vertical Evolution Roadmap**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                 Global Compute OS                          ‚îÇ ‚Üê Paradigm 3: Intent Layer
‚îÇ    "Train medical AI" ‚Üí Auto-coordinate global experts     ‚îÇ   (Intent-Graph)
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                            ‚ñ≤
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ              Compute Sharing Platform                       ‚îÇ ‚Üê Paradigm 2: Autonomous Layer  
‚îÇ    Intelligent scheduling + Multi-objective optimization    ‚îÇ   (Intelligence-Linked)
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                            ‚ñ≤
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ               Private Function Network                      ‚îÇ ‚Üê Paradigm 1: Function Layer
‚îÇ    @remote decorator + Cross-node calls + Load balancing   ‚îÇ   (Function-Driven)  
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

**Ultimate Vision**: Mobilize global computing as easily as using `torchrun`
```bash
$ easynet "Train a medical imaging AI with my local data, 95%+ accuracy required"
ü§ñ Understanding your needs, coordinating global medical AI expert nodes...
‚úÖ Found stanford-medical-ai and 3 other expert nodes, starting collaborative training...
```

---

## üî¨ Technical Architecture: Decentralization + Edge Computing

### **Network Topology**
```
üåç Global clients
    ‚Üì
‚òÅÔ∏è Lightweight gateway cluster (routing only, no computing)
    ‚Üì
üíª Personal computing nodes (actual execution)
    ‚Üì
üîó Peer-to-peer collaboration network
```

### **Core Technology Stack**
- **Communication Protocol**: gRPC + Protocol Buffers
- **Secure Transport**: End-to-end encryption
- **Load Balancing**: Intelligent resource awareness
- **Fault Tolerance**: Automatic retry and recovery

---

## üåä Join the Computing Revolution

### **üî• Why EasyNet Will Change Everything**

**Limitations of Traditional Models**:
- üí∏ Cloud service costs grow exponentially with scale
- üîí Data must be uploaded to third-party servers
- ‚ö° Cold starts and network latency limit performance
- üè¢ Locked into major cloud service providers

**EasyNet's Breakthroughs**:
- üí∞ **Computing Sharing Economy**: Contribute idle resources, gain global computing power
- üîê **Privacy by Design**: Data never leaves your device
- üöÄ **Edge-First**: Zero latency, optimal performance
- üåê **Decentralized**: No single points of failure, no vendor lock-in

### **üéØ Our Mission**

> **Redefining the future of computing**: From a few cloud providers monopolizing computing power to every device being part of the computing network.

### **üöÄ Join Now**

```bash
# Become an early node in EasyNet
pip install easyremote

# Contribute your computing power
python -c "
from easyremote import ComputeNode
node = ComputeNode('demo.easynet.io:8080')
@node.register
def hello_world(): return 'Hello from my device!'
node.serve()
"
```

---

## üèóÔ∏è Developer Ecosystem

| Role | Contribution | Benefits |
|------|-------------|----------|
| **Computing Providers** | Idle GPU/CPU time | Computing credits/token rewards |
| **Application Developers** | Innovative algorithms and applications | Global computing resource access |
| **Gateway Operators** | Network infrastructure | Routing fee sharing |
| **Ecosystem Builders** | Tools and documentation | Community governance rights |

---

## üìû Join the Community

* **üéØ Technical Discussions**: [GitHub Issues](https://github.com/Qingbolan/EasyCompute/issues)
* **üí¨ Community Chat**: [GitHub Discussions](https://github.com/Qingbolan/EasyCompute/discussions)
* **üìß Business Collaboration**: [silan.hu@u.nus.edu](mailto:silan.hu@u.nus.edu)
* **üë®‚Äçüíª Project Founder**: [Silan Hu](https://github.com/Qingbolan) - NUS PhD Candidate

---

<div align="center">

## üåü "The future of software isn't deployed on the cloud, but runs on your system + EasyNet"

**üöÄ Ready to join the computing revolution?**

```bash
pip install easyremote
```

**Don't just see it as a distributed function tool ‚Äî it's a prototype running on old-world tracks but heading towards a new-world destination.**

*‚≠ê If you believe in this new worldview, please give us a star!*

</div> 

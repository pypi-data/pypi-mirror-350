"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['stripe_openapi_url', 'stripe_spec', 'stripe_api_url', 'eps', 'stripe_endpoints', 'StripeApi']

# %% ../nbs/00_core.ipynb 2
from collections import defaultdict
from fastcore.all import *
from inspect import Parameter, Signature

import httpx, re

# %% ../nbs/00_core.ipynb 4
stripe_openapi_url = 'https://raw.githubusercontent.com/stripe/openapi/refs/heads/master/openapi/spec3.json'
stripe_spec = httpx.get(stripe_openapi_url).json()

# %% ../nbs/00_core.ipynb 9
stripe_api_url = 'https://api.stripe.com'

# %% ../nbs/00_core.ipynb 16
def stripe_endpoints(spec: dict):
    'Extracts all the endpoints and their parameters from the Stripe OpenAPI spec.'
    endpoints = []
    for path, methods in spec['paths'].items():
        for verb, details in methods.items():
            op_id = details.get('operationId', '')
            summary = details.get('summary', '')
            query_params = [dict(name=p['name'], description=p.get('description', ''))
                            for p in details.get('parameters', []) if p.get('in') == 'query']
            body_params = []
            if 'requestBody' in details:
                schema = nested_idx(details, 'requestBody', 'content', 'application/x-www-form-urlencoded', 'schema', 'properties') or {}
                body_params = [dict(name=k, description=v.get('description', '')) for k,v in schema.items()]
            all_params = query_params + body_params
            endpoints.append(dict(path=path, verb=verb, op_id=op_id, summary=summary, params=all_params))
    return endpoints


# %% ../nbs/00_core.ipynb 17
eps = stripe_endpoints(stripe_spec)

# %% ../nbs/00_core.ipynb 20
def _flatten_data(data, prefix=''):
    'Flatten a dictionary of data so that it can be used in a request body.'
    result = {}
    for k,v in data.items():
        key = f'{prefix}[{k}]' if prefix else k
        if isinstance(v, dict): result.update(_flatten_data(v, key))
        elif isinstance(v, list): 
            for i,item in enumerate(v):
                if isinstance(item, dict): result.update(_flatten_data(item, f'{key}[{i}]'))
                else: result[f'{key}[{i}]'] = item
        else: result[key] = v
    return result

# %% ../nbs/00_core.ipynb 25
def _parse_operation_id(op_id):
    parts = re.findall(r'[A-Z][a-z]*', op_id)
    verb,*resource_parts = [p.lower() for p in parts]
    r = '_'.join(resource_parts) if resource_parts else 'misc'
    nm = 'create' if verb == 'post' else 'fetch' if verb == 'get' else verb
    return r, nm

# %% ../nbs/00_core.ipynb 29
def _mk_func(path, verb, param_info, summary, hdrs={}):
    sig_params = [Parameter(param['name'], Parameter.KEYWORD_ONLY, default=None) for param in param_info]
    param_docs = '\n'.join(f"    {param['name']}: {param['description']}" for param in param_info)
    docstring = f"{summary}\n\nParameters:\n{param_docs}" if param_docs else summary
    def m(**kwargs): return dict2obj(getattr(httpx, verb)(stripe_api_url + path, headers=hdrs,
                                                          params=_flatten_data(kwargs)).json())
    m.__signature__ = Signature(sig_params)
    m.__doc__ = docstring
    return m

# %% ../nbs/00_core.ipynb 30
class StripeApi:
    def __init__(self, api_key=None, base_url='https://api.stripe.com'):
        self.api_key,self.base_url = api_key,base_url
        self.hdrs = {'Authorization': f'Bearer {self.api_key}'}
        eps = stripe_endpoints(stripe_spec)
        groups = defaultdict(list)
        for ep in eps:
            r, nm = _parse_operation_id(ep['op_id'])
            groups[r].append((ep['path'], ep['verb'], nm, ep['summary'], ep['params']))
        for r, mtds in groups.items():
            group = AttrDict()
            for path, verb, method_name, summary, params in mtds:
                setattr(group, method_name, _mk_func(path, verb, params, summary, hdrs=self.hdrs))
            setattr(self, r, group)

# %% ../nbs/00_core.ipynb 40
@patch
def find_product(self:StripeApi, name: str):
    "Find a product by name"
    prods = L(self.products.fetch().data)
    return first(prods, lambda p: p.name == name)

# %% ../nbs/00_core.ipynb 42
@patch
def find_prices(self:StripeApi, product_id: str):
    "Find all prices associated with a product id"
    return L(self.prices.fetch().data).filter(lambda p: p.product == product_id)

# %% ../nbs/00_core.ipynb 44
@patch
def priced_product(self:StripeApi, product_name, amount_cents, currency='usd', recurring=None):
    "Create a product and price if they don't exist"
    prod = self.find_product(product_name) or self.products.create(name=product_name)
    params = dict(product=prod.id, unit_amount=amount_cents, currency=currency)
    if recurring: params['recurring'] = recurring
    price = first(self.find_prices(prod.id)) or self.prices.create(**params)
    return prod, price

# %% ../nbs/00_core.ipynb 47
@patch
def one_time_payment(self:StripeApi, product_name, amount_cents, success_url, cancel_url, currency='usd'):
    "Create a simple one-time payment checkout"
    _, price = self.priced_product(product_name, amount_cents, currency)
    return self.checkout_sessions.create(mode='payment', line_items=[dict(price=price.id, quantity=1)],
                                         success_url=success_url, cancel_url=cancel_url)

# %% ../nbs/00_core.ipynb 50
@patch
def subscription(self:StripeApi, product_name, amount_cents , success_url, cancel_url,
                 currency='usd', interval='month', customer_email=None):
    "Create a simple recurring subscription"
    _, price = self.priced_product(product_name, amount_cents, currency, recurring=dict(interval=interval))
    
    params = dict(mode='subscription', line_items=[dict(price=price.id, quantity=1)],
                  success_url=success_url, cancel_url=cancel_url)
    if customer_email: params['customer_email'] = customer_email
    return self.checkout_sessions.create(**params)

# project2md/formatters/markdown.py
from typing import List, Optional, Tuple, TextIO
from pathlib import Path
from .base import BaseFormatter

class MarkdownFormatter(BaseFormatter):
    """Formatter for generating Markdown documentation."""
    
    def generate_output(
        self,
        repo_path: Path,
        files: List[Tuple[Path, Optional[str]]],
        stats: dict,
        output_path: Path,
        run_info: dict = None
    ) -> None:
        """Generate markdown output with run information."""
        with open(output_path, 'w', encoding='utf-8') as f:
            self._write_header(f, repo_path, run_info)
            self._write_overview(f, repo_path)
            self._write_structure(f, repo_path, files)
            
            if self.config.general.stats_in_output and stats:
                self._write_statistics(f, stats)
            
            self._write_file_contents(f, repo_path, files)
    
    def _write_header(self, f: TextIO, repo_path: Path, run_info: dict = None) -> None:
        """Write the header with run information."""
        f.write(f"# {repo_path.name}\n\n")
        
        if run_info:
            f.write("---\n\n")
            f.write(f"**Generated by [project2md]({run_info['pypi_url']}) v{run_info['version']}** ")
            f.write(f"on {run_info['timestamp']}\n\n")
            
            if run_info.get('signatures_mode', False):
                f.write("🔍 **Signatures Mode**: This output contains only function signatures and markdown headers. ")
                f.write("Function bodies and detailed markdown content have been omitted for a high-level overview.\n\n")
            
            f.write(f"📁 **Source**: [GitHub Repository]({run_info['github_url']})\n\n")
            f.write("---\n\n")
    
    def _write_overview(self, f: TextIO, repo_path: Path) -> None:
        """Write the overview section."""
        f.write("## Overview\n\n")
        f.write("This documentation provides an overview of the project structure and files.\n\n")
    
    def _write_structure(self, f: TextIO, repo_path: Path, files: List[Tuple[Path, Optional[str]]]) -> None:
        """Write the project structure section."""
        f.write("## Project Structure\n\n")
        for file, _ in files:
            f.write(f"- {file.relative_to(repo_path)}\n")
        f.write("\n")
    
    def _write_statistics(self, f: TextIO, stats: dict) -> None:
        """Write the statistics section."""
        f.write("## Statistics\n\n")
        for key, value in stats.items():
            f.write(f"- {key}: {value}\n")
        f.write("\n")
    
    def _write_file_contents(self, f: TextIO, repo_path: Path, files: List[Tuple[Path, Optional[str]]]) -> None:
        """Write the contents of the files section."""
        f.write("## File Contents\n\n")
        for file, content in files:
            f.write(f"### {file.name}\n\n")
            f.write("```\n")
            f.write(content)
            f.write("\n```\n\n")
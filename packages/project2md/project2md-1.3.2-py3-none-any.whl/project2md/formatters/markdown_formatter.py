from pathlib import Path
from typing import List, Tuple, Dict, Optional
import logging
from datetime import datetime
from textwrap import dedent

from .base import BaseFormatter, FormatterError
from ..config import Config

logger = logging.getLogger(__name__)

class MarkdownFormatter(BaseFormatter):
    """Handles the generation of Markdown documentation."""

    def __init__(self, config: Config):
        super().__init__(config)  # Call parent init
        self.config = config
        self._readme_content: Optional[str] = None
        self._tree_cache: Optional[str] = None

    def generate_output(
        self,
        repo_path: Path,
        files: List[Tuple[Path, Optional[str]]],
        stats: Dict,
        output_path: Path,
        run_info: dict = None
    ) -> None:
        """Generate the Markdown documentation file."""
        try:
            content = self._generate_markdown(repo_path, files, stats, run_info)
            output_path.write_text(content, encoding='utf-8')
            logger.info(f"Documentation written to {output_path}")
        except Exception as e:
            raise FormatterError(f"Failed to generate output: {str(e)}")

    def _generate_markdown(
        self,
        repo_path: Path,
        files: List[Tuple[Path, Optional[str]]],
        stats: Dict,
        run_info: dict = None
    ) -> str:
        """Generate Markdown formatted output."""
        sections = []
        
        # Project Overview
        sections.append("# Project Overview\n")

        # Add generation metadata with run info
        if run_info:
            sections.append("---\n\n")
            sections.append(f"**Generated by [project2md]({run_info['pypi_url']}) v{run_info['version']}** ")
            sections.append(f"on {run_info['timestamp']}\n\n")
            
            if run_info.get('signatures_mode', False):
                sections.append("🔍 **Signatures Mode**: This output contains only function signatures and markdown headers. ")
                sections.append("Function bodies and detailed markdown content have been omitted for a high-level overview.\n\n")
            
            sections.append(f"📁 **Source**: [GitHub Repository]({run_info['github_url']})\n\n")
            sections.append("---\n\n")

        # Add README content if found
        readme_content = self._find_readme_content(files)
        if readme_content:
            sections.append("## README.md Content\n\n")
            sections.append(readme_content)
            sections.append("\n")

        # Add project structure
        sections.append("## Project Structure\n\n")
        sections.append("```tree\n")
        sections.append(self._generate_tree(repo_path, files))
        sections.append("\n```\n\n")

        # Add statistics if enabled
        if self.config.output.stats:
            sections.append(self._format_stats(stats))

        # Add file contents
        sections.append("## File Contents\n")
        for file_path, content in files:
            if content is not None and file_path.name.lower() != "readme.md":
                rel_path = file_path.relative_to(repo_path)
                lang_tag = self._get_language_tag(file_path)
                
                # Use four backticks for markdown files to handle nested markdown content
                if lang_tag == 'markdown':
                    sections.append(f"### filepath {rel_path}\n\n````{lang_tag}\n{content}\n````\n")
                else:
                    sections.append(f"### filepath {rel_path}\n\n```{lang_tag}\n{content}\n```\n")

        # Add generation metadata
        sections.append("---\nGenerated by project2md on {}\n".format(
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ))

        return "\n".join(sections)

    def _format_stats(self, stats: Dict) -> str:
        """Format statistics as Markdown."""
        file_types_str = "\n  ".join(
            f"- {ext}: {count}" for ext, count in stats.get('file_types', {}).items()
        )
        
        format_stats = stats.copy()
        format_stats.pop('file_types', None)
        format_stats['file_types_list'] = file_types_str
        
        return dedent("""
            ## Project Statistics

            - Total Files: {total_files}
            - Text Files: {text_files}
            - Binary Files: {binary_files}
            - Repository Size: {repo_size}
            - Current Branch: {branch}
            - Most Common File Types:
              {file_types_list}
            """).format(**format_stats)

    @staticmethod
    def _get_language_tag(file_path: Path) -> str:
        """Determine the language tag for syntax highlighting."""
        extensions = {
            '.py': 'python',
            '.js': 'javascript',
            '.jsx': 'jsx',
            '.ts': 'typescript',
            '.tsx': 'tsx',
            '.html': 'html',
            '.css': 'css',
            '.scss': 'scss',
            '.sql': 'sql',
            '.sh': 'bash',
            '.bash': 'bash',
            '.md': 'markdown',
            '.json': 'json',
            '.xml': 'xml',
            '.yaml': 'yaml',
            '.yml': 'yaml',
        }
        return extensions.get(file_path.suffix.lower(), '')

"Query is a collection of queries that can be made to the API"
type Query {
  "Fetch current user"
  me: User!
  "Fetch a specific user by id"
  user(id: ID!): User!
  "Fetch current user's API keys"
  api_keys: [APIKey!]
  "Fetch traces by session id"
  traces(session_id: ID!): [Trace!]
  "Fetch all traces"
  all_traces: [Trace!]
  "Fetch all spans by trace id"
  spans(trace_id: ID!): [Span!]
  "Fetch openai input by span id"
  chat_input(span_id: ID!): ChatInput
  "Fetch completion usages"
  completion_usage(
    start_time: Int!
    end_time: Int
    group_by: GroupingKey
  ): [UsageResult!]
  "Fetch all scores by trace id"
  scores(trace_id: ID!): [Score!]
}

"GroupingKey is an enum that represents the key used to group usage results"
enum GroupingKey {
  date
  model
}

"NullTime is a custom scalar type that represents a time value that can be null"
type NullTime {
  Time: String!
  Valid: Boolean!
}

"KeyValue is a key-value pair"
type KeyValue {
  key: String!
  value: String!
}

"User is a registered user of the application"
type User {
  id: ID!
  name: String
  username: String!
  email: String!
  api_keys: [APIKey!]
}

"APIKey is a key used to authenticate requests to the API"
type APIKey {
  id: ID!
  api_key: String!
  name: String
  created_at: String!
}

"Trace is a record to track the execution of a session"
type Trace {
  id: ID!
  name: String
  start_time: String!
  end_time: NullTime!
  session_id: ID!
}

"Kind is an enum that represents the type of span"
enum Kind {
  SPAN_KIND_FUNCTION
  SPAN_KIND_LLM
  SPAN_KIND_EVALUATION
}

"Span is a record of a single unit of work within a trace"
type Span {
  id: ID!
  parent_id: ID!
  trace_id: ID!
  name: String!
  start_time: String!
  end_time: NullTime!
  duration: Float
  kind: Kind!
  metadata: [KeyValue!]
}

"OpenInput is the input for the OpenAI API"
type ChatInput {
  model: String!
  messages: [MessageInput!]
  temperature: Float
  top_p: Float
  n: Int
  stream: Boolean
  logprobs: Boolean
  top_logprobs: Int
}

"MessageInput is a message sent to the OpenAI API"
type MessageInput {
  role: String!
  content: String!
  name: String
}

"UsageResult is the result of a usage query"
type UsageResult {
  input_tokens: Int!
  output_tokens: Int!
  total_tokens: Int!
  model: String
  date: Int
}

"Score is a record of a score for a trace"
type Score {
  span_id: ID!
  name: String!
  score: Float!
  representative_reasoning: String!
}

"Mutation is a collection of mutations that can be made to the API"
type Mutation {
  "Auth Mutations"
  login(identity: String!, password: String!): CreateTokenResponse!
  loginWithAPIKey(api_key: String!): CreateTokenResponse!
  "API Key Mutations"
  createAPIKey(name: String): CreateAPIKeyResponse!
  updateAPIKey(id: ID!, name: String): UpdateAPIKeyResponse!
  revokeAPIKey(id: ID!): RevokeAPIKeyResponse!
  "User Mutations"
  createUser(
    username: String!
    email: String!
    password: String!
  ): CreateUserResponse!
  updateUser(id: ID!, name: String): UpdateUserResponse!
  deleteUser(id: ID!, password: String!): DeleteUserResponse!
}

"MutationResponse is a response to a mutation"
interface MutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"CreateAPIKeyResponse is a response to the createAPIKey mutation"
type CreateAPIKeyResponse implements MutationResponse {
  code: Int!
  message: String!
  success: Boolean!
  data: APIKey
}

"UpdateAPIKeyResponse is a response to the updateAPIKey mutation"
type UpdateAPIKeyResponse implements MutationResponse {
  code: Int!
  message: String!
  success: Boolean!
  data: APIKey
}

"RevokeAPIKeyResponse is a response to the revokeAPIKey mutation"
type RevokeAPIKeyResponse implements MutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"CreateTokenResponse is a response to the login mutation"
type CreateTokenResponse implements MutationResponse {
  code: Int!
  message: String!
  success: Boolean!
  data: String
}

"DeleteUserResponse is a response to the deleteUser mutation"
type DeleteUserResponse implements MutationResponse {
  code: Int!
  message: String!
  success: Boolean!
}

"UpdateUserResponse is a response to the updateUser mutation"
type UpdateUserResponse implements MutationResponse {
  code: Int!
  message: String!
  success: Boolean!
  data: User
}

"CreateUserResponse is a response to the createUser mutation"
type CreateUserResponse implements MutationResponse {
  code: Int!
  message: String!
  success: Boolean!
  data: User
}

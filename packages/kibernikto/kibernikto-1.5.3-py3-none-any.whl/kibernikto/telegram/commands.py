import logging

from aiogram import Bot, types, enums
from aiogram.filters import Command, CommandObject
from pydantic_settings import BaseSettings
from kibernikto.telegram.telegram_bot import TelegramBot

from kibernikto.utils.permissions import is_from_admin


class CommandSettings(BaseSettings):
    TG_MASTER_ID: int
    TG_MASTER_IDS: list = []
    TG_ADMIN_COMMANDS_ALLOWED: bool = True


PP_SETTINGS = CommandSettings()

if PP_SETTINGS.TG_ADMIN_COMMANDS_ALLOWED:
    from kibernikto.telegram import comprehensive_dispatcher, get_ai_executor

    print('\t%-20s%-20s' % ("service commands:", '["/system_message"]'))


    @comprehensive_dispatcher.dp.message(Command(commands=["system_message"]))
    async def private_message(message: types.Message, command: CommandObject):
        if is_from_admin(message) and PP_SETTINGS.TG_ADMIN_COMMANDS_ALLOWED:
            if message.chat.type == enums.ChatType.PRIVATE:
                user_ai: TelegramBot = get_ai_executor(message.from_user.id)
                if user_ai is None:
                    await message.reply(f"ü•∏ –ü–æ—Ö–æ–∂–µ –º–Ω–µ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –ø–∏—Å–∞–ª. –î–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                    return None
                await message.reply(f"–ú–µ–Ω—è –∑–æ–≤—É—Ç ```{user_ai.full_config.name}```"
                                    f"–ú–æ–π —Å–∏—Å—Ç–µ–º –ø—Ä–æ–º—Ç ```{user_ai.about_me['content']}```"
                                    f"–ú–æ—è –º–æ–¥–µ–ª—å ```{user_ai.full_config.model}```"
                                    f"–ú–æ—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ```{user_ai.full_config.temperature}```"
                                    f"–û—Ç–∫–ª–∏–∫–∞—é—Å—å –Ω–∞ ```{str(user_ai.full_config.reaction_calls)}```",
                                    parse_mode='Markdown')

            else:
                await message.reply(f"‚ùå–ù–µ –ø—Ä–∏ –≤—Å–µ—Ö!")
        else:
            await message.reply(f"‚ùå–í–∞–º –Ω–µ–ª—å–∑—è!")
else:
    print('\t%-20s%-20s' % ("service commands:", 'disabled'))

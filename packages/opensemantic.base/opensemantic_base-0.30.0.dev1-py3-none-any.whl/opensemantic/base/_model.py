# from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID, uuid4

from pydantic.v1 import Field, constr

from opensemantic import OswBaseModel
from opensemantic.core import (
    Description,
    Entity,
    Item,
    Label,
    LangCode,
    ObjectStatement,
    Process,
)


class StrictParticipantsProcess(Process):
    type: Optional[Any] = ["Category:OSWfa0d5710bc0f45819b61b65fc4fd9656"]
    orderer: Optional[str] = Field(None, title="Orderer")
    """
    Internal or external orderer/customer (person or organizational unit)
    """
    contact: Optional[str] = Field(None, title="Contact")
    """
    Contact person on the orderer side
    """
    approver: Optional[List[str]] = Field(None, title="Approver")
    """
    Person or organizational unit that validates the result of the process and approves
    """


class AdministrativeProcess(StrictParticipantsProcess):
    type: Optional[Any] = ["Category:OSW1a271f289649413488e2841580e43a45"]


class RiskAssessmentProcess(AdministrativeProcess):
    type: Optional[Any] = ["Category:OSW3886740859ae459588fee73d3bb3c83e"]
    output: Optional[List[str]] = Field(None, title="Output documents")
    """
    Laboratory rules or operating instructions
    """


Process.update_forward_refs()
StrictParticipantsProcess.update_forward_refs()
AdministrativeProcess.update_forward_refs()
RiskAssessmentProcess.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWd9521d3054814dd29c2bcdbd9185d1f0.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class IDAndCountry(OswBaseModel):
    tax_id: Optional[str] = Field(None, title="ID")
    country: Optional[str] = Field(None, title="Country")


class IDAndCountry1(OswBaseModel):
    vat_id: Optional[str] = Field(None, title="ID")
    country: Optional[str] = Field(None, title="Country")


class PostalAddress(OswBaseModel):
    uuid: UUID
    country: Optional[str] = Field(None, title="Country")
    country_name: Optional[str] = Field(None, title="Country (text)")
    state: Optional[str] = Field(None, title="State")
    region: Optional[str] = Field(None, title="Region")
    post_office_box_no: Optional[str] = Field(None, title="PO box number")
    postal_code: Optional[str] = Field(None, title="Postal code")
    city: Optional[str] = Field(None, title="City")
    city_name: Optional[str] = Field(None, title="City (text)")
    street_name: Optional[str] = Field(None, title="Street")
    house_no: Optional[str] = Field(None, title="House number")
    address_supplement: Optional[str] = Field(None, title="Address supplement")
    addressee: Optional[str] = Field(None, title="Addressee")
    """
    Title line of the address in case different from organization name
    """


class OrganizationalUnit(Item):
    """
    The most general kind of organizational unit - an organization but also parts of an organization
    """

    type: Optional[Any] = ["Category:OSW3cb8cef2225e403092f098f99bc4c472"]
    abbreviation: Optional[str] = Field(None, title="Acronym")
    """
    Acronym of the organizational unit.
    """
    competence: Optional[Set[str]] = Field(None, title="Competence(s)")
    deputy_manager: Optional[Set[str]] = Field(None, title="Deputy manager")
    founder: Optional[Set[str]] = Field(None, title="Founder")
    founding_date: Optional[date] = Field(None, title="Founding date")
    founding_location: Optional[str] = Field(None, title="Founding location")
    funder: Optional[str] = Field(None, title="Funder")
    """
    The Funder of a Consortium is the Organization that provides the funding for the Consortium.
    """
    image: Optional[Any] = Field(None, title="Logo")
    legal_name: Optional[str] = Field(None, title="Legal name")
    legal_form: Optional[str] = Field(None, title="Legal form")
    mailing_list: Optional[Set[EmailStr]] = Field(None, title="Mailing list")
    """
    Mailing list of the organizational unit.
    """
    manager: Optional[Set[str]] = Field(None, title="Manager")
    member_of: Optional[Set[str]] = Field(None, title="Member of")
    """
    The organization(al unit) this organization is a member of.
    """
    member_persons: Optional[Set[str]] = Field(None, title="Member person(s)")
    """
    The members (persons) of this organization(al unit).
    """
    member_ous: Optional[Set[str]] = Field(None, title="Member OU(s)")
    """
    The members (organization units) of this organization(al unit).
    """
    secretary: Optional[Set[str]] = Field(None, title="Secretary")
    postal_address: Optional[PostalAddress] = None
    ror_id: Optional[str] = Field(None, title="ROR ID")
    """
    ID provided by https://ror.org/
    """
    site: Optional[Set[str]] = Field(None, title="Site(s)")
    superordinate_ou: Optional[Set[str]] = Field(None, title="Superordinate OU(s)")
    tax_id_obj: Optional[List[IDAndCountry]] = Field(None, title="Tax ID")
    """
    Tax ID of the organizational unit.
    """
    vat_id_obj: Optional[List[IDAndCountry1]] = Field(None, title="VAT ID")
    """
    VAT ID of the organizational unit.
    """
    topic: Optional[Set[str]] = Field(None, title="Topic(s)")
    website: Optional[Set[AnyUrl]] = Field(None, title="Website")
    email: Optional[Set[EmailStr]] = Field(None, title="Email address")
    phone_number: Optional[
        Set[
            constr(
                regex=r"(?:(?:(?:\+|00|011)[\.\/\-\ \t]*([17]|2(?:[07]|[1-689]\d)|3(?:[0-4679]|[578]\d)|4(?:[013-9]|2\d)|5(?:[1-8]|[09]\d)|6(?:[0-6]|[789]\d)|8(?:[1246]|[035789]\d)|9(?:[0-58]|[679]\d))[\.\/\-\ \t]*|([17])[\.\/\-\ ])?(?:\((\d{1,6})\)[\.\/\-\ \t]*)?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(\d{0,10}?)(\d{1,})(?:[\.\/\-;\ \t]*e?xt?[\.\/\-=\ \t]*(\d{1,14}))?)?"
            )
        ]
    ] = Field(None, title="Phone number")
    """
    Phone number formatted with country code and hyphens, e.g.. +49-931-4100-172. According to https://www.wikidata.org/wiki/Property:P1329
    """
    fax_number: Optional[
        Set[
            constr(
                regex=r"(?:(?:(?:\+|00|011)[\.\/\-\ \t]*([17]|2(?:[07]|[1-689]\d)|3(?:[0-4679]|[578]\d)|4(?:[013-9]|2\d)|5(?:[1-8]|[09]\d)|6(?:[0-6]|[789]\d)|8(?:[1246]|[035789]\d)|9(?:[0-58]|[679]\d))[\.\/\-\ \t]*|([17])[\.\/\-\ ])?(?:\((\d{1,6})\)[\.\/\-\ \t]*)?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(\d{0,10}?)(\d{1,})(?:[\.\/\-;\ \t]*e?xt?[\.\/\-=\ \t]*(\d{1,14}))?)?"
            )
        ]
    ] = Field(None, title="Fax number")
    """
    Fax number formatted with country code and hyphens, e.g.. +49-931-4100-172. According to https://www.wikidata.org/wiki/Property:P1329
    """
    associated_acl_roles: Optional[List[str]] = Field(
        None, title="Access control roles"
    )


class Organization(OrganizationalUnit):
    type: Optional[Any] = ["Category:OSW1969007d5acf40539642877659a02c23"]


class NonGovernmentalOrganization(Organization):
    type: Optional[Any] = ["Category:OSWcffdc90247c142eca7f23ab6c69e49a1"]
    rdf_type: Optional[str] = Field("schema:NGO", title="RDF type")


class Association(NonGovernmentalOrganization):
    type: Optional[Any] = ["Category:OSWd9521d3054814dd29c2bcdbd9185d1f0"]
    manager: Optional[Any] = Field(None, title="President")
    """
    The president is the head of the association.
    """


OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
NonGovernmentalOrganization.update_forward_refs()
Association.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW41ff0ef9d7cf4134bccf5bbbf1976f73.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class GovermentOrganization(Organization):
    """
    A governmental organization or agency.
    """

    type: Optional[Any] = ["Category:OSW41ff0ef9d7cf4134bccf5bbbf1976f73"]


OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
GovermentOrganization.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW5a13eeda5ed5405ea7ef62ea6feeceec.json


class IntangibleItem(Item):
    """
    A utility class that serves as the umbrella for a number of 'intangible' things such as terms, quantities, structured values, etc.
    """

    type: Optional[Any] = ["Category:OSWcbb09a36336740c6a2cd62db9bf647ec"]


class DefinedTerm(IntangibleItem):
    """
    Definition of a noun or compound word describing a specific concept
    """

    type: Optional[Any] = ["Category:OSWa5812d3b5119416c8da1606cbe7054eb"]


class Topic(DefinedTerm):
    type: Optional[Any] = ["Category:OSW5a13eeda5ed5405ea7ef62ea6feeceec"]


IntangibleItem.update_forward_refs()
DefinedTerm.update_forward_refs()
Topic.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW595b282aedf048788f3ee326454792ce.json


class Enumeration(IntangibleItem):
    """
    Lists or enumerationsâ€”for example, a list of cuisines or music genres, etc.
    """

    type: Optional[Any] = ["Category:OSWd02741381aaa4709ae0753a0edc341ce"]


class BudgetType(Enumeration):
    """
    Type of usage of a certain budget
    """

    type: Optional[Any] = ["Category:OSW595b282aedf048788f3ee326454792ce"]


IntangibleItem.update_forward_refs()
Enumeration.update_forward_refs()
BudgetType.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW807f1da5b42e42f296b213ab06ca873b.json


class Place(Item):
    """
    Entities that have a somewhat fixed, physical extension.
    """

    type: Optional[Any] = ["Category:OSW28f71f2c20ad48c38c4e4d190a95c0b8"]
    rdf_type: Optional[List[str]] = ["schema:Places"]


class AdministrativeArea(Place):
    """
    A geographical region, typically under the jurisdiction of a particular government.
    """

    type: Optional[Any] = ["Category:OSW137e7443b2b94692bd59a0e0a6778b70"]


class City(AdministrativeArea):
    """
    A city or town.
    """

    type: Optional[Any] = ["Category:OSW807f1da5b42e42f296b213ab06ca873b"]


Place.update_forward_refs()
AdministrativeArea.update_forward_refs()
City.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW0551abcd6f734047825e3ded4c8a0ffe.json


class Country(AdministrativeArea):
    """
    A distinct part of the world, such as a state, nation, or other political entity
    """

    type: Optional[Any] = ["Category:OSW0551abcd6f734047825e3ded4c8a0ffe"]


Place.update_forward_refs()
AdministrativeArea.update_forward_refs()
Country.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWbe80b28aefd64921ba2e8e2d6225416e.json


class Grant(IntangibleItem):
    """
    A grant, typically financial or otherwise quantifiable, of resources. Typically a funder sponsors some MonetaryAmount to an Organization or Person, sometimes not necessarily via a dedicated or long-lived Project, resulting in one or more outputs, or funded items.
    """

    type: Optional[Any] = ["Category:OSW25bc4daf97644737a76434b88e1d5b21"]
    rdf_type: Optional[List[str]] = ["schema:Grant"]


class MonetaryGrant(Grant):
    type: Optional[Any] = ["Category:OSWbe80b28aefd64921ba2e8e2d6225416e"]


IntangibleItem.update_forward_refs()
Grant.update_forward_refs()
MonetaryGrant.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWfe3e842b804445c7bb0dd8ee61da2d70.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class OrganizationalSubUnit(OrganizationalUnit):
    """
    An organizational unit that explicitly is part of a larger organizational unit.
    """

    type: Optional[Any] = ["Category:OSWfe3e842b804445c7bb0dd8ee61da2d70"]


OrganizationalUnit.update_forward_refs()
OrganizationalSubUnit.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW44deaa5b806d41a2a88594f562b110e9.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class DisplayName(OswBaseModel):
    text: Optional[Any] = None
    lang: Optional[str] = "en"


class Person(Item):
    """
    Category for a person in general. Subcategories are e.g. 'User', i.e. persons who have a user ID.
    """

    type: Optional[Any] = ["Category:OSW44deaa5b806d41a2a88594f562b110e9"]
    first_name: str = Field(..., title="First name / Given name / Forename")
    middle_name: Optional[Set[str]] = Field(None, title="Middle name(s)")
    surname: str = Field(..., title="Last name / Family name / Surname")
    label: Optional[List[DisplayName]] = None
    organization: Optional[Set[str]] = Field(None, title="Organization")
    """
    Organization(s) the person is affiliated with. E.g., university, research institute, company, etc.
    """
    organizational_unit: Optional[Set[str]] = Field(
        None, title="Organizational (sub)unit"
    )
    """
    Organizational (sub)unit(s) the person is member of. E.g., faculty, institute, department or research group, etc.
    """
    email: Optional[Set[EmailStr]] = Field(None, title="Email address")
    website: Optional[Set[AnyUrl]] = Field(None, title="Website")
    orcid: Optional[AnyUrl] = Field(None, title="ORCID iD")
    """
    The ORCID iD is an https URI with a 16-digit number, e.g., https://orcid.org/0000-0001-2345-6789.
    """
    phone_number: Optional[
        Set[
            constr(
                regex=r"(?:(?:(?:\+|00|011)[\.\/\-\ \t]*([17]|2(?:[07]|[1-689]\d)|3(?:[0-4679]|[578]\d)|4(?:[013-9]|2\d)|5(?:[1-8]|[09]\d)|6(?:[0-6]|[789]\d)|8(?:[1246]|[035789]\d)|9(?:[0-58]|[679]\d))[\.\/\-\ \t]*|([17])[\.\/\-\ ])?(?:\((\d{1,6})\)[\.\/\-\ \t]*)?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(\d{0,10}?)(\d{1,})(?:[\.\/\-;\ \t]*e?xt?[\.\/\-=\ \t]*(\d{1,14}))?)?"
            )
        ]
    ] = Field(None, title="Phone number")
    """
    Phone number formatted with country code and hyphens, e.g.. +49-931-4100-172. According to https://www.wikidata.org/wiki/Property:P1329
    """
    fax_number: Optional[
        Set[
            constr(
                regex=r"(?:(?:(?:\+|00|011)[\.\/\-\ \t]*([17]|2(?:[07]|[1-689]\d)|3(?:[0-4679]|[578]\d)|4(?:[013-9]|2\d)|5(?:[1-8]|[09]\d)|6(?:[0-6]|[789]\d)|8(?:[1246]|[035789]\d)|9(?:[0-58]|[679]\d))[\.\/\-\ \t]*|([17])[\.\/\-\ ])?(?:\((\d{1,6})\)[\.\/\-\ \t]*)?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(?:(\d{1,6})[\.\/\-\ ])?(\d{0,10}?)(\d{1,})(?:[\.\/\-;\ \t]*e?xt?[\.\/\-=\ \t]*(\d{1,14}))?)?"
            )
        ]
    ] = Field(None, title="Fax number")
    """
    Fax number formatted with country code and hyphens, e.g.. +49-931-4100-172. According to https://www.wikidata.org/wiki/Property:P1329
    """
    located_in: Optional[Set[str]] = Field(None, title="Located at ")
    role: Optional[Set[str]] = Field(None, title="Roles")
    competence: Optional[Set[str]] = Field(None, title="Competences")
    topic: Optional[Set[str]] = Field(None, title="Topics")


Person.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWcffdc90247c142eca7f23ab6c69e49a1.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel

OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
NonGovernmentalOrganization.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW1a271f289649413488e2841580e43a45.json


from enum import Enum
from typing import Any, Dict, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, constr

from opensemantic import OswBaseModel

Process.update_forward_refs()
StrictParticipantsProcess.update_forward_refs()
AdministrativeProcess.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWa01126bc9e9048988cb0f49e359015bc.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class Faculty(OrganizationalSubUnit):
    manager: Optional[Any] = Field(None, title="Dean")
    superordinate_ou: Optional[List[str]] = Field([""], min_items=1)
    """
    University
    """
    type: Optional[Any] = ["Category:OSWa01126bc9e9048988cb0f49e359015bc"]


OrganizationalUnit.update_forward_refs()
OrganizationalSubUnit.update_forward_refs()
Faculty.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW5eb9c52b804544dc870dfd54ff434428.json


class Competence(DefinedTerm):
    type: Optional[Any] = ["Category:OSW5eb9c52b804544dc870dfd54ff434428"]


IntangibleItem.update_forward_refs()
DefinedTerm.update_forward_refs()
Competence.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW28f71f2c20ad48c38c4e4d190a95c0b8.json


Place.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWb97757b46edb430591758662c18d354d.json


from datetime import date, timedelta
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, constr

from opensemantic import OswBaseModel


class Duration(OswBaseModel):
    """
    Fields accept only a certain range of values. If you would like to enter a value that exceeds the maximum, please split the value into the corresponding fields. For convenience, it is possible to enter, e.g., 1.5 hours instead of 1 hour and 30 minutes.
    """

    uuid: UUID
    year: Optional[confloat(ge=0.0)] = Field(0, title="Year")
    month: Optional[confloat(ge=0.0, le=12.0)] = Field(0, title="Month")
    """
    0 - 12
    """
    day: Optional[confloat(ge=0.0, le=31.0)] = Field(0, title="Day")
    """
    0 - 31
    """
    hour: Optional[confloat(ge=0.0, le=24.0)] = Field(0, title="Hour")
    """
    0 - 24
    """
    minute: Optional[confloat(ge=0.0, le=60.0)] = Field(0, title="Minute")
    """
    0 - 60
    """
    second: Optional[confloat(ge=0.0, le=60.0)] = Field(0, title="Second")
    """
    0 - 60
    """
    iso_8601_representation: timedelta = Field(..., title="ISO 8601 representation")
    numerical_value_in_seconds: float = Field(..., title="Duration in seconds")
    """
    This value is not accurate! The actual duration of a span of (calendar) years and months depends on the specific dates involved. Therefore, this value is only an approximation.
    """
    value_in_seconds: str = Field(..., title="Duration converted to seconds as string")


class Event(Item):
    """
    Something that happens or takes place, esp. something significant or noteworthy; an incident, an occurrence (according to Oxford English Dictionary).
    """

    type: Optional[Any] = ["Category:OSWb97757b46edb430591758662c18d354d"]
    start_date: Optional[date] = Field(None, title="Start date")
    start_date_time: Optional[str] = Field(None, title="Start date and time")
    end_date: Optional[date] = Field(None, title="End date")
    end_date_time: Optional[str] = Field(None, title="End date and time")
    duration: Optional[Duration] = Field(None, title="Duration")


Event.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWb2d7e6a2eff94c82b7f1f2699d5b0ee3.json


from datetime import date


class ProjectType(str, Enum):
    house_project = "house_project"
    internal = "internal"
    public = "public"
    industry = "industry"


class YearlyBudget(OswBaseModel):
    uuid: UUID
    yearly_budget_sum: Optional[float] = Field(None, title="Yearly Budget Sum")
    budget_year: Optional[str] = Field(None, title="Year")
    budget_start: Optional[date] = Field(None, title="Start")
    budget_end: Optional[date] = Field(None, title="End")
    budget_ou: Optional[List[str]] = Field(None, title="OU")
    budget_type: Optional[str] = Field(None, title="Type")


class Project(Item):
    """
    An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim.
    """

    type: Optional[Any] = ["Category:OSWb2d7e6a2eff94c82b7f1f2699d5b0ee3"]
    subjects: Optional[List[str]] = Field(None, title="Subjects")
    project_type: Optional[ProjectType] = Field("", title="Project type")
    project_status: Optional[str] = Field(
        "Item:OSW55a9a9bda7b248759e48ae2e3ed6df1d", title="Project status"
    )
    funding_call: Optional[str] = Field(None, title="Funding call")
    funder: Optional[str] = Field(None, title="Funder")
    funding: Optional[str] = Field(None, title="Funding")
    """
    Grant or contract
    """
    funding_name: Optional[str] = Field(None, title="Funding (name)")
    """
    Grant or contract. Use this property to enter a text if you don't want to create a new instance of grant.
    """
    ou: Optional[List[str]] = Field(None, title="OU")
    """
    Organizational Unit (OU), which carries out the project
    """
    project_manager: Optional[List[str]] = Field(None, title="Project Manager")
    member: Optional[List[str]] = Field(None, title="Member")
    member_of: Optional[List[str]] = Field(None, title="Member of")
    """
    Organizational unit(s), the project is a member of, e.g. a project cluster
    """
    start_date: Optional[date] = Field(None, title="Start")
    end_date: Optional[date] = Field(None, title="End")
    total_budget: Optional[float] = Field(None, title="Total Budget")
    yearly_budget: Optional[List[YearlyBudget]] = Field(None, title="Yearly budget")
    proposal: Optional[str] = Field(None, title="Proposal")
    report: Optional[str] = Field(None, title="Report")
    other_documents: Optional[List[str]] = Field(None, title="Additional documents")
    abstract: Optional[List[Description]] = Field(None, title="Abstract")


Project.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW4bcd4a99a73f482ea40ac4210dfab836.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, constr

from opensemantic import OswBaseModel


class GPSCoordinates(OswBaseModel):
    uuid: UUID
    latitude: Optional[confloat(ge=-90.0, le=90.0)] = Field(None, title="Latitude")
    """
    Angular measurement ranging from 0 degree at the equator to +90 degree at the North Pole and minus 90 degree at the South Pole.
    """
    longitude: Optional[confloat(ge=-180.0, le=180.0)] = Field(None, title="Longitude")
    """
    Angular measurement ranging from 0 degree at the Prime Meridian to +180 degree eastward and minus 180 degree westward.
    """


class Location(Item):
    """
    A location. Entities that have a somewhat fixed, physical extension.
    """

    type: Optional[Any] = ["Category:OSW3d238d05316e45a4ac95a11d7b24e36b"]
    postal_address: Optional[PostalAddress] = None
    gps_coordinates: Optional[GPSCoordinates] = Field(None, title="GPS coordinates")


class Building(Location):
    type: Optional[Any] = ["Category:OSW4bcd4a99a73f482ea40ac4210dfab836"]
    located_in: Optional[Set[str]] = Field(None, title="Site")
    construction_year: Optional[float] = Field(None, title="Construction year")
    """
    The year in which the construction was completed.
    """
    length: Optional[float] = Field(None, title="Length")
    width: Optional[float] = Field(None, title="Width")
    height: Optional[float] = Field(None, title="Height")
    footprint: Optional[float] = Field(None, title="Area at base level")
    area: Optional[float] = Field(None, title="Total floor area")
    function: Optional[Set[str]] = Field(None, title="Building function")
    responsible_person: Optional[Set[str]] = Field(None, title="Responsible person")


Location.update_forward_refs()
Building.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW494f660e6a714a1a9681c517bbb975da.json


class CreativeWork(Item):
    """
    The most generic kind of (product of) creative work, including books, movies, photographs, software programs, etc.
    """

    type: Optional[Any] = ["Category:OSW712583f2479944deb2546b77cf860dda"]
    author: Optional[List[str]] = Field(None, title="Author(s)")
    """
    Person or organizational unit that created this work.
    """


class Article(CreativeWork):
    """
    A generic entry that can contain both text and media content
    """

    type: Optional[Any] = ["Category:OSW92cc6b1a2e6b4bb7bad470dfdcfdaf26"]
    related_to: Optional[List[str]] = Field(None, title="Related to")
    part_of: Optional[List[str]] = Field(None, title="Article collection")
    """
    A superordinated element this entry is part of
    """


class Tutorial(Article):
    """
    Instruction in written or cinematic form
    """

    required_predecessor: Optional[List[str]] = Field(
        None, title="Prerequisites (required)"
    )
    optional_predecessor: Optional[List[str]] = Field(
        None, title="Prerequisites (optional)"
    )
    recommended_successor: Optional[List[str]] = Field(
        None, title="Follow-up (recommended)"
    )
    type: Optional[Any] = ["Category:OSW494f660e6a714a1a9681c517bbb975da"]


CreativeWork.update_forward_refs()
Article.update_forward_refs()
Tutorial.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW94aa074255374580b70337340c5ccc1b.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class Department(OrganizationalSubUnit):
    manager: Optional[Any] = Field(None, title="Head")
    superordinate_ou: Optional[List[str]] = Field([""], min_items=1)
    """
    Faculty, institute or organization, the department belongs to.
    """
    type: Optional[Any] = ["Category:OSW94aa074255374580b70337340c5ccc1b"]


OrganizationalUnit.update_forward_refs()
OrganizationalSubUnit.update_forward_refs()
Department.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW137e7443b2b94692bd59a0e0a6778b70.json


Place.update_forward_refs()
AdministrativeArea.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW95efaf34e2c7439e8e7967233910e44b.json


class Region(AdministrativeArea):
    type: Optional[Any] = ["Category:OSW95efaf34e2c7439e8e7967233910e44b"]


Place.update_forward_refs()
AdministrativeArea.update_forward_refs()
Region.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW11ee14fb9f774b4b89bdb9bb89aac14d.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class EducationalOrganization(Organization):
    type: Optional[Any] = ["Category:OSW9d63242855e44ab8b26d6ad9792a67b3"]


class University(EducationalOrganization):
    type: Optional[Any] = ["Category:OSW11ee14fb9f774b4b89bdb9bb89aac14d"]
    manager: Optional[Any] = Field(None, title="Rector / president")
    """
    The rector or president is the head of the university.
    """


OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
EducationalOrganization.update_forward_refs()
University.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW02590972aeba46d7864ed492c0c11384.json


class InitialOccupantOfTheSlot(OswBaseModel):
    """
    Tool or component installed in the slot.
    """

    slot_occupant_type: Optional[str] = Field(None, title="Type")
    slot_occupant_instance_property: Optional[str] = "Property:HasOccupant"
    slot_occupant_instance: str = Field(..., title="Instance")


class OtherPhysicalItem(OswBaseModel):
    uuid: str
    origin_item_type: Optional[str] = Field(
        "Category:OSW37a57741ae2e4dd4b29b1172b6848be8", title="Type"
    )
    origin_item_instance_property: Optional[str] = "Property:HasOrigin"
    origin_item_instance: str = Field(..., title="Instance")


class Quantity(OswBaseModel):
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    quantity: str = Field(..., title="Property")
    numerical_value: str = Field(..., title="Value")
    unit: str = Field(..., title="Unit")
    unit_symbol: str
    value: str = Field(..., title="Value")


class FileS(OswBaseModel):
    __root__: Set[str] = Field(..., title="File(s)")


class SafetyDataSheet(OswBaseModel):
    pass


class Manual(OswBaseModel):
    """
    Comprehensive guide that details how to use this item.
    """


class Instructions(OswBaseModel):
    """
    A list of steps to be performed, e.g., the setup instructions.
    """


class Component(OswBaseModel):
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    component_id: str = Field(..., title="ID")
    """
    Automatically generated
    """
    label: Optional[List[Label]] = Field(None, title="Label")
    """
    Designation of the function or role of the component in this specific context.
    """
    description: Optional[List[Description]] = Field(None, title="Description")
    """
    Optional, additional details on the role or function of the component in this specific context.
    """
    component_type: Optional[str] = Field(
        "Category:OSWe427aafafbac4262955b9f690a83405d", title="Component type"
    )
    component_instance_property: Optional[str] = "Property:HasPart"
    component_instance: str = Field(..., title="Instance")


class Slot(OswBaseModel):
    uuid: str = Field(..., title="UUID")
    slot_osw_id: str = Field(..., title="OSW-ID")
    slot_id: str = Field(..., title="ID")
    """
    Automatically generated
    """
    name: Optional[str] = Field(None, title="Name")
    description: Optional[List[Description]] = Field(None, title="Description")
    slot_init_date_time: str = Field(..., title="Date of slot initialization")
    slot_type_restriction: Optional[str] = Field(
        "Category:OSWe427aafafbac4262955b9f690a83405d",
        title="Type restriction of the slot",
    )
    slot_occupant: Optional[InitialOccupantOfTheSlot] = Field(
        None, title="Initial occupant of the slot"
    )
    """
    Tool or component installed in the slot.
    """


class DataSheet(SafetyDataSheet):
    pass


class Tool(Item):
    """
    Item that participates as a utility (almost) unchanged in a process
    """

    type: Optional[Any] = ["Category:OSWe427aafafbac4262955b9f690a83405d"]
    purposes: Optional[List[str]] = Field(None, title="Purpose(s)")
    typical_process: Optional[List[str]] = Field(None, title="Typical Process(es)")
    components: Optional[List[Component]] = Field(None, title="Components")
    """
    Component are permanent parts of a tool (vs. Slots for exchangeable parts).
    """
    slots: Optional[List[Slot]] = Field(None, title="Slot configuration")
    """
    Slots represent spaces for exchangable parts or components of a tool (vs. Components, which are permanent parts). Slot exchange events can be used to document changes on slots. This is the initial slot configuration!
    """
    events: Optional[List[str]] = Field(None, title="Event(s)")


class PhysicalItem(Item):
    """
    Physical item as opposed to intangible item. It can posses properties such as position, geometry, weight, volume , etc.
    """

    type: Optional[Any] = ["Category:OSW37a57741ae2e4dd4b29b1172b6848be8"]
    quantity_statements: Optional[List[Quantity]] = Field(
        None, title="Quantitative statement(s)"
    )
    origin: Optional[List[OtherPhysicalItem]] = Field(None, title="Origin")
    """
    Other physical item(s) that this physical item was derived from.
    """
    type_no: Optional[str] = Field(None, title="Type number")
    """
    Type or model number as specified by the manufacturer
    """
    manufacturer: Optional[str] = Field(None, title="Manufacturer")
    """
    The manufacturer of this item - an organization(al unit).
    """
    data_sheet: Optional[DataSheet] = None
    safety_data_sheet: Optional[SafetyDataSheet] = None
    manual: Optional[Manual] = None
    instructions: Optional[Instructions] = None


class Device(Tool, PhysicalItem):
    """
    A Tool that is a (phyiscal) piece of Hardware.
    """

    responsible_person: Optional[List[str]] = Field(None, title="Responsible Person")
    location: Optional[List[str]] = Field(None, title="Location")
    manufacturer_type_id: Optional[str] = Field(None, title="Manufacturer Type ID")
    """
    Product ID provided by the manufacturer
    """
    manufacturer_type_name: Optional[str] = Field(None, title="Manufacturer Type Name")
    """
    Product name provided by the manufacturer. Often more human friendly than the type id.
    """
    typical_processes: Optional[List[str]] = Field(None, title="Typical Processes")
    organizational_unit: Optional[List[str]] = Field(None, title="Organizational Unit")
    inventory_number: Optional[str] = Field(None, title="Inventory Number")
    risk_assessment: Optional[str] = Field(None, title="Risk Assessment")
    serial_number: Optional[str] = Field(None, title="Serial Number")
    """
    The Serial Number written on the device
    """
    owner: Optional[str] = Field(None, title="Owner")
    accessories: Optional[List[str]] = Field(None, title="Accessories")
    """
    Things that are used together with this device or replacement parts
    """
    type: Optional[Any] = ["Category:OSWf0fe562f422d49c6877490b3dfee2f3f"]
    field_device_type_properties: Optional[str] = Field(
        "visible", alias="_device_type_properties", title="Information from Type"
    )


class Host(Device):
    ip4_address: Optional[List[str]] = Field(None, title="IP4  Addresses")
    network_domain: Optional[List[str]] = Field(None, title="Domains")
    type: Optional[Any] = ["Category:OSW02590972aeba46d7864ed492c0c11384"]


Tool.update_forward_refs()
PhysicalItem.update_forward_refs()
Device.update_forward_refs()
Host.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWc5ed0ed1e33c4b31887c67af25a610c1.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, constr

from opensemantic import OswBaseModel


class Room(Location):
    type: Optional[Any] = ["Category:OSWc5ed0ed1e33c4b31887c67af25a610c1"]
    located_in: Optional[Set[str]] = Field(None, title="Floor")
    usage_type: Optional[Set[str]] = Field(None, title="Room usage type")
    length: Optional[float] = Field(None, title="Length")
    width: Optional[float] = Field(None, title="Width")
    height: Optional[float] = Field(None, title="Height")
    area: Optional[float] = Field(None, title="Area")
    door_width: Optional[float] = Field(None, title="Door width")
    door_height: Optional[float] = Field(None, title="Door height")
    number: Optional[str] = Field(None, title="Number")
    usage: Optional[Set[str]] = Field(None, title="Room usage")
    responsible_person: Optional[Set[str]] = Field(None, title="Responsible person")


Location.update_forward_refs()
Room.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW9ed6b89cc3c7492896570951a5b094d6.json


from datetime import date, time, timedelta
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, conint, constr

from opensemantic import OswBaseModel


class Month(str, Enum):
    january = "january"
    february = "february"
    march = "march"
    april = "april"
    may = "may"
    june = "june"
    july = "july"
    august = "august"
    september = "september"
    october = "october"
    november = "november"
    december = "december"


class Day(str, Enum):
    monday = "monday"
    tuesday = "tuesday"
    wednesday = "wednesday"
    thursday = "thursday"
    friday = "friday"
    saturday = "saturday"
    sunday = "sunday"


class RepeatPattern(OswBaseModel):
    """
    At least one of the following options is required. The repeat pattern is derived from the selected options.
    """

    by_month_day: Optional[List[conint(ge=1, le=31)]] = Field(
        None, title="By day of the month"
    )
    """
    The day of the month at which the event should be held, e.g., 1 for the first day of the month, 31 for the last day of the month.
    """
    by_month: Optional[List[Month]] = Field(None, title="By month")
    """
    The month(s) in which the event should be held.
    """
    by_day: Optional[List[Day]] = Field(None, title="By day of the week")
    """
    The day(s) of the week at which the event should be held.
    """
    by_month_week: Optional[List[conint(ge=1, le=5)]] = Field(
        None, title="By week of the month"
    )
    """
    The week(s) of the month at which the event should be held, e.g., 1 for the first week of the month, 5 for the last week of the month.
    """
    except_dates: Optional[List[date]] = Field(None, title="Excepttions")
    repeat_count: Optional[conint(ge=1)] = Field(1, title="Repeat count")
    schedule_timezone: Optional[str] = Field(
        "Europe/Berlin (CET = UTC+1)", title="Timezone"
    )


class InternalOrExternal(str, Enum):
    internal = "internal"
    external = "external"


class EventWithPeople(Event):
    """
    An event, either local, remote or hybrid. E.g., a meeting or a conference. This element is intended to be used to document events. It is dedicated especially to notes, resolutions and tasks. For recurring events (series), the tasks should be managed there.
    """

    type: Optional[Any] = ["Category:OSW0e084decca6f48a7b023d6b7b2c1452d"]
    allday: Optional[bool] = Field(False, title="All day")
    start_date: Union[str, date] = Field(..., title="Start")
    start_date_min: Optional[str] = Field(None, title="Starts after")
    start_date_max: Optional[str] = Field(None, title="Starts before")
    duration: Optional[time] = Field(None, title="Duration")
    end_date: Optional[Union[str, date]] = Field(None, title="End")
    event_series: Optional[str] = Field("", title="Part of (event series)")
    """
    The event series this event is part of.
    """
    funding: Optional[List[str]] = Field(None, title="Funding")
    """
    Funding (Grant) for the event.
    """
    funding_name: Optional[List[str]] = Field(None, title="Funding (grant no. or name)")
    """
    Name of the funding (Grant) for the event.
    """
    location_name: Optional[str] = Field(None, title="Location (name)")
    url: Optional[str] = Field(None, title="URL")
    """
    Link to the event homepage
    """
    event_classifier: Optional[InternalOrExternal] = Field(
        "", title="Internal or external"
    )
    participants: Optional[Set[str]] = Field([""], title="Participants")
    minutes_taker: Optional[Set[str]] = Field([""], title="Minutes taker")
    organizer: Optional[Set[str]] = Field([""], title="Organizer(s)")
    """
    Organizer(s) of the event, person or organizational unit.
    """
    associated_ou: Optional[Set[str]] = Field(
        [""], title="Associated organizational unit(s)"
    )
    """
    E.g., the organizational unit for which this event is most relevant or whos members are most likely to participate.
    """
    project: Optional[Set[str]] = Field([""], title="Project(s)")
    """
    Project(s) this event is associated with. E,g., the project for which this meeting is held.
    """


class EventSeries(EventWithPeople):
    """
    A recurring event, e.g., a jour fixe, a conference series
    """

    type: Optional[Any] = ["Category:OSWf62d07b325124027b82fbec0a7b852df"]
    series_pattern: RepeatPattern = Field(..., title="Repeat pattern")
    """
    At least one of the following options is required. The repeat pattern is derived from the selected options.
    """


class MeetingSeries(EventSeries):
    """
    A recurring meeting, e.g., a jour fixe
    """

    type: Optional[Any] = ["Category:OSW9ed6b89cc3c7492896570951a5b094d6"]
    series_pattern: Optional[Any] = None


Event.update_forward_refs()
EventWithPeople.update_forward_refs()
EventSeries.update_forward_refs()
MeetingSeries.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWfe72974590fd4e8ba94cd4e8366375e8.json


class Distribution(OswBaseModel):
    download_url: str = Field(..., title="Download URL")


class Data(Item):
    type: Optional[Any] = ["Category:OSW2ac4493f8635481eaf1db961b63c8325"]


class Dataset(Data):
    type: Optional[Any] = ["Category:OSWfe72974590fd4e8ba94cd4e8366375e8"]
    url: Optional[List[str]] = Field(None, title="URL / Websites")
    """
    Landing page(s) that documents the dataset
    """
    themes: Optional[List[str]] = Field(None, title="Themes / Topics")
    """
    Terms to categorizes this dataset
    """
    distributions: Optional[List[Distribution]] = Field(
        None, title="Distributions / Downloads"
    )
    """
    Actual download options for this dataset
    """
    data_format: Optional[List[str]] = Field(None, min_items=1, title="Data format")
    """
    Gives a structure to define specific formats of data.
    """
    dataset_schema: Optional[List[str]] = Field(
        None, min_items=1, title="Dataset schema"
    )


Data.update_forward_refs()
Dataset.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWb8b6278763d54b0784eea9d3b3d183a4.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class Group(OrganizationalSubUnit):
    manager: Optional[Set[str]] = Field(None, title="Head")
    superordinate_ou: Optional[Set[str]] = Field(None)
    """
    Faculty, institute, department or organization, the group belongs to.
    """
    type: Optional[Any] = ["Category:OSWb8b6278763d54b0784eea9d3b3d183a4"]


OrganizationalUnit.update_forward_refs()
OrganizationalSubUnit.update_forward_refs()
Group.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW712583f2479944deb2546b77cf860dda.json


CreativeWork.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW490e38f9764f4408a244869a0ea98e7c.json


class StatusEnumeration(Enumeration):
    """
    Lists or enumerations dealing with status types.
    """

    type: Optional[Any] = ["Category:OSW2c32802be59040248c85eda3479d484c"]


class ProjectStatus(StatusEnumeration):
    """
    Status for projects and project applications
    """

    type: Optional[Any] = ["Category:OSW490e38f9764f4408a244869a0ea98e7c"]


IntangibleItem.update_forward_refs()
Enumeration.update_forward_refs()
StatusEnumeration.update_forward_refs()
ProjectStatus.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW973a5cd08ea14524a57089f0b3c9c6ff.json


class Requirement(Item):
    """
    A functional or non-functional requirement
    """

    type: Optional[Any] = ["Category:OSW973a5cd08ea14524a57089f0b3c9c6ff"]
    requirement_category: Optional[str] = Field(None, title="Requirement category")
    prio: Optional[str] = Field(None, title="Priority")
    dependencies: Optional[List[str]] = Field(None, title="Dependencies")
    """
    Strict dependency from another requirement
    """
    related_to: Optional[List[str]] = Field(None, title="Related to")
    """
    Loose connection to another requirement
    """


Requirement.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWae92be81cdb34d22844d4791ef790d93.json


class AreaUsageType(Item):
    din277_label: Optional[List[str]] = Field(None, title="DIN 277 label")
    type: Optional[Any] = ["Category:OSWae92be81cdb34d22844d4791ef790d93"]


AreaUsageType.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW5427361692374c8eaa6bd3733b92d343.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class PostalAddressModel(OswBaseModel):
    uuid: UUID
    country: Optional[str] = Field(None, title="Country")
    country_name: Optional[str] = Field(None, title="Country (text)")
    state: Optional[str] = Field(None, title="State")
    region: Optional[str] = Field(None, title="Region")
    post_office_box_no: Optional[str] = Field(None, title="PO box number")
    postal_code: Optional[str] = Field(None, title="Postal code")
    city: Optional[str] = Field(None, title="City")
    city_name: Optional[str] = Field(None, title="City (text)")
    street_name: Optional[str] = Field(None, title="Street")
    house_no: Optional[str] = Field(None, title="House number")
    address_supplement: Optional[str] = Field(None, title="Address supplement")
    addressee: Optional[str] = Field(None, title="Addressee")
    """
    Title line of the address in case different from organization name
    """


class Institute(OrganizationalSubUnit):
    type: Optional[Any] = ["Category:OSW5427361692374c8eaa6bd3733b92d343"]
    image: Optional[Any] = Field(None, title="Logo")
    manager: Optional[Any] = Field(None, title="Head")
    member_of: Optional[Set[str]] = Field(None, title="Member of")
    """
    The organization this organization is a member of.
    """
    postal_address: Optional[PostalAddress] = Field(None, title="Postal address")
    site: Optional[Set[str]] = Field(None, title="Site")
    superordinate_ou: Optional[Set[str]] = Field(None)
    """
    Faculty or organization, the institute belongs to.
    """


OrganizationalUnit.update_forward_refs()
OrganizationalSubUnit.update_forward_refs()
Institute.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWd845b96813a344458f140e48c4d063fd.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, Field, constr

from opensemantic import OswBaseModel


class Supply(OswBaseModel):
    supplier: Optional[str] = Field(None, title="Supplier")
    article_no: Optional[str] = Field(None, title="Article no.")
    """
    Article number in the catalogue of the supplier
    """
    comment: Optional[str] = Field(None, title="Comment")
    """
    Comment on the supply of the material
    """
    link: Optional[AnyUrl] = Field(None, title="Link")
    """
    Link to the article in the online catalogue of the supplier
    """


class NameItem(OswBaseModel):
    text: constr(min_length=1) = Field(..., title="Text")
    lang: Optional[LangCode] = Field(LangCode.en, title="Lang code")


class Attribute(OswBaseModel):
    attribute_name: List[NameItem] = Field(..., min_items=1, title="Name")
    quantity_prop: Quantity


class Category(Entity):
    type: Optional[List[str]] = Field(
        ["Category:Category"], min_items=1, title="Types/Categories"
    )
    rdf_class: Optional[Set[str]] = Field(None, title="RDF type(s) of the category")
    """
    Declares additional type(s) for this category, e.g., to state that this category has the same meaning as a term in a controlled vocabulary or ontology. This property is synonymous to the schema:additionalType and owl:sameAs. The default syntax is ontology:TermName. The ontology prefix has to be defined in the @context of the Category, the meta category or any of the parent meta categories. The term name has to be a valid identifier in the ontology.
    """
    instance_rdf_type: Optional[Set[str]] = Field(
        None, title="RDF type(s) of instances"
    )
    """
    References a class/type/category in another ontology to describe the instances of this category. Typically a prefix, representing the resolvable URI of an ontology and an id from the namespace of said ontology, separated by colon, e.g., "schema:Person"
    """
    subclass_of: Optional[List[str]] = Field(
        ["Category:Entity"], title="Supercategories"
    )
    metaclass: Optional[List[str]] = Field(None, title="Metaclasses/-categories")
    utf8_icon: Optional[List[constr(min_length=1, max_length=2)]] = Field(
        None, title="UTF8-Icons"
    )
    """
    see https://www.unicode.org/cldr/charts/latest/annotations/romance.html
    """


class MetaPhysicalItemCategory(Category):
    """
    Helps to create physical items
    """

    type: Optional[Any] = ["Category:OSWca99a9bb9ad24386b222d18a73c2af5e"]
    type_no: Optional[str] = Field(None, title="Type number")
    """
    Type or model number as specified by the manufacturer
    """
    manufacturer: Optional[str] = Field(None, title="Manufacturer")
    """
    The manufacturer of this item - an organization(al unit).
    """
    data_sheet: Optional[DataSheet] = None
    safety_data_sheet: Optional[SafetyDataSheet] = None
    instructions: Optional[Instructions] = None
    manual: Optional[Manual] = None
    supply: Optional[List[Supply]] = Field(None, title="Supply")
    """
    Supply of the material with supplier, article no. and link
    """
    specifications: Optional[List[Attribute]] = Field(
        None, title="Specification of technical properties"
    )
    constituents: Optional[List[Item]] = Field(None, title="Constituents")
    """
    Components or parts
    """


class MetaDeviceCategory(MetaPhysicalItemCategory):
    """
    Helps Creating DeviceCategories
    """

    type: Optional[Any] = ["Category:OSWd845b96813a344458f140e48c4d063fd"]
    typical_processes: Optional[List[str]] = Field(None, title="Typical Processes")
    manufacturer_type_id: Optional[str] = Field(None, title="Manufacturer Type ID")
    """
    Product ID provided by the manufacturer
    """
    manufacturer_type_name: Optional[str] = Field(None, title="Manufacturer Type Name")
    """
    Product name provided by the manufacturer. Often more human friendly than the type id.
    """


# generated by datamodel-codegen:
#   filename:  OSWe2c50b1034684c1b9a5c21ad371d6381.json


class HowTo(CreativeWork):
    """
    Instructions that explain how to achieve a result by performing a sequence of steps.
    """

    type: Optional[Any] = ["Category:OSWe2c50b1034684c1b9a5c21ad371d6381"]
    rdf_type: Optional[List[str]] = ["schema:HowTo"]


CreativeWork.update_forward_refs()
HowTo.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW0e084decca6f48a7b023d6b7b2c1452d.json


from datetime import date, time, timedelta
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, constr

from opensemantic import OswBaseModel

Event.update_forward_refs()
EventWithPeople.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW25bc4daf97644737a76434b88e1d5b21.json


IntangibleItem.update_forward_refs()
Grant.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW8cb1935054464c99836d3bc0573a11cc.json


class IssueLabel(Enumeration):
    type: Optional[Any] = ["Category:OSW8cb1935054464c99836d3bc0573a11cc"]


IntangibleItem.update_forward_refs()
Enumeration.update_forward_refs()
IssueLabel.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWab60f9a227954ee0be92344ff6272420.json


class State(AdministrativeArea):
    """
    A state or province of a country.
    """

    type: Optional[Any] = ["Category:OSWab60f9a227954ee0be92344ff6272420"]
    rdf_type: List[str]


Place.update_forward_refs()
AdministrativeArea.update_forward_refs()
State.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW6c4212f1a39342be963d2b9efd19c5c2.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, constr

from opensemantic import OswBaseModel


class Floor(Location):
    type: Optional[Any] = ["Category:OSW6c4212f1a39342be963d2b9efd19c5c2"]
    located_in: Optional[Set[str]] = Field(None, title="Building")


Location.update_forward_refs()
Floor.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWf62d07b325124027b82fbec0a7b852df.json


from datetime import date, time, timedelta
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, conint, constr

from opensemantic import OswBaseModel

Event.update_forward_refs()
EventWithPeople.update_forward_refs()
EventSeries.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW77e749fc598341ac8b6d2fff21574058.json


class Software(Tool):
    type: Optional[Any] = ["Category:OSW77e749fc598341ac8b6d2fff21574058"]
    repository: Optional[List[str]] = Field(None, title="Repositories")
    readme: Optional[str] = Field(None, title="ReadMe")


Tool.update_forward_refs()
Software.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWac9f0e49d8024804bd7d77058322a3fe.json


class RoomUsage(Item):
    din277_label: Optional[List[str]] = Field(None, title="DIN 277 label")
    type: Optional[Any] = ["Category:OSWac9f0e49d8024804bd7d77058322a3fe"]


RoomUsage.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWf0fe562f422d49c6877490b3dfee2f3f.json


Tool.update_forward_refs()
PhysicalItem.update_forward_refs()
Device.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW81e9e22e7d934382a6a56df7d3736957.json


class Step(OswBaseModel):
    field_type: Optional[str] = Field("schema:HowToStep", alias="@type")
    step_name: Optional[str] = Field(None, title="Name")
    step_description: Optional[str] = Field(None, title="Description")


class Recipe(HowTo):
    """
    Preparation instructions, e.g. for a dish
    """

    type: Optional[Any] = ["Category:OSW81e9e22e7d934382a6a56df7d3736957"]
    output_count: Optional[int] = Field(None, title="Yield")
    preparation_duration: Optional[str] = Field(None, title="Preparation time")
    processing_duration: Optional[str] = Field(None, title="Processing time")
    total_duration: Optional[str] = Field(None, title="Total duration")
    input: Optional[List[str]] = Field(None, title="Ingredients")
    steps: Optional[List[Step]] = Field(None, title="Steps")


CreativeWork.update_forward_refs()
HowTo.update_forward_refs()
Recipe.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWd22af0aa3b00462a9da9b509538e8926.json


from datetime import date


class FundingCall(IntangibleItem):
    """
    Announcement of a funding opportunity with details of the funding conditions
    """

    type: Optional[Any] = ["Category:OSWd22af0aa3b00462a9da9b509538e8926"]
    submission_deadline: Optional[date] = Field(None, title="Submission deadline")
    urls: Optional[str] = Field(None, title="Call text (url)")


IntangibleItem.update_forward_refs()
FundingCall.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW72eae3c8f41f4a22a94dbc01974ed404.json


class WebService(Software):
    type: Optional[Any] = ["Category:OSW8c56fd1e858f499da801691c5f2b7309"]
    hosted_software: Optional[List[str]] = Field(
        None, min_items=1, title="Hosted Software"
    )
    host: Optional[List[str]] = Field(None, min_items=1, title="Hosts")
    schema_: Optional[str] = Field(None, alias="schema", title="Schema")
    """
    e.g. http, https
    """
    domain: Optional[str] = Field(None, title="Domain")
    network_port: Optional[List[int]] = Field(None, title="Ports")
    url_path: Optional[str] = Field(None, title="URL Path")
    url: Optional[str] = Field(None, title="URL")
    version: Optional[str] = Field(None, title="Version")
    """
    Version of the hosted software
    """


class PrefectFlow(WebService):
    """
    Part of a Prefect Workflow Environment
    """

    type: Optional[Any] = ["Category:OSW72eae3c8f41f4a22a94dbc01974ed404"]
    flow_id: Optional[str] = Field(None, title="Prefect Flow UUID")
    """
    The unique prefect flow id
    """


Tool.update_forward_refs()
Software.update_forward_refs()
WebService.update_forward_refs()
PrefectFlow.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW5f4a3751d23e482d80fb0b72dcd6bc31.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class Corporation(Organization):
    type: Optional[Any] = ["Category:OSW5f4a3751d23e482d80fb0b72dcd6bc31"]


OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
Corporation.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW1969007d5acf40539642877659a02c23.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel

OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW5efde23b1d8c4e1c864ef039cb0616ed.json


class PersonRole(Item):
    ad_label: Optional[List[str]] = Field(None, title="AD label")
    """
    Label of the role in the Active Directory
    """
    miri_label: Optional[List[str]] = Field(None, title="MIRI label")
    """
    Label of the role in MIRI and eDirectory
    """
    miri_id: Optional[List[str]] = Field(None, title="MIRI id")
    """
    ID of the role in MIRI
    """
    miri_label_orig: Optional[List[str]] = Field(None, title="Original MIRI label")
    """
    Original label of the role in MIRI
    """
    type: Optional[Any] = ["Category:OSW5efde23b1d8c4e1c864ef039cb0616ed"]


PersonRole.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW5c7c84f0bfbe4347ba7fbe7b346fd106.json


from datetime import date, time, timedelta
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, constr

from opensemantic import OswBaseModel


class Meeting(EventWithPeople):
    """
    A meeting, either local, remote or hybrid. This element is intended to be used to document meetings. It is dedicated especially to notes, resolutions and tasks. For recurring meetings (series), the tasks should be managed there
    """

    type: Optional[Any] = ["Category:OSW5c7c84f0bfbe4347ba7fbe7b346fd106"]


Event.update_forward_refs()
EventWithPeople.update_forward_refs()
Meeting.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW3cb8cef2225e403092f098f99bc4c472.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel

OrganizationalUnit.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW07a0faef5be94b788514a2dd5dca20bf.json


class BuildingFunction(Item):
    type: Optional[Any] = ["Category:OSW07a0faef5be94b788514a2dd5dca20bf"]


BuildingFunction.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW8c56fd1e858f499da801691c5f2b7309.json


Tool.update_forward_refs()
Software.update_forward_refs()
WebService.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW789dcd084860478dbc60361a2da7c823.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class ResearchOrganization(Organization):
    """
    A Research Organization (e.g. scientific institute, research company).
    """

    type: Optional[Any] = ["Category:OSW789dcd084860478dbc60361a2da7c823"]


OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
ResearchOrganization.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW473d7a1ed48544d1be83b258b5810948.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, constr

from opensemantic import OswBaseModel


class Site(Location):
    """
    A site is a location or place where a particular event, activity, or object exists or is situated.
    """

    type: Optional[Any] = ["Category:OSW473d7a1ed48544d1be83b258b5810948"]


Location.update_forward_refs()
Site.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWd7085ef89b0e4a69ac4f2d28bda2d2c0.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class Foundation(NonGovernmentalOrganization):
    type: Optional[Any] = ["Category:OSWd7085ef89b0e4a69ac4f2d28bda2d2c0"]


OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
NonGovernmentalOrganization.update_forward_refs()
Foundation.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW92cc6b1a2e6b4bb7bad470dfdcfdaf26.json


CreativeWork.update_forward_refs()
Article.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWd9aa0bca9b0040d8af6f5c091bf9eec7.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class User(Person):
    """
    A person who has a user ID.
    """

    username: str = Field(..., title="Username")
    """
    Organization user ID
    """
    room: Optional[Set[str]] = Field(None, title="Room(s)")
    """
    Office
    """
    superior: Optional[Set[str]] = Field(None, title="Superior(s)")
    """
    Direct superior(s)
    """
    employment_contract_status: Optional[str] = Field(
        "Item:OSW62770459451644f3841c502df8a5cb1d",
        title="Status of the employment contract",
    )
    """
    Whether a user has an active employment contract (stil employed) or not
    """
    type: Optional[Any] = ["Category:OSWd9aa0bca9b0040d8af6f5c091bf9eec7"]


Person.update_forward_refs()
User.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSWfa0d5710bc0f45819b61b65fc4fd9656.json


from enum import Enum
from typing import Any, Dict, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, constr

from opensemantic import OswBaseModel

Process.update_forward_refs()
StrictParticipantsProcess.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW51653bb12c534c0b92a255b0b5ca3984.json


class Function(Enumeration):
    type: Optional[Any] = ["Category:OSW51653bb12c534c0b92a255b0b5ca3984"]


IntangibleItem.update_forward_refs()
Enumeration.update_forward_refs()
Function.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW781ad17c7eef4161ade5a7b690aca6b5.json


class EmploymentStatus(StatusEnumeration):
    """
    Describes the status of an employment (contract)
    """

    type: Optional[Any] = ["Category:OSW781ad17c7eef4161ade5a7b690aca6b5"]


IntangibleItem.update_forward_refs()
Enumeration.update_forward_refs()
StatusEnumeration.update_forward_refs()
EmploymentStatus.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW9d63242855e44ab8b26d6ad9792a67b3.json


from datetime import date
from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel

OrganizationalUnit.update_forward_refs()
Organization.update_forward_refs()
EducationalOrganization.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW90640829797c4b859548a796f8f6dca6.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import AnyUrl, EmailStr, Field, constr

from opensemantic import OswBaseModel


class Externalperson(Person):
    type: Optional[Any] = ["Category:OSW90640829797c4b859548a796f8f6dca6"]
    contact_person: Optional[Set[str]] = Field(
        [""], min_items=1, title="Contact person"
    )
    """
    A person in contact with the external person, who has already an entry in the system.
    """


Person.update_forward_refs()
Externalperson.update_forward_refs()
# generated by datamodel-codegen:
#   filename:  OSW3d238d05316e45a4ac95a11d7b24e36b.json


from enum import Enum
from typing import Any, List, Optional, Set, Union
from uuid import UUID

from pydantic.v1 import Field, confloat, constr

from opensemantic import OswBaseModel

Location.update_forward_refs()


# from pydantic.v1 import BaseModel

# class WebService(BaseModel):
#     host: str
#     port: int

# class Database(BaseModel):
#     name: str
#     database_type: str

# db = Database(host="localhost", port=5432, name="test", database_type="Item:OSW12312")

# db.database_type.name

Metadata-Version: 2.4
Name: nombre-normalizer
Version: 0.0.1
Summary: Normalizador de nombres y apellidos en espa√±ol
Home-page: https://github.com/tuusuario/nombre-normalizer
Author: Mon Maldonado
Author-email: pigmonchu@gmail.com
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Text Processing :: Linguistic
Classifier: Topic :: Utilities
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: numpy==2.2.6
Requires-Dist: pandas==2.2.3
Requires-Dist: python-dateutil==2.9.0.post0
Requires-Dist: pytz==2025.2
Requires-Dist: six==1.17.0
Requires-Dist: tzdata==2025.2
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.9; extra == "dev"
Requires-Dist: mypy>=0.910; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Normalizador de Nombres y Apellidos en Espa√±ol

Un paquete Python especializado en normalizar nombres y apellidos en espa√±ol, manejando correctamente las part√≠culas, la separaci√≥n nombre/apellido y las reglas de capitalizaci√≥n del idioma espa√±ol.

## ‚ú® Caracter√≠sticas

- **Separaci√≥n inteligente** de nombres y apellidos usando heur√≠sticas avanzadas
- **Manejo correcto de part√≠culas** (de, del, de la, van, etc.) en min√∫scula
- **Capitalizaci√≥n apropiada** respetando las reglas del espa√±ol
- **Detecci√≥n de casos problem√°ticos** para revisi√≥n manual
- **Compatible con pandas** para procesamiento masivo de datos
- **Interfaz de l√≠nea de comandos** para uso directo
- **Diccionarios integrados** de nombres y apellidos espa√±oles/latinoamericanos

## üöÄ Instalaci√≥n

### Desde PyPI (recomendado)
```bash
pip install nombre-normalizer
```

### Desde el c√≥digo fuente
```bash
git clone https://github.com/usuario/nombre-normalizer.git
cd nombre-normalizer
pip install -e .
```

### Para desarrollo
```bash
git clone https://github.com/usuario/nombre-normalizer.git
cd nombre-normalizer
pip install -e ".[dev]"
```

## üìñ Uso

### Uso b√°sico

```python
from nombre_normalizer import normalizar_nombre_simple

# Ejemplo simple
resultado = normalizar_nombre_simple("juan carlos garcia de la torre")
print(resultado['nombres'])    # "Juan Carlos"
print(resultado['apellidos'])  # "Garc√≠a de la Torre"
print(resultado['es_problematico'])  # False
```

### Uso avanzado con clase

```python
from nombre_normalizer import NombreNormalizer

# Crear instancia del normalizador
normalizador = NombreNormalizer()

# Normalizar un registro
resultado = normalizador.normalizar_registro("maria jose lopez")
print(f"Nombres: {resultado['nombres']}")
print(f"Apellidos: {resultado['apellidos']}")

# Obtener casos problem√°ticos
casos_problema = normalizador.obtener_casos_problema()
```

### Procesamiento de DataFrames

```python
import pandas as pd
from nombre_normalizer import NombreNormalizer

# Cargar datos
df = pd.read_csv('personas.csv')

# Procesar DataFrame
normalizador = NombreNormalizer()
df_normalizado = normalizador.procesar_dataframe(
    df, 
    col_nombre='nombre_completo',
    col_apellido='apellidos'  # Opcional
)

# Ver resultados
print(df_normalizado[['nombres_norm', 'apellidos_norm', 'es_problematico']])

# Exportar casos problem√°ticos
normalizador.exportar_casos_problema('casos_revisar.csv')
```

### Procesamiento de archivos CSV

```python
from nombre_normalizer import procesar_csv

# Procesar archivo completo
procesar_csv(
    'datos_originales.csv',
    'datos_normalizados.csv',
    col_nombre='nombre',
    col_apellido='apellido'
)
```

## üñ•Ô∏è Interfaz de l√≠nea de comandos

El paquete incluye una herramienta de l√≠nea de comandos para procesamiento directo:

```bash
# Uso b√°sico
nombre-normalizer datos.csv -o resultado.csv -n nombre

# Con columna de apellidos separada
nombre-normalizer personas.csv -o limpio.csv -n nombre -a apellidos

# Exportar casos problem√°ticos
nombre-normalizer datos.csv -o resultado.csv -n "nombre completo" --problemas

# Con informaci√≥n detallada
nombre-normalizer datos.csv -o resultado.csv -n nombre --verbose
```

### Opciones de la CLI

- `archivo_entrada`: Archivo CSV de entrada (requerido)
- `-o, --output`: Archivo CSV de salida (requerido)
- `-n, --nombre`: Nombre de la columna que contiene los nombres (requerido)
- `-a, --apellido`: Nombre de la columna que contiene los apellidos (opcional)
- `--problemas`: Exportar casos problem√°ticos a archivo separado
- `--encoding`: Codificaci√≥n del archivo CSV (default: utf-8)
- `-v, --verbose`: Mostrar informaci√≥n detallada del procesamiento

## üìä Ejemplos de transformaciones

| Entrada | Nombres | Apellidos |
|---------|---------|-----------|
| `"juan carlos garcia de la torre"` | `"Juan Carlos"` | `"Garc√≠a de la Torre"` |
| `"maria jose lopez"` | `"Mar√≠a Jos√©"` | `"L√≥pez"` |
| `"pedro de la cruz"` | `"Pedro"` | `"de la Cruz"` |
| `"ana maria santos del rio"` | `"Ana Mar√≠a"` | `"Santos del R√≠o"` |
| `"jose luis van der berg"` | `"Jos√© Luis"` | `"van Der Berg"` |

## üîß Configuraci√≥n avanzada

### Personalizar part√≠culas

```python
normalizador = NombreNormalizer()

# Agregar part√≠culas personalizadas
normalizador.particulas.add('vom')
normalizador.particulas.add('zu')

# Procesar con nuevas part√≠culas
resultado = normalizador.normalizar_registro("hans vom berg")
```

### Manejo de casos problem√°ticos

```python
normalizador = NombreNormalizer()

# Procesar datos
df_resultado = normalizador.procesar_dataframe(df, 'nombre')

# Revisar casos problem√°ticos
casos_problema = normalizador.obtener_casos_problema()
for caso in casos_problema:
    print(f"Original: {caso['original_nombre']}")
    print(f"Procesado: {caso['nombres']} | {caso['apellidos']}")
    print("---")

# Exportar para revisi√≥n manual
normalizador.exportar_casos_problema('revisar_manualmente.csv')
```

## üß™ Testing

El proyecto incluye una suite completa de tests:

```bash
# Ejecutar todos los tests
python -m pytest tests/

# Con cobertura
python -m pytest tests/ --cov=nombre_normalizer

# Tests espec√≠ficos
python -m pytest tests/test_normalizer.py::TestNombreNormalizer::test_capitalizar_palabra
```

## üìÅ Estructura del proyecto

```
nombre-normalizer/
‚îú‚îÄ‚îÄ nombre_normalizer/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py          # Inicializaci√≥n del paquete
‚îÇ   ‚îú‚îÄ‚îÄ nombre_normalizer.py # M√≥dulo principal
‚îÇ   ‚îî‚îÄ‚îÄ cli.py              # Interfaz de l√≠nea de comandos
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îî‚îÄ‚îÄ test_normalizer.py  # Tests unitarios
‚îú‚îÄ‚îÄ setup.py                # Configuraci√≥n del paquete
‚îú‚îÄ‚îÄ requirements.txt        # Dependencias
‚îú‚îÄ‚îÄ README.md              # Este archivo
‚îî‚îÄ‚îÄ LICENSE                # Licencia MIT
```

## ü§ù Contribuir

Las contribuciones son bienvenidas. Para contribuir:

1. Fork el proyecto
2. Crea una rama para tu feature (`git checkout -b feature/AmazingFeature`)
3. Commit tus cambios (`git commit -m 'Add some AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abre un Pull Request

### Desarrollo local

```bash
# Clonar repositorio
git clone https://github.com/usuario/nombre-normalizer.git
cd nombre-normalizer

# Instalar en modo desarrollo
pip install -e ".[dev]"

# Ejecutar tests
python -m pytest

# Formatear c√≥digo
black nombre_normalizer/
flake8 nombre_normalizer/
```

## üìã Limitaciones conocidas

- **Nombres extranjeros**: El algoritmo est√° optimizado para nombres espa√±oles/latinoamericanos
- **Casos ambiguos**: Algunos casos requieren revisi√≥n manual (se marcan como problem√°ticos)
- **Contexto cultural**: Las reglas pueden no aplicar perfectamente a todas las variantes regionales

## üîÆ Roadmap

- [ ] Soporte para m√°s idiomas (catal√°n, euskera, gallego)
- [ ] API REST para integraci√≥n con otros sistemas
- [ ] Interfaz web para uso interactivo
- [ ] Mejora de heur√≠sticas con machine learning
- [ ] Soporte para t√≠tulos nobiliarios y acad√©micos

## üìÑ Licencia

Este proyecto est√° licenciado bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para detalles.

## üë®‚Äçüíª Autor

**Tu Nombre** - [tu.email@ejemplo.com](mailto:tu.email@ejemplo.com)

Enlace del proyecto: [https://github.com/usuario/nombre-normalizer](https://github.com/usuario/nombre-normalizer)

## üôè Agradecimientos

- Inspirado en las necesidades reales de procesamiento de datos en espa√±ol
- Agradecimientos a la comunidad de Python por las herramientas utilizadas
- Basado en las reglas ortogr√°ficas de la Real Academia Espa√±ola

# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class SystemSettings(BaseModel):
    """
    SystemSettings
    """  # noqa: E501

    id: StrictInt
    enable_deduplication: Optional[StrictBool] = Field(
        default=None,
        description='With this setting turned on, DefectDojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, DefectDojo marks the recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.',
    )
    delete_duplicates: Optional[StrictBool] = Field(
        default=None, description='Requires next setting: maximum number of duplicates to retain.'
    )
    max_dupes: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None,
        description='When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.',
    )
    email_from: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    enable_jira: Optional[StrictBool] = None
    enable_jira_web_hook: Optional[StrictBool] = Field(
        default=None,
        description='Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.',
    )
    disable_jira_webhook_secret: Optional[StrictBool] = Field(
        default=None, description='Allows incoming requests without a secret (discouraged legacy behaviour)'
    )
    jira_webhook_secret: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(
        default=None, description='Secret needed in URL for incoming JIRA Webhook'
    )
    jira_minimum_severity: Optional[StrictStr] = Field(
        default=None,
        description='* `Critical` - Critical * `High` - High * `Medium` - Medium * `Low` - Low * `Info` - Info',
    )
    jira_labels: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description='JIRA issue labels space seperated'
    )
    add_vulnerability_id_to_jira_label: Optional[StrictBool] = None
    enable_github: Optional[StrictBool] = None
    enable_slack_notifications: Optional[StrictBool] = None
    slack_channel: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description='Optional. Needed if you want to send global notifications.'
    )
    slack_token: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description='Token required for interacting with Slack. Get one at https://api.slack.com/tokens'
    )
    slack_username: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description='Optional. Will take your bot name otherwise.'
    )
    enable_msteams_notifications: Optional[StrictBool] = None
    msteams_url: Optional[Annotated[str, Field(strict=True, max_length=400)]] = Field(
        default=None, description='The full URL of the incoming webhook'
    )
    enable_mail_notifications: Optional[StrictBool] = None
    mail_notifications_to: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    enable_webhooks_notifications: Optional[StrictBool] = None
    webhooks_notifications_timeout: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None, description='How many seconds will DefectDojo waits for response from webhook endpoint'
    )
    enforce_verified_status: Optional[StrictBool] = Field(
        default=None,
        description='When enabled, features such as product grading, jira integration, metrics, and reports will only interact with verified findings. This setting will override individually scoped verified toggles.',
    )
    enforce_verified_status_jira: Optional[StrictBool] = Field(
        default=None, description='When enabled, findings must have a verified status to be pushed to jira.'
    )
    enforce_verified_status_product_grading: Optional[StrictBool] = Field(
        default=None,
        description="When enabled, findings must have a verified status to be considered as part of a product's grading.",
    )
    enforce_verified_status_metrics: Optional[StrictBool] = Field(
        default=None,
        description='When enabled, findings must have a verified status to be counted in metric calculations, be included in reports, and filters.',
    )
    false_positive_history: Optional[StrictBool] = Field(
        default=None,
        description="(EXPERIMENTAL) DefectDojo will automatically mark the finding as a false positive if an equal finding (according to its dedupe algorithm) has been previously marked as a false positive on the same product. ATTENTION: Although the deduplication algorithm is used to determine if a finding should be marked as a false positive, this feature will not work if deduplication is enabled since it doesn't make sense to use both.",
    )
    retroactive_false_positive_history: Optional[StrictBool] = Field(
        default=None,
        description='(EXPERIMENTAL) FP History will also retroactively mark/unmark all existing equal findings in the same product as a false positives. Only works if the False Positive History feature is also enabled.',
    )
    url_prefix: Optional[Annotated[str, Field(strict=True, max_length=300)]] = Field(
        default=None, description="URL prefix if DefectDojo is installed in it's own virtual subdirectory."
    )
    team_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    time_zone: Optional[StrictStr] = Field(
        default=None,
        description='* `Africa/Abidjan` - Africa/Abidjan * `Africa/Accra` - Africa/Accra * `Africa/Addis_Ababa` - Africa/Addis_Ababa * `Africa/Algiers` - Africa/Algiers * `Africa/Asmara` - Africa/Asmara * `Africa/Asmera` - Africa/Asmera * `Africa/Bamako` - Africa/Bamako * `Africa/Bangui` - Africa/Bangui * `Africa/Banjul` - Africa/Banjul * `Africa/Bissau` - Africa/Bissau * `Africa/Blantyre` - Africa/Blantyre * `Africa/Brazzaville` - Africa/Brazzaville * `Africa/Bujumbura` - Africa/Bujumbura * `Africa/Cairo` - Africa/Cairo * `Africa/Casablanca` - Africa/Casablanca * `Africa/Ceuta` - Africa/Ceuta * `Africa/Conakry` - Africa/Conakry * `Africa/Dakar` - Africa/Dakar * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam * `Africa/Djibouti` - Africa/Djibouti * `Africa/Douala` - Africa/Douala * `Africa/El_Aaiun` - Africa/El_Aaiun * `Africa/Freetown` - Africa/Freetown * `Africa/Gaborone` - Africa/Gaborone * `Africa/Harare` - Africa/Harare * `Africa/Johannesburg` - Africa/Johannesburg * `Africa/Juba` - Africa/Juba * `Africa/Kampala` - Africa/Kampala * `Africa/Khartoum` - Africa/Khartoum * `Africa/Kigali` - Africa/Kigali * `Africa/Kinshasa` - Africa/Kinshasa * `Africa/Lagos` - Africa/Lagos * `Africa/Libreville` - Africa/Libreville * `Africa/Lome` - Africa/Lome * `Africa/Luanda` - Africa/Luanda * `Africa/Lubumbashi` - Africa/Lubumbashi * `Africa/Lusaka` - Africa/Lusaka * `Africa/Malabo` - Africa/Malabo * `Africa/Maputo` - Africa/Maputo * `Africa/Maseru` - Africa/Maseru * `Africa/Mbabane` - Africa/Mbabane * `Africa/Mogadishu` - Africa/Mogadishu * `Africa/Monrovia` - Africa/Monrovia * `Africa/Nairobi` - Africa/Nairobi * `Africa/Ndjamena` - Africa/Ndjamena * `Africa/Niamey` - Africa/Niamey * `Africa/Nouakchott` - Africa/Nouakchott * `Africa/Ouagadougou` - Africa/Ouagadougou * `Africa/Porto-Novo` - Africa/Porto-Novo * `Africa/Sao_Tome` - Africa/Sao_Tome * `Africa/Timbuktu` - Africa/Timbuktu * `Africa/Tripoli` - Africa/Tripoli * `Africa/Tunis` - Africa/Tunis * `Africa/Windhoek` - Africa/Windhoek * `America/Adak` - America/Adak * `America/Anchorage` - America/Anchorage * `America/Anguilla` - America/Anguilla * `America/Antigua` - America/Antigua * `America/Araguaina` - America/Araguaina * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires * `America/Argentina/Catamarca` - America/Argentina/Catamarca * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia * `America/Argentina/Cordoba` - America/Argentina/Cordoba * `America/Argentina/Jujuy` - America/Argentina/Jujuy * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja * `America/Argentina/Mendoza` - America/Argentina/Mendoza * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos * `America/Argentina/Salta` - America/Argentina/Salta * `America/Argentina/San_Juan` - America/Argentina/San_Juan * `America/Argentina/San_Luis` - America/Argentina/San_Luis * `America/Argentina/Tucuman` - America/Argentina/Tucuman * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia * `America/Aruba` - America/Aruba * `America/Asuncion` - America/Asuncion * `America/Atikokan` - America/Atikokan * `America/Atka` - America/Atka * `America/Bahia` - America/Bahia * `America/Bahia_Banderas` - America/Bahia_Banderas * `America/Barbados` - America/Barbados * `America/Belem` - America/Belem * `America/Belize` - America/Belize * `America/Blanc-Sablon` - America/Blanc-Sablon * `America/Boa_Vista` - America/Boa_Vista * `America/Bogota` - America/Bogota * `America/Boise` - America/Boise * `America/Buenos_Aires` - America/Buenos_Aires * `America/Cambridge_Bay` - America/Cambridge_Bay * `America/Campo_Grande` - America/Campo_Grande * `America/Cancun` - America/Cancun * `America/Caracas` - America/Caracas * `America/Catamarca` - America/Catamarca * `America/Cayenne` - America/Cayenne * `America/Cayman` - America/Cayman * `America/Chicago` - America/Chicago * `America/Chihuahua` - America/Chihuahua * `America/Ciudad_Juarez` - America/Ciudad_Juarez * `America/Coral_Harbour` - America/Coral_Harbour * `America/Cordoba` - America/Cordoba * `America/Costa_Rica` - America/Costa_Rica * `America/Creston` - America/Creston * `America/Cuiaba` - America/Cuiaba * `America/Curacao` - America/Curacao * `America/Danmarkshavn` - America/Danmarkshavn * `America/Dawson` - America/Dawson * `America/Dawson_Creek` - America/Dawson_Creek * `America/Denver` - America/Denver * `America/Detroit` - America/Detroit * `America/Dominica` - America/Dominica * `America/Edmonton` - America/Edmonton * `America/Eirunepe` - America/Eirunepe * `America/El_Salvador` - America/El_Salvador * `America/Ensenada` - America/Ensenada * `America/Fort_Nelson` - America/Fort_Nelson * `America/Fort_Wayne` - America/Fort_Wayne * `America/Fortaleza` - America/Fortaleza * `America/Glace_Bay` - America/Glace_Bay * `America/Godthab` - America/Godthab * `America/Goose_Bay` - America/Goose_Bay * `America/Grand_Turk` - America/Grand_Turk * `America/Grenada` - America/Grenada * `America/Guadeloupe` - America/Guadeloupe * `America/Guatemala` - America/Guatemala * `America/Guayaquil` - America/Guayaquil * `America/Guyana` - America/Guyana * `America/Halifax` - America/Halifax * `America/Havana` - America/Havana * `America/Hermosillo` - America/Hermosillo * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis * `America/Indiana/Knox` - America/Indiana/Knox * `America/Indiana/Marengo` - America/Indiana/Marengo * `America/Indiana/Petersburg` - America/Indiana/Petersburg * `America/Indiana/Tell_City` - America/Indiana/Tell_City * `America/Indiana/Vevay` - America/Indiana/Vevay * `America/Indiana/Vincennes` - America/Indiana/Vincennes * `America/Indiana/Winamac` - America/Indiana/Winamac * `America/Indianapolis` - America/Indianapolis * `America/Inuvik` - America/Inuvik * `America/Iqaluit` - America/Iqaluit * `America/Jamaica` - America/Jamaica * `America/Jujuy` - America/Jujuy * `America/Juneau` - America/Juneau * `America/Kentucky/Louisville` - America/Kentucky/Louisville * `America/Kentucky/Monticello` - America/Kentucky/Monticello * `America/Knox_IN` - America/Knox_IN * `America/Kralendijk` - America/Kralendijk * `America/La_Paz` - America/La_Paz * `America/Lima` - America/Lima * `America/Los_Angeles` - America/Los_Angeles * `America/Louisville` - America/Louisville * `America/Lower_Princes` - America/Lower_Princes * `America/Maceio` - America/Maceio * `America/Managua` - America/Managua * `America/Manaus` - America/Manaus * `America/Marigot` - America/Marigot * `America/Martinique` - America/Martinique * `America/Matamoros` - America/Matamoros * `America/Mazatlan` - America/Mazatlan * `America/Mendoza` - America/Mendoza * `America/Menominee` - America/Menominee * `America/Merida` - America/Merida * `America/Metlakatla` - America/Metlakatla * `America/Mexico_City` - America/Mexico_City * `America/Miquelon` - America/Miquelon * `America/Moncton` - America/Moncton * `America/Monterrey` - America/Monterrey * `America/Montevideo` - America/Montevideo * `America/Montreal` - America/Montreal * `America/Montserrat` - America/Montserrat * `America/Nassau` - America/Nassau * `America/New_York` - America/New_York * `America/Nipigon` - America/Nipigon * `America/Nome` - America/Nome * `America/Noronha` - America/Noronha * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah * `America/North_Dakota/Center` - America/North_Dakota/Center * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem * `America/Nuuk` - America/Nuuk * `America/Ojinaga` - America/Ojinaga * `America/Panama` - America/Panama * `America/Pangnirtung` - America/Pangnirtung * `America/Paramaribo` - America/Paramaribo * `America/Phoenix` - America/Phoenix * `America/Port-au-Prince` - America/Port-au-Prince * `America/Port_of_Spain` - America/Port_of_Spain * `America/Porto_Acre` - America/Porto_Acre * `America/Porto_Velho` - America/Porto_Velho * `America/Puerto_Rico` - America/Puerto_Rico * `America/Punta_Arenas` - America/Punta_Arenas * `America/Rainy_River` - America/Rainy_River * `America/Rankin_Inlet` - America/Rankin_Inlet * `America/Recife` - America/Recife * `America/Regina` - America/Regina * `America/Resolute` - America/Resolute * `America/Rio_Branco` - America/Rio_Branco * `America/Rosario` - America/Rosario * `America/Santa_Isabel` - America/Santa_Isabel * `America/Santarem` - America/Santarem * `America/Santiago` - America/Santiago * `America/Santo_Domingo` - America/Santo_Domingo * `America/Sao_Paulo` - America/Sao_Paulo * `America/Scoresbysund` - America/Scoresbysund * `America/Shiprock` - America/Shiprock * `America/Sitka` - America/Sitka * `America/St_Barthelemy` - America/St_Barthelemy * `America/St_Johns` - America/St_Johns * `America/St_Kitts` - America/St_Kitts * `America/St_Lucia` - America/St_Lucia * `America/St_Thomas` - America/St_Thomas * `America/St_Vincent` - America/St_Vincent * `America/Swift_Current` - America/Swift_Current * `America/Tegucigalpa` - America/Tegucigalpa * `America/Thule` - America/Thule * `America/Thunder_Bay` - America/Thunder_Bay * `America/Tijuana` - America/Tijuana * `America/Toronto` - America/Toronto * `America/Tortola` - America/Tortola * `America/Vancouver` - America/Vancouver * `America/Virgin` - America/Virgin * `America/Whitehorse` - America/Whitehorse * `America/Winnipeg` - America/Winnipeg * `America/Yakutat` - America/Yakutat * `America/Yellowknife` - America/Yellowknife * `Antarctica/Casey` - Antarctica/Casey * `Antarctica/Davis` - Antarctica/Davis * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville * `Antarctica/Macquarie` - Antarctica/Macquarie * `Antarctica/Mawson` - Antarctica/Mawson * `Antarctica/McMurdo` - Antarctica/McMurdo * `Antarctica/Palmer` - Antarctica/Palmer * `Antarctica/Rothera` - Antarctica/Rothera * `Antarctica/South_Pole` - Antarctica/South_Pole * `Antarctica/Syowa` - Antarctica/Syowa * `Antarctica/Troll` - Antarctica/Troll * `Antarctica/Vostok` - Antarctica/Vostok * `Arctic/Longyearbyen` - Arctic/Longyearbyen * `Asia/Aden` - Asia/Aden * `Asia/Almaty` - Asia/Almaty * `Asia/Amman` - Asia/Amman * `Asia/Anadyr` - Asia/Anadyr * `Asia/Aqtau` - Asia/Aqtau * `Asia/Aqtobe` - Asia/Aqtobe * `Asia/Ashgabat` - Asia/Ashgabat * `Asia/Ashkhabad` - Asia/Ashkhabad * `Asia/Atyrau` - Asia/Atyrau * `Asia/Baghdad` - Asia/Baghdad * `Asia/Bahrain` - Asia/Bahrain * `Asia/Baku` - Asia/Baku * `Asia/Bangkok` - Asia/Bangkok * `Asia/Barnaul` - Asia/Barnaul * `Asia/Beirut` - Asia/Beirut * `Asia/Bishkek` - Asia/Bishkek * `Asia/Brunei` - Asia/Brunei * `Asia/Calcutta` - Asia/Calcutta * `Asia/Chita` - Asia/Chita * `Asia/Choibalsan` - Asia/Choibalsan * `Asia/Chongqing` - Asia/Chongqing * `Asia/Chungking` - Asia/Chungking * `Asia/Colombo` - Asia/Colombo * `Asia/Dacca` - Asia/Dacca * `Asia/Damascus` - Asia/Damascus * `Asia/Dhaka` - Asia/Dhaka * `Asia/Dili` - Asia/Dili * `Asia/Dubai` - Asia/Dubai * `Asia/Dushanbe` - Asia/Dushanbe * `Asia/Famagusta` - Asia/Famagusta * `Asia/Gaza` - Asia/Gaza * `Asia/Harbin` - Asia/Harbin * `Asia/Hebron` - Asia/Hebron * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh * `Asia/Hong_Kong` - Asia/Hong_Kong * `Asia/Hovd` - Asia/Hovd * `Asia/Irkutsk` - Asia/Irkutsk * `Asia/Istanbul` - Asia/Istanbul * `Asia/Jakarta` - Asia/Jakarta * `Asia/Jayapura` - Asia/Jayapura * `Asia/Jerusalem` - Asia/Jerusalem * `Asia/Kabul` - Asia/Kabul * `Asia/Kamchatka` - Asia/Kamchatka * `Asia/Karachi` - Asia/Karachi * `Asia/Kashgar` - Asia/Kashgar * `Asia/Kathmandu` - Asia/Kathmandu * `Asia/Katmandu` - Asia/Katmandu * `Asia/Khandyga` - Asia/Khandyga * `Asia/Kolkata` - Asia/Kolkata * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur * `Asia/Kuching` - Asia/Kuching * `Asia/Kuwait` - Asia/Kuwait * `Asia/Macao` - Asia/Macao * `Asia/Macau` - Asia/Macau * `Asia/Magadan` - Asia/Magadan * `Asia/Makassar` - Asia/Makassar * `Asia/Manila` - Asia/Manila * `Asia/Muscat` - Asia/Muscat * `Asia/Nicosia` - Asia/Nicosia * `Asia/Novokuznetsk` - Asia/Novokuznetsk * `Asia/Novosibirsk` - Asia/Novosibirsk * `Asia/Omsk` - Asia/Omsk * `Asia/Oral` - Asia/Oral * `Asia/Phnom_Penh` - Asia/Phnom_Penh * `Asia/Pontianak` - Asia/Pontianak * `Asia/Pyongyang` - Asia/Pyongyang * `Asia/Qatar` - Asia/Qatar * `Asia/Qostanay` - Asia/Qostanay * `Asia/Qyzylorda` - Asia/Qyzylorda * `Asia/Rangoon` - Asia/Rangoon * `Asia/Riyadh` - Asia/Riyadh * `Asia/Saigon` - Asia/Saigon * `Asia/Sakhalin` - Asia/Sakhalin * `Asia/Samarkand` - Asia/Samarkand * `Asia/Seoul` - Asia/Seoul * `Asia/Shanghai` - Asia/Shanghai * `Asia/Singapore` - Asia/Singapore * `Asia/Srednekolymsk` - Asia/Srednekolymsk * `Asia/Taipei` - Asia/Taipei * `Asia/Tashkent` - Asia/Tashkent * `Asia/Tbilisi` - Asia/Tbilisi * `Asia/Tehran` - Asia/Tehran * `Asia/Tel_Aviv` - Asia/Tel_Aviv * `Asia/Thimbu` - Asia/Thimbu * `Asia/Thimphu` - Asia/Thimphu * `Asia/Tokyo` - Asia/Tokyo * `Asia/Tomsk` - Asia/Tomsk * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar * `Asia/Ulan_Bator` - Asia/Ulan_Bator * `Asia/Urumqi` - Asia/Urumqi * `Asia/Ust-Nera` - Asia/Ust-Nera * `Asia/Vientiane` - Asia/Vientiane * `Asia/Vladivostok` - Asia/Vladivostok * `Asia/Yakutsk` - Asia/Yakutsk * `Asia/Yangon` - Asia/Yangon * `Asia/Yekaterinburg` - Asia/Yekaterinburg * `Asia/Yerevan` - Asia/Yerevan * `Atlantic/Azores` - Atlantic/Azores * `Atlantic/Bermuda` - Atlantic/Bermuda * `Atlantic/Canary` - Atlantic/Canary * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde * `Atlantic/Faeroe` - Atlantic/Faeroe * `Atlantic/Faroe` - Atlantic/Faroe * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen * `Atlantic/Madeira` - Atlantic/Madeira * `Atlantic/Reykjavik` - Atlantic/Reykjavik * `Atlantic/South_Georgia` - Atlantic/South_Georgia * `Atlantic/St_Helena` - Atlantic/St_Helena * `Atlantic/Stanley` - Atlantic/Stanley * `Australia/ACT` - Australia/ACT * `Australia/Adelaide` - Australia/Adelaide * `Australia/Brisbane` - Australia/Brisbane * `Australia/Broken_Hill` - Australia/Broken_Hill * `Australia/Canberra` - Australia/Canberra * `Australia/Currie` - Australia/Currie * `Australia/Darwin` - Australia/Darwin * `Australia/Eucla` - Australia/Eucla * `Australia/Hobart` - Australia/Hobart * `Australia/LHI` - Australia/LHI * `Australia/Lindeman` - Australia/Lindeman * `Australia/Lord_Howe` - Australia/Lord_Howe * `Australia/Melbourne` - Australia/Melbourne * `Australia/NSW` - Australia/NSW * `Australia/North` - Australia/North * `Australia/Perth` - Australia/Perth * `Australia/Queensland` - Australia/Queensland * `Australia/South` - Australia/South * `Australia/Sydney` - Australia/Sydney * `Australia/Tasmania` - Australia/Tasmania * `Australia/Victoria` - Australia/Victoria * `Australia/West` - Australia/West * `Australia/Yancowinna` - Australia/Yancowinna * `Brazil/Acre` - Brazil/Acre * `Brazil/DeNoronha` - Brazil/DeNoronha * `Brazil/East` - Brazil/East * `Brazil/West` - Brazil/West * `CET` - CET * `CST6CDT` - CST6CDT * `Canada/Atlantic` - Canada/Atlantic * `Canada/Central` - Canada/Central * `Canada/Eastern` - Canada/Eastern * `Canada/Mountain` - Canada/Mountain * `Canada/Newfoundland` - Canada/Newfoundland * `Canada/Pacific` - Canada/Pacific * `Canada/Saskatchewan` - Canada/Saskatchewan * `Canada/Yukon` - Canada/Yukon * `Chile/Continental` - Chile/Continental * `Chile/EasterIsland` - Chile/EasterIsland * `Cuba` - Cuba * `EET` - EET * `EST` - EST * `EST5EDT` - EST5EDT * `Egypt` - Egypt * `Eire` - Eire * `Etc/GMT` - Etc/GMT * `Etc/GMT+0` - Etc/GMT+0 * `Etc/GMT+1` - Etc/GMT+1 * `Etc/GMT+10` - Etc/GMT+10 * `Etc/GMT+11` - Etc/GMT+11 * `Etc/GMT+12` - Etc/GMT+12 * `Etc/GMT+2` - Etc/GMT+2 * `Etc/GMT+3` - Etc/GMT+3 * `Etc/GMT+4` - Etc/GMT+4 * `Etc/GMT+5` - Etc/GMT+5 * `Etc/GMT+6` - Etc/GMT+6 * `Etc/GMT+7` - Etc/GMT+7 * `Etc/GMT+8` - Etc/GMT+8 * `Etc/GMT+9` - Etc/GMT+9 * `Etc/GMT-0` - Etc/GMT-0 * `Etc/GMT-1` - Etc/GMT-1 * `Etc/GMT-10` - Etc/GMT-10 * `Etc/GMT-11` - Etc/GMT-11 * `Etc/GMT-12` - Etc/GMT-12 * `Etc/GMT-13` - Etc/GMT-13 * `Etc/GMT-14` - Etc/GMT-14 * `Etc/GMT-2` - Etc/GMT-2 * `Etc/GMT-3` - Etc/GMT-3 * `Etc/GMT-4` - Etc/GMT-4 * `Etc/GMT-5` - Etc/GMT-5 * `Etc/GMT-6` - Etc/GMT-6 * `Etc/GMT-7` - Etc/GMT-7 * `Etc/GMT-8` - Etc/GMT-8 * `Etc/GMT-9` - Etc/GMT-9 * `Etc/GMT0` - Etc/GMT0 * `Etc/Greenwich` - Etc/Greenwich * `Etc/UCT` - Etc/UCT * `Etc/UTC` - Etc/UTC * `Etc/Universal` - Etc/Universal * `Etc/Zulu` - Etc/Zulu * `Europe/Amsterdam` - Europe/Amsterdam * `Europe/Andorra` - Europe/Andorra * `Europe/Astrakhan` - Europe/Astrakhan * `Europe/Athens` - Europe/Athens * `Europe/Belfast` - Europe/Belfast * `Europe/Belgrade` - Europe/Belgrade * `Europe/Berlin` - Europe/Berlin * `Europe/Bratislava` - Europe/Bratislava * `Europe/Brussels` - Europe/Brussels * `Europe/Bucharest` - Europe/Bucharest * `Europe/Budapest` - Europe/Budapest * `Europe/Busingen` - Europe/Busingen * `Europe/Chisinau` - Europe/Chisinau * `Europe/Copenhagen` - Europe/Copenhagen * `Europe/Dublin` - Europe/Dublin * `Europe/Gibraltar` - Europe/Gibraltar * `Europe/Guernsey` - Europe/Guernsey * `Europe/Helsinki` - Europe/Helsinki * `Europe/Isle_of_Man` - Europe/Isle_of_Man * `Europe/Istanbul` - Europe/Istanbul * `Europe/Jersey` - Europe/Jersey * `Europe/Kaliningrad` - Europe/Kaliningrad * `Europe/Kiev` - Europe/Kiev * `Europe/Kirov` - Europe/Kirov * `Europe/Kyiv` - Europe/Kyiv * `Europe/Lisbon` - Europe/Lisbon * `Europe/Ljubljana` - Europe/Ljubljana * `Europe/London` - Europe/London * `Europe/Luxembourg` - Europe/Luxembourg * `Europe/Madrid` - Europe/Madrid * `Europe/Malta` - Europe/Malta * `Europe/Mariehamn` - Europe/Mariehamn * `Europe/Minsk` - Europe/Minsk * `Europe/Monaco` - Europe/Monaco * `Europe/Moscow` - Europe/Moscow * `Europe/Nicosia` - Europe/Nicosia * `Europe/Oslo` - Europe/Oslo * `Europe/Paris` - Europe/Paris * `Europe/Podgorica` - Europe/Podgorica * `Europe/Prague` - Europe/Prague * `Europe/Riga` - Europe/Riga * `Europe/Rome` - Europe/Rome * `Europe/Samara` - Europe/Samara * `Europe/San_Marino` - Europe/San_Marino * `Europe/Sarajevo` - Europe/Sarajevo * `Europe/Saratov` - Europe/Saratov * `Europe/Simferopol` - Europe/Simferopol * `Europe/Skopje` - Europe/Skopje * `Europe/Sofia` - Europe/Sofia * `Europe/Stockholm` - Europe/Stockholm * `Europe/Tallinn` - Europe/Tallinn * `Europe/Tirane` - Europe/Tirane * `Europe/Tiraspol` - Europe/Tiraspol * `Europe/Ulyanovsk` - Europe/Ulyanovsk * `Europe/Uzhgorod` - Europe/Uzhgorod * `Europe/Vaduz` - Europe/Vaduz * `Europe/Vatican` - Europe/Vatican * `Europe/Vienna` - Europe/Vienna * `Europe/Vilnius` - Europe/Vilnius * `Europe/Volgograd` - Europe/Volgograd * `Europe/Warsaw` - Europe/Warsaw * `Europe/Zagreb` - Europe/Zagreb * `Europe/Zaporozhye` - Europe/Zaporozhye * `Europe/Zurich` - Europe/Zurich * `GB` - GB * `GB-Eire` - GB-Eire * `GMT` - GMT * `GMT+0` - GMT+0 * `GMT-0` - GMT-0 * `GMT0` - GMT0 * `Greenwich` - Greenwich * `HST` - HST * `Hongkong` - Hongkong * `Iceland` - Iceland * `Indian/Antananarivo` - Indian/Antananarivo * `Indian/Chagos` - Indian/Chagos * `Indian/Christmas` - Indian/Christmas * `Indian/Cocos` - Indian/Cocos * `Indian/Comoro` - Indian/Comoro * `Indian/Kerguelen` - Indian/Kerguelen * `Indian/Mahe` - Indian/Mahe * `Indian/Maldives` - Indian/Maldives * `Indian/Mauritius` - Indian/Mauritius * `Indian/Mayotte` - Indian/Mayotte * `Indian/Reunion` - Indian/Reunion * `Iran` - Iran * `Israel` - Israel * `Jamaica` - Jamaica * `Japan` - Japan * `Kwajalein` - Kwajalein * `Libya` - Libya * `MET` - MET * `MST` - MST * `MST7MDT` - MST7MDT * `Mexico/BajaNorte` - Mexico/BajaNorte * `Mexico/BajaSur` - Mexico/BajaSur * `Mexico/General` - Mexico/General * `NZ` - NZ * `NZ-CHAT` - NZ-CHAT * `Navajo` - Navajo * `PRC` - PRC * `PST8PDT` - PST8PDT * `Pacific/Apia` - Pacific/Apia * `Pacific/Auckland` - Pacific/Auckland * `Pacific/Bougainville` - Pacific/Bougainville * `Pacific/Chatham` - Pacific/Chatham * `Pacific/Chuuk` - Pacific/Chuuk * `Pacific/Easter` - Pacific/Easter * `Pacific/Efate` - Pacific/Efate * `Pacific/Enderbury` - Pacific/Enderbury * `Pacific/Fakaofo` - Pacific/Fakaofo * `Pacific/Fiji` - Pacific/Fiji * `Pacific/Funafuti` - Pacific/Funafuti * `Pacific/Galapagos` - Pacific/Galapagos * `Pacific/Gambier` - Pacific/Gambier * `Pacific/Guadalcanal` - Pacific/Guadalcanal * `Pacific/Guam` - Pacific/Guam * `Pacific/Honolulu` - Pacific/Honolulu * `Pacific/Johnston` - Pacific/Johnston * `Pacific/Kanton` - Pacific/Kanton * `Pacific/Kiritimati` - Pacific/Kiritimati * `Pacific/Kosrae` - Pacific/Kosrae * `Pacific/Kwajalein` - Pacific/Kwajalein * `Pacific/Majuro` - Pacific/Majuro * `Pacific/Marquesas` - Pacific/Marquesas * `Pacific/Midway` - Pacific/Midway * `Pacific/Nauru` - Pacific/Nauru * `Pacific/Niue` - Pacific/Niue * `Pacific/Norfolk` - Pacific/Norfolk * `Pacific/Noumea` - Pacific/Noumea * `Pacific/Pago_Pago` - Pacific/Pago_Pago * `Pacific/Palau` - Pacific/Palau * `Pacific/Pitcairn` - Pacific/Pitcairn * `Pacific/Pohnpei` - Pacific/Pohnpei * `Pacific/Ponape` - Pacific/Ponape * `Pacific/Port_Moresby` - Pacific/Port_Moresby * `Pacific/Rarotonga` - Pacific/Rarotonga * `Pacific/Saipan` - Pacific/Saipan * `Pacific/Samoa` - Pacific/Samoa * `Pacific/Tahiti` - Pacific/Tahiti * `Pacific/Tarawa` - Pacific/Tarawa * `Pacific/Tongatapu` - Pacific/Tongatapu * `Pacific/Truk` - Pacific/Truk * `Pacific/Wake` - Pacific/Wake * `Pacific/Wallis` - Pacific/Wallis * `Pacific/Yap` - Pacific/Yap * `Poland` - Poland * `Portugal` - Portugal * `ROC` - ROC * `ROK` - ROK * `Singapore` - Singapore * `Turkey` - Turkey * `UCT` - UCT * `US/Alaska` - US/Alaska * `US/Aleutian` - US/Aleutian * `US/Arizona` - US/Arizona * `US/Central` - US/Central * `US/East-Indiana` - US/East-Indiana * `US/Eastern` - US/Eastern * `US/Hawaii` - US/Hawaii * `US/Indiana-Starke` - US/Indiana-Starke * `US/Michigan` - US/Michigan * `US/Mountain` - US/Mountain * `US/Pacific` - US/Pacific * `US/Samoa` - US/Samoa * `UTC` - UTC * `Universal` - Universal * `W-SU` - W-SU * `WET` - WET * `Zulu` - Zulu',
    )
    enable_product_grade: Optional[StrictBool] = Field(
        default=None, description='Displays a grade letter next to a product to show the overall health.'
    )
    product_grade: Optional[Annotated[str, Field(strict=True, max_length=800)]] = None
    product_grade_a: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None, description="Percentage score for an 'A' >="
    )
    product_grade_b: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None, description="Percentage score for a 'B' >="
    )
    product_grade_c: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None, description="Percentage score for a 'C' >="
    )
    product_grade_d: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None, description="Percentage score for a 'D' >="
    )
    product_grade_f: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None, description="Percentage score for an 'F' <="
    )
    enable_product_tag_inheritance: Optional[StrictBool] = Field(
        default=None,
        description='Enables product tag inheritance globally for all products. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings',
    )
    enable_benchmark: Optional[StrictBool] = Field(
        default=None,
        description='Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)',
    )
    enable_template_match: Optional[StrictBool] = Field(
        default=None,
        description='Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.',
    )
    enable_similar_findings: Optional[StrictBool] = Field(
        default=None,
        description='Enable the query of similar findings on the view finding page. This feature can involve potentially large queries and negatively impact performance',
    )
    engagement_auto_close: Optional[StrictBool] = Field(
        default=None, description='Closes an engagement after 3 days (default) past due date including last update.'
    )
    engagement_auto_close_days: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None,
        description='Closes an engagement after the specified number of days past due date including last update.',
    )
    enable_finding_sla: Optional[StrictBool] = Field(
        default=None, description="Enables Finding SLA's for time to remediate."
    )
    enable_notify_sla_active: Optional[StrictBool] = Field(
        default=None,
        description="Enables Notify when time to remediate according to Finding SLA's is breached for active Findings.",
    )
    enable_notify_sla_active_verified: Optional[StrictBool] = Field(
        default=None,
        description="Enables Notify when time to remediate according to Finding SLA's is breached for active, verified Findings.",
    )
    enable_notify_sla_jira_only: Optional[StrictBool] = Field(
        default=None,
        description="Enables Notify when time to remediate according to Finding SLA's is breached for Findings that are linked to JIRA issues. Notification is disabled for Findings not linked to JIRA issues",
    )
    enable_notify_sla_exponential_backoff: Optional[StrictBool] = Field(
        default=None,
        description='Enable an exponential backoff strategy for SLA breach notifications, e.g. 1, 2, 4, 8, etc. Otherwise it alerts every day',
    )
    allow_anonymous_survey_repsonse: Optional[StrictBool] = Field(
        default=None, description='Enable anyone with a link to the survey to answer a survey'
    )
    credentials: Optional[Annotated[str, Field(strict=True, max_length=3000)]] = None
    disclaimer_notifications: Optional[Annotated[str, Field(strict=True, max_length=3000)]] = Field(
        default=None, description='Include this custom disclaimer on all notifications'
    )
    disclaimer_reports: Optional[Annotated[str, Field(strict=True, max_length=5000)]] = Field(
        default=None, description='Include this custom disclaimer on generated reports'
    )
    disclaimer_reports_forced: Optional[StrictBool] = Field(
        default=None,
        description="Disclaimer will be added to all reports even if user didn't selected 'Include disclaimer'.",
    )
    disclaimer_notes: Optional[Annotated[str, Field(strict=True, max_length=3000)]] = Field(
        default=None, description='Include this custom disclaimer next to input form for notes'
    )
    risk_acceptance_form_default_days: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = (
        Field(default=None, description='Default expiry period for risk acceptance form.')
    )
    risk_acceptance_notify_before_expiration: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    ] = Field(default=None, description='Notify X days before risk acceptance expires. Leave empty to disable.')
    enable_credentials: Optional[StrictBool] = Field(
        default=None, description='With this setting turned off, credentials will be disabled in the user interface.'
    )
    enable_questionnaires: Optional[StrictBool] = Field(
        default=None, description='With this setting turned off, questionnaires will be disabled in the user interface.'
    )
    enable_checklists: Optional[StrictBool] = Field(
        default=None, description='With this setting turned off, checklists will be disabled in the user interface.'
    )
    enable_endpoint_metadata_import: Optional[StrictBool] = Field(
        default=None,
        description='With this setting turned off, endpoint metadata import will be disabled in the user interface.',
    )
    enable_user_profile_editable: Optional[StrictBool] = Field(
        default=None, description='When turned on users can edit their profiles'
    )
    enable_product_tracking_files: Optional[StrictBool] = Field(
        default=None,
        description='With this setting turned off, the product tracking files will be disabled in the user interface.',
    )
    enable_finding_groups: Optional[StrictBool] = Field(
        default=None, description='With this setting turned off, the Finding Groups will be disabled.'
    )
    enable_ui_table_based_searching: Optional[StrictBool] = Field(
        default=None,
        description='With this setting enabled, table headings will contain sort buttons for the current page of data in addition to sorting buttons that consider data from all pages.',
    )
    enable_calendar: Optional[StrictBool] = Field(
        default=None, description='With this setting turned off, the Calendar will be disabled in the user interface.'
    )
    default_group_email_pattern: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None,
        description='New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.',
    )
    minimum_password_length: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None, description='Requires user to set passwords greater than minimum length.'
    )
    maximum_password_length: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = Field(
        default=None, description='Requires user to set passwords less than maximum length.'
    )
    number_character_required: Optional[StrictBool] = Field(
        default=None, description='Requires user passwords to contain at least one digit (0-9).'
    )
    special_character_required: Optional[StrictBool] = Field(
        default=None,
        description='Requires user passwords to contain at least one special character (()[]{}|\\`~!@#$%^&*_-+=;:\'",<>./?).',
    )
    lowercase_character_required: Optional[StrictBool] = Field(
        default=None, description='Requires user passwords to contain at least one lowercase letter (a-z).'
    )
    uppercase_character_required: Optional[StrictBool] = Field(
        default=None, description='Requires user passwords to contain at least one uppercase letter (A-Z).'
    )
    non_common_password_required: Optional[StrictBool] = Field(
        default=None, description='Requires user passwords to not be part of list of common passwords.'
    )
    api_expose_error_details: Optional[StrictBool] = Field(
        default=None, description='When turned on, the API will expose error details in the response.'
    )
    filter_string_matching: Optional[StrictBool] = Field(
        default=None,
        description='When turned on, all filter operations in the UI will require string matches rather than ID. This is a performance enhancement to avoid fetching objects unnecessarily.',
    )
    default_group: Optional[StrictInt] = Field(default=None, description='New users will be assigned to this group.')
    default_group_role: Optional[StrictInt] = Field(
        default=None, description='New users will be assigned to their default group with this role.'
    )
    __properties: ClassVar[List[str]] = [
        'id',
        'enable_deduplication',
        'delete_duplicates',
        'max_dupes',
        'email_from',
        'enable_jira',
        'enable_jira_web_hook',
        'disable_jira_webhook_secret',
        'jira_webhook_secret',
        'jira_minimum_severity',
        'jira_labels',
        'add_vulnerability_id_to_jira_label',
        'enable_github',
        'enable_slack_notifications',
        'slack_channel',
        'slack_token',
        'slack_username',
        'enable_msteams_notifications',
        'msteams_url',
        'enable_mail_notifications',
        'mail_notifications_to',
        'enable_webhooks_notifications',
        'webhooks_notifications_timeout',
        'enforce_verified_status',
        'enforce_verified_status_jira',
        'enforce_verified_status_product_grading',
        'enforce_verified_status_metrics',
        'false_positive_history',
        'retroactive_false_positive_history',
        'url_prefix',
        'team_name',
        'time_zone',
        'enable_product_grade',
        'product_grade',
        'product_grade_a',
        'product_grade_b',
        'product_grade_c',
        'product_grade_d',
        'product_grade_f',
        'enable_product_tag_inheritance',
        'enable_benchmark',
        'enable_template_match',
        'enable_similar_findings',
        'engagement_auto_close',
        'engagement_auto_close_days',
        'enable_finding_sla',
        'enable_notify_sla_active',
        'enable_notify_sla_active_verified',
        'enable_notify_sla_jira_only',
        'enable_notify_sla_exponential_backoff',
        'allow_anonymous_survey_repsonse',
        'credentials',
        'disclaimer_notifications',
        'disclaimer_reports',
        'disclaimer_reports_forced',
        'disclaimer_notes',
        'risk_acceptance_form_default_days',
        'risk_acceptance_notify_before_expiration',
        'enable_credentials',
        'enable_questionnaires',
        'enable_checklists',
        'enable_endpoint_metadata_import',
        'enable_user_profile_editable',
        'enable_product_tracking_files',
        'enable_finding_groups',
        'enable_ui_table_based_searching',
        'enable_calendar',
        'default_group_email_pattern',
        'minimum_password_length',
        'maximum_password_length',
        'number_character_required',
        'special_character_required',
        'lowercase_character_required',
        'uppercase_character_required',
        'non_common_password_required',
        'api_expose_error_details',
        'filter_string_matching',
        'default_group',
        'default_group_role',
    ]

    @field_validator('jira_minimum_severity')
    def jira_minimum_severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Critical', 'High', 'Medium', 'Low', 'Info', '']):
            raise ValueError("must be one of enum values ('Critical', 'High', 'Medium', 'Low', 'Info', '')")
        return value

    @field_validator('time_zone')
    def time_zone_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                'Africa/Abidjan',
                'Africa/Accra',
                'Africa/Addis_Ababa',
                'Africa/Algiers',
                'Africa/Asmara',
                'Africa/Asmera',
                'Africa/Bamako',
                'Africa/Bangui',
                'Africa/Banjul',
                'Africa/Bissau',
                'Africa/Blantyre',
                'Africa/Brazzaville',
                'Africa/Bujumbura',
                'Africa/Cairo',
                'Africa/Casablanca',
                'Africa/Ceuta',
                'Africa/Conakry',
                'Africa/Dakar',
                'Africa/Dar_es_Salaam',
                'Africa/Djibouti',
                'Africa/Douala',
                'Africa/El_Aaiun',
                'Africa/Freetown',
                'Africa/Gaborone',
                'Africa/Harare',
                'Africa/Johannesburg',
                'Africa/Juba',
                'Africa/Kampala',
                'Africa/Khartoum',
                'Africa/Kigali',
                'Africa/Kinshasa',
                'Africa/Lagos',
                'Africa/Libreville',
                'Africa/Lome',
                'Africa/Luanda',
                'Africa/Lubumbashi',
                'Africa/Lusaka',
                'Africa/Malabo',
                'Africa/Maputo',
                'Africa/Maseru',
                'Africa/Mbabane',
                'Africa/Mogadishu',
                'Africa/Monrovia',
                'Africa/Nairobi',
                'Africa/Ndjamena',
                'Africa/Niamey',
                'Africa/Nouakchott',
                'Africa/Ouagadougou',
                'Africa/Porto-Novo',
                'Africa/Sao_Tome',
                'Africa/Timbuktu',
                'Africa/Tripoli',
                'Africa/Tunis',
                'Africa/Windhoek',
                'America/Adak',
                'America/Anchorage',
                'America/Anguilla',
                'America/Antigua',
                'America/Araguaina',
                'America/Argentina/Buenos_Aires',
                'America/Argentina/Catamarca',
                'America/Argentina/ComodRivadavia',
                'America/Argentina/Cordoba',
                'America/Argentina/Jujuy',
                'America/Argentina/La_Rioja',
                'America/Argentina/Mendoza',
                'America/Argentina/Rio_Gallegos',
                'America/Argentina/Salta',
                'America/Argentina/San_Juan',
                'America/Argentina/San_Luis',
                'America/Argentina/Tucuman',
                'America/Argentina/Ushuaia',
                'America/Aruba',
                'America/Asuncion',
                'America/Atikokan',
                'America/Atka',
                'America/Bahia',
                'America/Bahia_Banderas',
                'America/Barbados',
                'America/Belem',
                'America/Belize',
                'America/Blanc-Sablon',
                'America/Boa_Vista',
                'America/Bogota',
                'America/Boise',
                'America/Buenos_Aires',
                'America/Cambridge_Bay',
                'America/Campo_Grande',
                'America/Cancun',
                'America/Caracas',
                'America/Catamarca',
                'America/Cayenne',
                'America/Cayman',
                'America/Chicago',
                'America/Chihuahua',
                'America/Ciudad_Juarez',
                'America/Coral_Harbour',
                'America/Cordoba',
                'America/Costa_Rica',
                'America/Creston',
                'America/Cuiaba',
                'America/Curacao',
                'America/Danmarkshavn',
                'America/Dawson',
                'America/Dawson_Creek',
                'America/Denver',
                'America/Detroit',
                'America/Dominica',
                'America/Edmonton',
                'America/Eirunepe',
                'America/El_Salvador',
                'America/Ensenada',
                'America/Fort_Nelson',
                'America/Fort_Wayne',
                'America/Fortaleza',
                'America/Glace_Bay',
                'America/Godthab',
                'America/Goose_Bay',
                'America/Grand_Turk',
                'America/Grenada',
                'America/Guadeloupe',
                'America/Guatemala',
                'America/Guayaquil',
                'America/Guyana',
                'America/Halifax',
                'America/Havana',
                'America/Hermosillo',
                'America/Indiana/Indianapolis',
                'America/Indiana/Knox',
                'America/Indiana/Marengo',
                'America/Indiana/Petersburg',
                'America/Indiana/Tell_City',
                'America/Indiana/Vevay',
                'America/Indiana/Vincennes',
                'America/Indiana/Winamac',
                'America/Indianapolis',
                'America/Inuvik',
                'America/Iqaluit',
                'America/Jamaica',
                'America/Jujuy',
                'America/Juneau',
                'America/Kentucky/Louisville',
                'America/Kentucky/Monticello',
                'America/Knox_IN',
                'America/Kralendijk',
                'America/La_Paz',
                'America/Lima',
                'America/Los_Angeles',
                'America/Louisville',
                'America/Lower_Princes',
                'America/Maceio',
                'America/Managua',
                'America/Manaus',
                'America/Marigot',
                'America/Martinique',
                'America/Matamoros',
                'America/Mazatlan',
                'America/Mendoza',
                'America/Menominee',
                'America/Merida',
                'America/Metlakatla',
                'America/Mexico_City',
                'America/Miquelon',
                'America/Moncton',
                'America/Monterrey',
                'America/Montevideo',
                'America/Montreal',
                'America/Montserrat',
                'America/Nassau',
                'America/New_York',
                'America/Nipigon',
                'America/Nome',
                'America/Noronha',
                'America/North_Dakota/Beulah',
                'America/North_Dakota/Center',
                'America/North_Dakota/New_Salem',
                'America/Nuuk',
                'America/Ojinaga',
                'America/Panama',
                'America/Pangnirtung',
                'America/Paramaribo',
                'America/Phoenix',
                'America/Port-au-Prince',
                'America/Port_of_Spain',
                'America/Porto_Acre',
                'America/Porto_Velho',
                'America/Puerto_Rico',
                'America/Punta_Arenas',
                'America/Rainy_River',
                'America/Rankin_Inlet',
                'America/Recife',
                'America/Regina',
                'America/Resolute',
                'America/Rio_Branco',
                'America/Rosario',
                'America/Santa_Isabel',
                'America/Santarem',
                'America/Santiago',
                'America/Santo_Domingo',
                'America/Sao_Paulo',
                'America/Scoresbysund',
                'America/Shiprock',
                'America/Sitka',
                'America/St_Barthelemy',
                'America/St_Johns',
                'America/St_Kitts',
                'America/St_Lucia',
                'America/St_Thomas',
                'America/St_Vincent',
                'America/Swift_Current',
                'America/Tegucigalpa',
                'America/Thule',
                'America/Thunder_Bay',
                'America/Tijuana',
                'America/Toronto',
                'America/Tortola',
                'America/Vancouver',
                'America/Virgin',
                'America/Whitehorse',
                'America/Winnipeg',
                'America/Yakutat',
                'America/Yellowknife',
                'Antarctica/Casey',
                'Antarctica/Davis',
                'Antarctica/DumontDUrville',
                'Antarctica/Macquarie',
                'Antarctica/Mawson',
                'Antarctica/McMurdo',
                'Antarctica/Palmer',
                'Antarctica/Rothera',
                'Antarctica/South_Pole',
                'Antarctica/Syowa',
                'Antarctica/Troll',
                'Antarctica/Vostok',
                'Arctic/Longyearbyen',
                'Asia/Aden',
                'Asia/Almaty',
                'Asia/Amman',
                'Asia/Anadyr',
                'Asia/Aqtau',
                'Asia/Aqtobe',
                'Asia/Ashgabat',
                'Asia/Ashkhabad',
                'Asia/Atyrau',
                'Asia/Baghdad',
                'Asia/Bahrain',
                'Asia/Baku',
                'Asia/Bangkok',
                'Asia/Barnaul',
                'Asia/Beirut',
                'Asia/Bishkek',
                'Asia/Brunei',
                'Asia/Calcutta',
                'Asia/Chita',
                'Asia/Choibalsan',
                'Asia/Chongqing',
                'Asia/Chungking',
                'Asia/Colombo',
                'Asia/Dacca',
                'Asia/Damascus',
                'Asia/Dhaka',
                'Asia/Dili',
                'Asia/Dubai',
                'Asia/Dushanbe',
                'Asia/Famagusta',
                'Asia/Gaza',
                'Asia/Harbin',
                'Asia/Hebron',
                'Asia/Ho_Chi_Minh',
                'Asia/Hong_Kong',
                'Asia/Hovd',
                'Asia/Irkutsk',
                'Asia/Istanbul',
                'Asia/Jakarta',
                'Asia/Jayapura',
                'Asia/Jerusalem',
                'Asia/Kabul',
                'Asia/Kamchatka',
                'Asia/Karachi',
                'Asia/Kashgar',
                'Asia/Kathmandu',
                'Asia/Katmandu',
                'Asia/Khandyga',
                'Asia/Kolkata',
                'Asia/Krasnoyarsk',
                'Asia/Kuala_Lumpur',
                'Asia/Kuching',
                'Asia/Kuwait',
                'Asia/Macao',
                'Asia/Macau',
                'Asia/Magadan',
                'Asia/Makassar',
                'Asia/Manila',
                'Asia/Muscat',
                'Asia/Nicosia',
                'Asia/Novokuznetsk',
                'Asia/Novosibirsk',
                'Asia/Omsk',
                'Asia/Oral',
                'Asia/Phnom_Penh',
                'Asia/Pontianak',
                'Asia/Pyongyang',
                'Asia/Qatar',
                'Asia/Qostanay',
                'Asia/Qyzylorda',
                'Asia/Rangoon',
                'Asia/Riyadh',
                'Asia/Saigon',
                'Asia/Sakhalin',
                'Asia/Samarkand',
                'Asia/Seoul',
                'Asia/Shanghai',
                'Asia/Singapore',
                'Asia/Srednekolymsk',
                'Asia/Taipei',
                'Asia/Tashkent',
                'Asia/Tbilisi',
                'Asia/Tehran',
                'Asia/Tel_Aviv',
                'Asia/Thimbu',
                'Asia/Thimphu',
                'Asia/Tokyo',
                'Asia/Tomsk',
                'Asia/Ujung_Pandang',
                'Asia/Ulaanbaatar',
                'Asia/Ulan_Bator',
                'Asia/Urumqi',
                'Asia/Ust-Nera',
                'Asia/Vientiane',
                'Asia/Vladivostok',
                'Asia/Yakutsk',
                'Asia/Yangon',
                'Asia/Yekaterinburg',
                'Asia/Yerevan',
                'Atlantic/Azores',
                'Atlantic/Bermuda',
                'Atlantic/Canary',
                'Atlantic/Cape_Verde',
                'Atlantic/Faeroe',
                'Atlantic/Faroe',
                'Atlantic/Jan_Mayen',
                'Atlantic/Madeira',
                'Atlantic/Reykjavik',
                'Atlantic/South_Georgia',
                'Atlantic/St_Helena',
                'Atlantic/Stanley',
                'Australia/ACT',
                'Australia/Adelaide',
                'Australia/Brisbane',
                'Australia/Broken_Hill',
                'Australia/Canberra',
                'Australia/Currie',
                'Australia/Darwin',
                'Australia/Eucla',
                'Australia/Hobart',
                'Australia/LHI',
                'Australia/Lindeman',
                'Australia/Lord_Howe',
                'Australia/Melbourne',
                'Australia/NSW',
                'Australia/North',
                'Australia/Perth',
                'Australia/Queensland',
                'Australia/South',
                'Australia/Sydney',
                'Australia/Tasmania',
                'Australia/Victoria',
                'Australia/West',
                'Australia/Yancowinna',
                'Brazil/Acre',
                'Brazil/DeNoronha',
                'Brazil/East',
                'Brazil/West',
                'CET',
                'CST6CDT',
                'Canada/Atlantic',
                'Canada/Central',
                'Canada/Eastern',
                'Canada/Mountain',
                'Canada/Newfoundland',
                'Canada/Pacific',
                'Canada/Saskatchewan',
                'Canada/Yukon',
                'Chile/Continental',
                'Chile/EasterIsland',
                'Cuba',
                'EET',
                'EST',
                'EST5EDT',
                'Egypt',
                'Eire',
                'Etc/GMT',
                'Etc/GMT+0',
                'Etc/GMT+1',
                'Etc/GMT+10',
                'Etc/GMT+11',
                'Etc/GMT+12',
                'Etc/GMT+2',
                'Etc/GMT+3',
                'Etc/GMT+4',
                'Etc/GMT+5',
                'Etc/GMT+6',
                'Etc/GMT+7',
                'Etc/GMT+8',
                'Etc/GMT+9',
                'Etc/GMT-0',
                'Etc/GMT-1',
                'Etc/GMT-10',
                'Etc/GMT-11',
                'Etc/GMT-12',
                'Etc/GMT-13',
                'Etc/GMT-14',
                'Etc/GMT-2',
                'Etc/GMT-3',
                'Etc/GMT-4',
                'Etc/GMT-5',
                'Etc/GMT-6',
                'Etc/GMT-7',
                'Etc/GMT-8',
                'Etc/GMT-9',
                'Etc/GMT0',
                'Etc/Greenwich',
                'Etc/UCT',
                'Etc/UTC',
                'Etc/Universal',
                'Etc/Zulu',
                'Europe/Amsterdam',
                'Europe/Andorra',
                'Europe/Astrakhan',
                'Europe/Athens',
                'Europe/Belfast',
                'Europe/Belgrade',
                'Europe/Berlin',
                'Europe/Bratislava',
                'Europe/Brussels',
                'Europe/Bucharest',
                'Europe/Budapest',
                'Europe/Busingen',
                'Europe/Chisinau',
                'Europe/Copenhagen',
                'Europe/Dublin',
                'Europe/Gibraltar',
                'Europe/Guernsey',
                'Europe/Helsinki',
                'Europe/Isle_of_Man',
                'Europe/Istanbul',
                'Europe/Jersey',
                'Europe/Kaliningrad',
                'Europe/Kiev',
                'Europe/Kirov',
                'Europe/Kyiv',
                'Europe/Lisbon',
                'Europe/Ljubljana',
                'Europe/London',
                'Europe/Luxembourg',
                'Europe/Madrid',
                'Europe/Malta',
                'Europe/Mariehamn',
                'Europe/Minsk',
                'Europe/Monaco',
                'Europe/Moscow',
                'Europe/Nicosia',
                'Europe/Oslo',
                'Europe/Paris',
                'Europe/Podgorica',
                'Europe/Prague',
                'Europe/Riga',
                'Europe/Rome',
                'Europe/Samara',
                'Europe/San_Marino',
                'Europe/Sarajevo',
                'Europe/Saratov',
                'Europe/Simferopol',
                'Europe/Skopje',
                'Europe/Sofia',
                'Europe/Stockholm',
                'Europe/Tallinn',
                'Europe/Tirane',
                'Europe/Tiraspol',
                'Europe/Ulyanovsk',
                'Europe/Uzhgorod',
                'Europe/Vaduz',
                'Europe/Vatican',
                'Europe/Vienna',
                'Europe/Vilnius',
                'Europe/Volgograd',
                'Europe/Warsaw',
                'Europe/Zagreb',
                'Europe/Zaporozhye',
                'Europe/Zurich',
                'GB',
                'GB-Eire',
                'GMT',
                'GMT+0',
                'GMT-0',
                'GMT0',
                'Greenwich',
                'HST',
                'Hongkong',
                'Iceland',
                'Indian/Antananarivo',
                'Indian/Chagos',
                'Indian/Christmas',
                'Indian/Cocos',
                'Indian/Comoro',
                'Indian/Kerguelen',
                'Indian/Mahe',
                'Indian/Maldives',
                'Indian/Mauritius',
                'Indian/Mayotte',
                'Indian/Reunion',
                'Iran',
                'Israel',
                'Jamaica',
                'Japan',
                'Kwajalein',
                'Libya',
                'MET',
                'MST',
                'MST7MDT',
                'Mexico/BajaNorte',
                'Mexico/BajaSur',
                'Mexico/General',
                'NZ',
                'NZ-CHAT',
                'Navajo',
                'PRC',
                'PST8PDT',
                'Pacific/Apia',
                'Pacific/Auckland',
                'Pacific/Bougainville',
                'Pacific/Chatham',
                'Pacific/Chuuk',
                'Pacific/Easter',
                'Pacific/Efate',
                'Pacific/Enderbury',
                'Pacific/Fakaofo',
                'Pacific/Fiji',
                'Pacific/Funafuti',
                'Pacific/Galapagos',
                'Pacific/Gambier',
                'Pacific/Guadalcanal',
                'Pacific/Guam',
                'Pacific/Honolulu',
                'Pacific/Johnston',
                'Pacific/Kanton',
                'Pacific/Kiritimati',
                'Pacific/Kosrae',
                'Pacific/Kwajalein',
                'Pacific/Majuro',
                'Pacific/Marquesas',
                'Pacific/Midway',
                'Pacific/Nauru',
                'Pacific/Niue',
                'Pacific/Norfolk',
                'Pacific/Noumea',
                'Pacific/Pago_Pago',
                'Pacific/Palau',
                'Pacific/Pitcairn',
                'Pacific/Pohnpei',
                'Pacific/Ponape',
                'Pacific/Port_Moresby',
                'Pacific/Rarotonga',
                'Pacific/Saipan',
                'Pacific/Samoa',
                'Pacific/Tahiti',
                'Pacific/Tarawa',
                'Pacific/Tongatapu',
                'Pacific/Truk',
                'Pacific/Wake',
                'Pacific/Wallis',
                'Pacific/Yap',
                'Poland',
                'Portugal',
                'ROC',
                'ROK',
                'Singapore',
                'Turkey',
                'UCT',
                'US/Alaska',
                'US/Aleutian',
                'US/Arizona',
                'US/Central',
                'US/East-Indiana',
                'US/Eastern',
                'US/Hawaii',
                'US/Indiana-Starke',
                'US/Michigan',
                'US/Mountain',
                'US/Pacific',
                'US/Samoa',
                'UTC',
                'Universal',
                'W-SU',
                'WET',
                'Zulu',
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Asmera', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Lome', 'Africa/Luanda', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Malabo', 'Africa/Maputo', 'Africa/Maseru', 'Africa/Mbabane', 'Africa/Mogadishu', 'Africa/Monrovia', 'Africa/Nairobi', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Porto-Novo', 'Africa/Sao_Tome', 'Africa/Timbuktu', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Antigua', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/ComodRivadavia', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Atka', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Buenos_Aires', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Catamarca', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Ciudad_Juarez', 'America/Coral_Harbour', 'America/Cordoba', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Curacao', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Dominica', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Ensenada', 'America/Fort_Nelson', 'America/Fort_Wayne', 'America/Fortaleza', 'America/Glace_Bay', 'America/Godthab', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Grenada', 'America/Guadeloupe', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Indianapolis', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indianapolis', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Jujuy', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Knox_IN', 'America/Kralendijk', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Louisville', 'America/Lower_Princes', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Marigot', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Mendoza', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montreal', 'America/Montserrat', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Nuuk', 'America/Ojinaga', 'America/Panama', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Port_of_Spain', 'America/Porto_Acre', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Punta_Arenas', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Rio_Branco', 'America/Rosario', 'America/Santa_Isabel', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Shiprock', 'America/Sitka', 'America/St_Barthelemy', 'America/St_Johns', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Tijuana', 'America/Toronto', 'America/Tortola', 'America/Vancouver', 'America/Virgin', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/South_Pole', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Ashkhabad', 'Asia/Atyrau', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Barnaul', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Calcutta', 'Asia/Chita', 'Asia/Choibalsan', 'Asia/Chongqing', 'Asia/Chungking', 'Asia/Colombo', 'Asia/Dacca', 'Asia/Damascus', 'Asia/Dhaka', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Harbin', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Istanbul', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kashgar', 'Asia/Kathmandu', 'Asia/Katmandu', 'Asia/Khandyga', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Kuwait', 'Asia/Macao', 'Asia/Macau', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Muscat', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Phnom_Penh', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qatar', 'Asia/Qostanay', 'Asia/Qyzylorda', 'Asia/Rangoon', 'Asia/Riyadh', 'Asia/Saigon', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Tel_Aviv', 'Asia/Thimbu', 'Asia/Thimphu', 'Asia/Tokyo', 'Asia/Tomsk', 'Asia/Ujung_Pandang', 'Asia/Ulaanbaatar', 'Asia/Ulan_Bator', 'Asia/Urumqi', 'Asia/Ust-Nera', 'Asia/Vientiane', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yangon', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faeroe', 'Atlantic/Faroe', 'Atlantic/Jan_Mayen', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/St_Helena', 'Atlantic/Stanley', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Canberra', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/LHI', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/NSW', 'Australia/North', 'Australia/Perth', 'Australia/Queensland', 'Australia/South', 'Australia/Sydney', 'Australia/Tasmania', 'Australia/Victoria', 'Australia/West', 'Australia/Yancowinna', 'Brazil/Acre', 'Brazil/DeNoronha', 'Brazil/East', 'Brazil/West', 'CET', 'CST6CDT', 'Canada/Atlantic', 'Canada/Central', 'Canada/Eastern', 'Canada/Mountain', 'Canada/Newfoundland', 'Canada/Pacific', 'Canada/Saskatchewan', 'Canada/Yukon', 'Chile/Continental', 'Chile/EasterIsland', 'Cuba', 'EET', 'EST', 'EST5EDT', 'Egypt', 'Eire', 'Etc/GMT', 'Etc/GMT+0', 'Etc/GMT+1', 'Etc/GMT+10', 'Etc/GMT+11', 'Etc/GMT+12', 'Etc/GMT+2', 'Etc/GMT+3', 'Etc/GMT+4', 'Etc/GMT+5', 'Etc/GMT+6', 'Etc/GMT+7', 'Etc/GMT+8', 'Etc/GMT+9', 'Etc/GMT-0', 'Etc/GMT-1', 'Etc/GMT-10', 'Etc/GMT-11', 'Etc/GMT-12', 'Etc/GMT-13', 'Etc/GMT-14', 'Etc/GMT-2', 'Etc/GMT-3', 'Etc/GMT-4', 'Etc/GMT-5', 'Etc/GMT-6', 'Etc/GMT-7', 'Etc/GMT-8', 'Etc/GMT-9', 'Etc/GMT0', 'Etc/Greenwich', 'Etc/UCT', 'Etc/UTC', 'Etc/Universal', 'Etc/Zulu', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Astrakhan', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Kirov', 'Europe/Kyiv', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Nicosia', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Saratov', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Tiraspol', 'Europe/Ulyanovsk', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'GB', 'GB-Eire', 'GMT', 'GMT+0', 'GMT-0', 'GMT0', 'Greenwich', 'HST', 'Hongkong', 'Iceland', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Iran', 'Israel', 'Jamaica', 'Japan', 'Kwajalein', 'Libya', 'MET', 'MST', 'MST7MDT', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General', 'NZ', 'NZ-CHAT', 'Navajo', 'PRC', 'PST8PDT', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Bougainville', 'Pacific/Chatham', 'Pacific/Chuuk', 'Pacific/Easter', 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Johnston', 'Pacific/Kanton', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Ponape', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Samoa', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Truk', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Yap', 'Poland', 'Portugal', 'ROC', 'ROK', 'Singapore', 'Turkey', 'UCT', 'US/Alaska', 'US/Aleutian', 'US/Arizona', 'US/Central', 'US/East-Indiana', 'US/Eastern', 'US/Hawaii', 'US/Indiana-Starke', 'US/Michigan', 'US/Mountain', 'US/Pacific', 'US/Samoa', 'UTC', 'Universal', 'W-SU', 'WET', 'Zulu')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'id',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if max_dupes (nullable) is None
        # and model_fields_set contains the field
        if self.max_dupes is None and 'max_dupes' in self.model_fields_set:
            _dict['max_dupes'] = None

        # set to None if jira_webhook_secret (nullable) is None
        # and model_fields_set contains the field
        if self.jira_webhook_secret is None and 'jira_webhook_secret' in self.model_fields_set:
            _dict['jira_webhook_secret'] = None

        # set to None if jira_minimum_severity (nullable) is None
        # and model_fields_set contains the field
        if self.jira_minimum_severity is None and 'jira_minimum_severity' in self.model_fields_set:
            _dict['jira_minimum_severity'] = None

        # set to None if jira_labels (nullable) is None
        # and model_fields_set contains the field
        if self.jira_labels is None and 'jira_labels' in self.model_fields_set:
            _dict['jira_labels'] = None

        # set to None if risk_acceptance_form_default_days (nullable) is None
        # and model_fields_set contains the field
        if (
            self.risk_acceptance_form_default_days is None
            and 'risk_acceptance_form_default_days' in self.model_fields_set
        ):
            _dict['risk_acceptance_form_default_days'] = None

        # set to None if risk_acceptance_notify_before_expiration (nullable) is None
        # and model_fields_set contains the field
        if (
            self.risk_acceptance_notify_before_expiration is None
            and 'risk_acceptance_notify_before_expiration' in self.model_fields_set
        ):
            _dict['risk_acceptance_notify_before_expiration'] = None

        # set to None if default_group (nullable) is None
        # and model_fields_set contains the field
        if self.default_group is None and 'default_group' in self.model_fields_set:
            _dict['default_group'] = None

        # set to None if default_group_role (nullable) is None
        # and model_fields_set contains the field
        if self.default_group_role is None and 'default_group_role' in self.model_fields_set:
            _dict['default_group_role'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'id': obj.get('id'),
                'enable_deduplication': obj.get('enable_deduplication'),
                'delete_duplicates': obj.get('delete_duplicates'),
                'max_dupes': obj.get('max_dupes'),
                'email_from': obj.get('email_from'),
                'enable_jira': obj.get('enable_jira'),
                'enable_jira_web_hook': obj.get('enable_jira_web_hook'),
                'disable_jira_webhook_secret': obj.get('disable_jira_webhook_secret'),
                'jira_webhook_secret': obj.get('jira_webhook_secret'),
                'jira_minimum_severity': obj.get('jira_minimum_severity'),
                'jira_labels': obj.get('jira_labels'),
                'add_vulnerability_id_to_jira_label': obj.get('add_vulnerability_id_to_jira_label'),
                'enable_github': obj.get('enable_github'),
                'enable_slack_notifications': obj.get('enable_slack_notifications'),
                'slack_channel': obj.get('slack_channel'),
                'slack_token': obj.get('slack_token'),
                'slack_username': obj.get('slack_username'),
                'enable_msteams_notifications': obj.get('enable_msteams_notifications'),
                'msteams_url': obj.get('msteams_url'),
                'enable_mail_notifications': obj.get('enable_mail_notifications'),
                'mail_notifications_to': obj.get('mail_notifications_to'),
                'enable_webhooks_notifications': obj.get('enable_webhooks_notifications'),
                'webhooks_notifications_timeout': obj.get('webhooks_notifications_timeout'),
                'enforce_verified_status': obj.get('enforce_verified_status'),
                'enforce_verified_status_jira': obj.get('enforce_verified_status_jira'),
                'enforce_verified_status_product_grading': obj.get('enforce_verified_status_product_grading'),
                'enforce_verified_status_metrics': obj.get('enforce_verified_status_metrics'),
                'false_positive_history': obj.get('false_positive_history'),
                'retroactive_false_positive_history': obj.get('retroactive_false_positive_history'),
                'url_prefix': obj.get('url_prefix'),
                'team_name': obj.get('team_name'),
                'time_zone': obj.get('time_zone'),
                'enable_product_grade': obj.get('enable_product_grade'),
                'product_grade': obj.get('product_grade'),
                'product_grade_a': obj.get('product_grade_a'),
                'product_grade_b': obj.get('product_grade_b'),
                'product_grade_c': obj.get('product_grade_c'),
                'product_grade_d': obj.get('product_grade_d'),
                'product_grade_f': obj.get('product_grade_f'),
                'enable_product_tag_inheritance': obj.get('enable_product_tag_inheritance'),
                'enable_benchmark': obj.get('enable_benchmark'),
                'enable_template_match': obj.get('enable_template_match'),
                'enable_similar_findings': obj.get('enable_similar_findings'),
                'engagement_auto_close': obj.get('engagement_auto_close'),
                'engagement_auto_close_days': obj.get('engagement_auto_close_days'),
                'enable_finding_sla': obj.get('enable_finding_sla'),
                'enable_notify_sla_active': obj.get('enable_notify_sla_active'),
                'enable_notify_sla_active_verified': obj.get('enable_notify_sla_active_verified'),
                'enable_notify_sla_jira_only': obj.get('enable_notify_sla_jira_only'),
                'enable_notify_sla_exponential_backoff': obj.get('enable_notify_sla_exponential_backoff'),
                'allow_anonymous_survey_repsonse': obj.get('allow_anonymous_survey_repsonse'),
                'credentials': obj.get('credentials'),
                'disclaimer_notifications': obj.get('disclaimer_notifications'),
                'disclaimer_reports': obj.get('disclaimer_reports'),
                'disclaimer_reports_forced': obj.get('disclaimer_reports_forced'),
                'disclaimer_notes': obj.get('disclaimer_notes'),
                'risk_acceptance_form_default_days': obj.get('risk_acceptance_form_default_days'),
                'risk_acceptance_notify_before_expiration': obj.get('risk_acceptance_notify_before_expiration'),
                'enable_credentials': obj.get('enable_credentials'),
                'enable_questionnaires': obj.get('enable_questionnaires'),
                'enable_checklists': obj.get('enable_checklists'),
                'enable_endpoint_metadata_import': obj.get('enable_endpoint_metadata_import'),
                'enable_user_profile_editable': obj.get('enable_user_profile_editable'),
                'enable_product_tracking_files': obj.get('enable_product_tracking_files'),
                'enable_finding_groups': obj.get('enable_finding_groups'),
                'enable_ui_table_based_searching': obj.get('enable_ui_table_based_searching'),
                'enable_calendar': obj.get('enable_calendar'),
                'default_group_email_pattern': obj.get('default_group_email_pattern'),
                'minimum_password_length': obj.get('minimum_password_length'),
                'maximum_password_length': obj.get('maximum_password_length'),
                'number_character_required': obj.get('number_character_required'),
                'special_character_required': obj.get('special_character_required'),
                'lowercase_character_required': obj.get('lowercase_character_required'),
                'uppercase_character_required': obj.get('uppercase_character_required'),
                'non_common_password_required': obj.get('non_common_password_required'),
                'api_expose_error_details': obj.get('api_expose_error_details'),
                'filter_string_matching': obj.get('filter_string_matching'),
                'default_group': obj.get('default_group'),
                'default_group_role': obj.get('default_group_role'),
            }
        )
        return _obj

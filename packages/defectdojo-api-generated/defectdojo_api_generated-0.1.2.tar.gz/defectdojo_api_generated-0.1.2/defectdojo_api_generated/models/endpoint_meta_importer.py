# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class EndpointMetaImporter(BaseModel):
    """
    EndpointMetaImporter
    """  # noqa: E501

    file: StrictStr
    create_endpoints: Optional[StrictBool] = True
    create_tags: Optional[StrictBool] = True
    create_dojo_meta: Optional[StrictBool] = False
    product_name: Optional[StrictStr] = None
    product: Optional[StrictInt] = None
    product_id: StrictInt
    __properties: ClassVar[List[str]] = [
        'file',
        'create_endpoints',
        'create_tags',
        'create_dojo_meta',
        'product_name',
        'product',
        'product_id',
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EndpointMetaImporter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'product_id',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EndpointMetaImporter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'file': obj.get('file'),
                'create_endpoints': obj.get('create_endpoints') if obj.get('create_endpoints') is not None else True,
                'create_tags': obj.get('create_tags') if obj.get('create_tags') is not None else True,
                'create_dojo_meta': obj.get('create_dojo_meta') if obj.get('create_dojo_meta') is not None else False,
                'product_name': obj.get('product_name'),
                'product': obj.get('product'),
                'product_id': obj.get('product_id'),
            }
        )
        return _obj

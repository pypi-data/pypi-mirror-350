# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from defectdojo_api_generated.models.file import File
from defectdojo_api_generated.models.finding_group import FindingGroup
from defectdojo_api_generated.models.note import Note


class Test(BaseModel):
    """
    Test
    """  # noqa: E501

    id: StrictInt
    tags: Optional[List[StrictStr]] = None
    test_type_name: StrictStr
    finding_groups: List[FindingGroup]
    scan_type: Optional[StrictStr] = None
    title: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    description: Optional[StrictStr] = None
    target_start: datetime
    target_end: datetime
    estimated_time: Optional[StrictStr]
    actual_time: Optional[StrictStr]
    percent_complete: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    updated: Optional[datetime]
    created: Optional[datetime]
    version: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    build_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description='Build ID that was tested, a reimport may update this field.'
    )
    commit_hash: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description='Commit hash tested, a reimport may update this field.'
    )
    branch_tag: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description='Tag or branch that was tested, a reimport may update this field.'
    )
    engagement: StrictInt
    lead: Optional[StrictInt] = None
    test_type: StrictInt
    environment: Optional[StrictInt] = None
    api_scan_configuration: Optional[StrictInt] = None
    notes: List[Note]
    files: List[File]
    __properties: ClassVar[List[str]] = [
        'id',
        'tags',
        'test_type_name',
        'finding_groups',
        'scan_type',
        'title',
        'description',
        'target_start',
        'target_end',
        'estimated_time',
        'actual_time',
        'percent_complete',
        'updated',
        'created',
        'version',
        'build_id',
        'commit_hash',
        'branch_tag',
        'engagement',
        'lead',
        'test_type',
        'environment',
        'api_scan_configuration',
        'notes',
        'files',
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Test from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'id',
                'test_type_name',
                'finding_groups',
                'estimated_time',
                'actual_time',
                'updated',
                'created',
                'engagement',
                'notes',
                'files',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in finding_groups (list)
        _items = []
        if self.finding_groups:
            for _item_finding_groups in self.finding_groups:
                if _item_finding_groups:
                    _items.append(_item_finding_groups.to_dict())
            _dict['finding_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item_notes in self.notes:
                if _item_notes:
                    _items.append(_item_notes.to_dict())
            _dict['notes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # set to None if scan_type (nullable) is None
        # and model_fields_set contains the field
        if self.scan_type is None and 'scan_type' in self.model_fields_set:
            _dict['scan_type'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and 'title' in self.model_fields_set:
            _dict['title'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and 'description' in self.model_fields_set:
            _dict['description'] = None

        # set to None if estimated_time (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_time is None and 'estimated_time' in self.model_fields_set:
            _dict['estimated_time'] = None

        # set to None if actual_time (nullable) is None
        # and model_fields_set contains the field
        if self.actual_time is None and 'actual_time' in self.model_fields_set:
            _dict['actual_time'] = None

        # set to None if percent_complete (nullable) is None
        # and model_fields_set contains the field
        if self.percent_complete is None and 'percent_complete' in self.model_fields_set:
            _dict['percent_complete'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and 'updated' in self.model_fields_set:
            _dict['updated'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and 'created' in self.model_fields_set:
            _dict['created'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and 'version' in self.model_fields_set:
            _dict['version'] = None

        # set to None if build_id (nullable) is None
        # and model_fields_set contains the field
        if self.build_id is None and 'build_id' in self.model_fields_set:
            _dict['build_id'] = None

        # set to None if commit_hash (nullable) is None
        # and model_fields_set contains the field
        if self.commit_hash is None and 'commit_hash' in self.model_fields_set:
            _dict['commit_hash'] = None

        # set to None if branch_tag (nullable) is None
        # and model_fields_set contains the field
        if self.branch_tag is None and 'branch_tag' in self.model_fields_set:
            _dict['branch_tag'] = None

        # set to None if lead (nullable) is None
        # and model_fields_set contains the field
        if self.lead is None and 'lead' in self.model_fields_set:
            _dict['lead'] = None

        # set to None if environment (nullable) is None
        # and model_fields_set contains the field
        if self.environment is None and 'environment' in self.model_fields_set:
            _dict['environment'] = None

        # set to None if api_scan_configuration (nullable) is None
        # and model_fields_set contains the field
        if self.api_scan_configuration is None and 'api_scan_configuration' in self.model_fields_set:
            _dict['api_scan_configuration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Test from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'id': obj.get('id'),
                'tags': obj.get('tags'),
                'test_type_name': obj.get('test_type_name'),
                'finding_groups': [FindingGroup.from_dict(_item) for _item in obj['finding_groups']]
                if obj.get('finding_groups') is not None
                else None,
                'scan_type': obj.get('scan_type'),
                'title': obj.get('title'),
                'description': obj.get('description'),
                'target_start': obj.get('target_start'),
                'target_end': obj.get('target_end'),
                'estimated_time': obj.get('estimated_time'),
                'actual_time': obj.get('actual_time'),
                'percent_complete': obj.get('percent_complete'),
                'updated': obj.get('updated'),
                'created': obj.get('created'),
                'version': obj.get('version'),
                'build_id': obj.get('build_id'),
                'commit_hash': obj.get('commit_hash'),
                'branch_tag': obj.get('branch_tag'),
                'engagement': obj.get('engagement'),
                'lead': obj.get('lead'),
                'test_type': obj.get('test_type'),
                'environment': obj.get('environment'),
                'api_scan_configuration': obj.get('api_scan_configuration'),
                'notes': [Note.from_dict(_item) for _item in obj['notes']] if obj.get('notes') is not None else None,
                'files': [File.from_dict(_item) for _item in obj['files']] if obj.get('files') is not None else None,
            }
        )
        return _obj

# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Annotated, Self

from defectdojo_api_generated.models.questionnaire_engagement_survey import QuestionnaireEngagementSurvey


class QuestionnaireGeneralSurvey(BaseModel):
    """
    QuestionnaireGeneralSurvey
    """  # noqa: E501

    id: StrictInt
    survey: QuestionnaireEngagementSurvey
    num_responses: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    generated: Optional[datetime]
    expiration: datetime
    __properties: ClassVar[List[str]] = ['id', 'survey', 'num_responses', 'generated', 'expiration']

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuestionnaireGeneralSurvey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'id',
                'generated',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of survey
        if self.survey:
            _dict['survey'] = self.survey.to_dict()
        # set to None if generated (nullable) is None
        # and model_fields_set contains the field
        if self.generated is None and 'generated' in self.model_fields_set:
            _dict['generated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuestionnaireGeneralSurvey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'id': obj.get('id'),
                'survey': QuestionnaireEngagementSurvey.from_dict(obj['survey'])
                if obj.get('survey') is not None
                else None,
                'num_responses': obj.get('num_responses'),
                'generated': obj.get('generated'),
                'expiration': obj.get('expiration'),
            }
        )
        return _obj

# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from defectdojo_api_generated.models.endpoint import Endpoint
from defectdojo_api_generated.models.engagement_check_list import EngagementCheckList
from defectdojo_api_generated.models.file import File
from defectdojo_api_generated.models.finding_group import FindingGroup
from defectdojo_api_generated.models.note import Note
from defectdojo_api_generated.models.risk_acceptance import RiskAcceptance
from defectdojo_api_generated.models.sonarqube_issue import SonarqubeIssue
from defectdojo_api_generated.models.test import Test
from defectdojo_api_generated.models.test_import import TestImport
from defectdojo_api_generated.models.test_type import TestType
from defectdojo_api_generated.models.user_stub import UserStub


class FindingPrefetch(BaseModel):
    """
    FindingPrefetch
    """  # noqa: E501

    auth_issues: Optional[Dict[str, EngagementCheckList]] = None
    author_issues: Optional[Dict[str, EngagementCheckList]] = None
    config_issues: Optional[Dict[str, EngagementCheckList]] = None
    crypto_issues: Optional[Dict[str, EngagementCheckList]] = None
    data_issues: Optional[Dict[str, EngagementCheckList]] = None
    defect_review_requested_by: Optional[Dict[str, UserStub]] = None
    duplicate_finding: Optional[Dict[str, Finding]] = None
    endpoint_set: Optional[Dict[str, Endpoint]] = None
    endpoints: Optional[Dict[str, Endpoint]] = None
    files: Optional[Dict[str, File]] = None
    finding_group_set: Optional[Dict[str, FindingGroup]] = None
    found_by: Optional[Dict[str, TestType]] = None
    last_reviewed_by: Optional[Dict[str, UserStub]] = None
    mitigated_by: Optional[Dict[str, UserStub]] = None
    notes: Optional[Dict[str, Note]] = None
    other_issues: Optional[Dict[str, EngagementCheckList]] = None
    reporter: Optional[Dict[str, UserStub]] = None
    review_requested_by: Optional[Dict[str, UserStub]] = None
    reviewers: Optional[Dict[str, UserStub]] = None
    risk_acceptance_set: Optional[Dict[str, RiskAcceptance]] = None
    sensitive_issues: Optional[Dict[str, EngagementCheckList]] = None
    session_issues: Optional[Dict[str, EngagementCheckList]] = None
    sonarqube_issue: Optional[Dict[str, SonarqubeIssue]] = None
    test: Optional[Dict[str, Test]] = None
    test_import_set: Optional[Dict[str, TestImport]] = None
    __properties: ClassVar[List[str]] = [
        'auth_issues',
        'author_issues',
        'config_issues',
        'crypto_issues',
        'data_issues',
        'defect_review_requested_by',
        'duplicate_finding',
        'endpoint_set',
        'endpoints',
        'files',
        'finding_group_set',
        'found_by',
        'last_reviewed_by',
        'mitigated_by',
        'notes',
        'other_issues',
        'reporter',
        'review_requested_by',
        'reviewers',
        'risk_acceptance_set',
        'sensitive_issues',
        'session_issues',
        'sonarqube_issue',
        'test',
        'test_import_set',
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindingPrefetch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'auth_issues',
                'author_issues',
                'config_issues',
                'crypto_issues',
                'data_issues',
                'defect_review_requested_by',
                'duplicate_finding',
                'endpoint_set',
                'endpoints',
                'files',
                'finding_group_set',
                'found_by',
                'last_reviewed_by',
                'mitigated_by',
                'notes',
                'other_issues',
                'reporter',
                'review_requested_by',
                'reviewers',
                'risk_acceptance_set',
                'sensitive_issues',
                'session_issues',
                'sonarqube_issue',
                'test',
                'test_import_set',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in auth_issues (dict)
        _field_dict = {}
        if self.auth_issues:
            for _key_auth_issues in self.auth_issues:
                if self.auth_issues[_key_auth_issues]:
                    _field_dict[_key_auth_issues] = self.auth_issues[_key_auth_issues].to_dict()
            _dict['auth_issues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in author_issues (dict)
        _field_dict = {}
        if self.author_issues:
            for _key_author_issues in self.author_issues:
                if self.author_issues[_key_author_issues]:
                    _field_dict[_key_author_issues] = self.author_issues[_key_author_issues].to_dict()
            _dict['author_issues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in config_issues (dict)
        _field_dict = {}
        if self.config_issues:
            for _key_config_issues in self.config_issues:
                if self.config_issues[_key_config_issues]:
                    _field_dict[_key_config_issues] = self.config_issues[_key_config_issues].to_dict()
            _dict['config_issues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in crypto_issues (dict)
        _field_dict = {}
        if self.crypto_issues:
            for _key_crypto_issues in self.crypto_issues:
                if self.crypto_issues[_key_crypto_issues]:
                    _field_dict[_key_crypto_issues] = self.crypto_issues[_key_crypto_issues].to_dict()
            _dict['crypto_issues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in data_issues (dict)
        _field_dict = {}
        if self.data_issues:
            for _key_data_issues in self.data_issues:
                if self.data_issues[_key_data_issues]:
                    _field_dict[_key_data_issues] = self.data_issues[_key_data_issues].to_dict()
            _dict['data_issues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in defect_review_requested_by (dict)
        _field_dict = {}
        if self.defect_review_requested_by:
            for _key_defect_review_requested_by in self.defect_review_requested_by:
                if self.defect_review_requested_by[_key_defect_review_requested_by]:
                    _field_dict[_key_defect_review_requested_by] = self.defect_review_requested_by[
                        _key_defect_review_requested_by
                    ].to_dict()
            _dict['defect_review_requested_by'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in duplicate_finding (dict)
        _field_dict = {}
        if self.duplicate_finding:
            for _key_duplicate_finding in self.duplicate_finding:
                if self.duplicate_finding[_key_duplicate_finding]:
                    _field_dict[_key_duplicate_finding] = self.duplicate_finding[_key_duplicate_finding].to_dict()
            _dict['duplicate_finding'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in endpoint_set (dict)
        _field_dict = {}
        if self.endpoint_set:
            for _key_endpoint_set in self.endpoint_set:
                if self.endpoint_set[_key_endpoint_set]:
                    _field_dict[_key_endpoint_set] = self.endpoint_set[_key_endpoint_set].to_dict()
            _dict['endpoint_set'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in endpoints (dict)
        _field_dict = {}
        if self.endpoints:
            for _key_endpoints in self.endpoints:
                if self.endpoints[_key_endpoints]:
                    _field_dict[_key_endpoints] = self.endpoints[_key_endpoints].to_dict()
            _dict['endpoints'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in files (dict)
        _field_dict = {}
        if self.files:
            for _key_files in self.files:
                if self.files[_key_files]:
                    _field_dict[_key_files] = self.files[_key_files].to_dict()
            _dict['files'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in finding_group_set (dict)
        _field_dict = {}
        if self.finding_group_set:
            for _key_finding_group_set in self.finding_group_set:
                if self.finding_group_set[_key_finding_group_set]:
                    _field_dict[_key_finding_group_set] = self.finding_group_set[_key_finding_group_set].to_dict()
            _dict['finding_group_set'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in found_by (dict)
        _field_dict = {}
        if self.found_by:
            for _key_found_by in self.found_by:
                if self.found_by[_key_found_by]:
                    _field_dict[_key_found_by] = self.found_by[_key_found_by].to_dict()
            _dict['found_by'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in last_reviewed_by (dict)
        _field_dict = {}
        if self.last_reviewed_by:
            for _key_last_reviewed_by in self.last_reviewed_by:
                if self.last_reviewed_by[_key_last_reviewed_by]:
                    _field_dict[_key_last_reviewed_by] = self.last_reviewed_by[_key_last_reviewed_by].to_dict()
            _dict['last_reviewed_by'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in mitigated_by (dict)
        _field_dict = {}
        if self.mitigated_by:
            for _key_mitigated_by in self.mitigated_by:
                if self.mitigated_by[_key_mitigated_by]:
                    _field_dict[_key_mitigated_by] = self.mitigated_by[_key_mitigated_by].to_dict()
            _dict['mitigated_by'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in notes (dict)
        _field_dict = {}
        if self.notes:
            for _key_notes in self.notes:
                if self.notes[_key_notes]:
                    _field_dict[_key_notes] = self.notes[_key_notes].to_dict()
            _dict['notes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in other_issues (dict)
        _field_dict = {}
        if self.other_issues:
            for _key_other_issues in self.other_issues:
                if self.other_issues[_key_other_issues]:
                    _field_dict[_key_other_issues] = self.other_issues[_key_other_issues].to_dict()
            _dict['other_issues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in reporter (dict)
        _field_dict = {}
        if self.reporter:
            for _key_reporter in self.reporter:
                if self.reporter[_key_reporter]:
                    _field_dict[_key_reporter] = self.reporter[_key_reporter].to_dict()
            _dict['reporter'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in review_requested_by (dict)
        _field_dict = {}
        if self.review_requested_by:
            for _key_review_requested_by in self.review_requested_by:
                if self.review_requested_by[_key_review_requested_by]:
                    _field_dict[_key_review_requested_by] = self.review_requested_by[_key_review_requested_by].to_dict()
            _dict['review_requested_by'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in reviewers (dict)
        _field_dict = {}
        if self.reviewers:
            for _key_reviewers in self.reviewers:
                if self.reviewers[_key_reviewers]:
                    _field_dict[_key_reviewers] = self.reviewers[_key_reviewers].to_dict()
            _dict['reviewers'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in risk_acceptance_set (dict)
        _field_dict = {}
        if self.risk_acceptance_set:
            for _key_risk_acceptance_set in self.risk_acceptance_set:
                if self.risk_acceptance_set[_key_risk_acceptance_set]:
                    _field_dict[_key_risk_acceptance_set] = self.risk_acceptance_set[_key_risk_acceptance_set].to_dict()
            _dict['risk_acceptance_set'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in sensitive_issues (dict)
        _field_dict = {}
        if self.sensitive_issues:
            for _key_sensitive_issues in self.sensitive_issues:
                if self.sensitive_issues[_key_sensitive_issues]:
                    _field_dict[_key_sensitive_issues] = self.sensitive_issues[_key_sensitive_issues].to_dict()
            _dict['sensitive_issues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in session_issues (dict)
        _field_dict = {}
        if self.session_issues:
            for _key_session_issues in self.session_issues:
                if self.session_issues[_key_session_issues]:
                    _field_dict[_key_session_issues] = self.session_issues[_key_session_issues].to_dict()
            _dict['session_issues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in sonarqube_issue (dict)
        _field_dict = {}
        if self.sonarqube_issue:
            for _key_sonarqube_issue in self.sonarqube_issue:
                if self.sonarqube_issue[_key_sonarqube_issue]:
                    _field_dict[_key_sonarqube_issue] = self.sonarqube_issue[_key_sonarqube_issue].to_dict()
            _dict['sonarqube_issue'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in test (dict)
        _field_dict = {}
        if self.test:
            for _key_test in self.test:
                if self.test[_key_test]:
                    _field_dict[_key_test] = self.test[_key_test].to_dict()
            _dict['test'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in test_import_set (dict)
        _field_dict = {}
        if self.test_import_set:
            for _key_test_import_set in self.test_import_set:
                if self.test_import_set[_key_test_import_set]:
                    _field_dict[_key_test_import_set] = self.test_import_set[_key_test_import_set].to_dict()
            _dict['test_import_set'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindingPrefetch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'auth_issues': dict((_k, EngagementCheckList.from_dict(_v)) for _k, _v in obj['auth_issues'].items())
                if obj.get('auth_issues') is not None
                else None,
                'author_issues': dict(
                    (_k, EngagementCheckList.from_dict(_v)) for _k, _v in obj['author_issues'].items()
                )
                if obj.get('author_issues') is not None
                else None,
                'config_issues': dict(
                    (_k, EngagementCheckList.from_dict(_v)) for _k, _v in obj['config_issues'].items()
                )
                if obj.get('config_issues') is not None
                else None,
                'crypto_issues': dict(
                    (_k, EngagementCheckList.from_dict(_v)) for _k, _v in obj['crypto_issues'].items()
                )
                if obj.get('crypto_issues') is not None
                else None,
                'data_issues': dict((_k, EngagementCheckList.from_dict(_v)) for _k, _v in obj['data_issues'].items())
                if obj.get('data_issues') is not None
                else None,
                'defect_review_requested_by': dict(
                    (_k, UserStub.from_dict(_v)) for _k, _v in obj['defect_review_requested_by'].items()
                )
                if obj.get('defect_review_requested_by') is not None
                else None,
                'duplicate_finding': dict((_k, Finding.from_dict(_v)) for _k, _v in obj['duplicate_finding'].items())
                if obj.get('duplicate_finding') is not None
                else None,
                'endpoint_set': dict((_k, Endpoint.from_dict(_v)) for _k, _v in obj['endpoint_set'].items())
                if obj.get('endpoint_set') is not None
                else None,
                'endpoints': dict((_k, Endpoint.from_dict(_v)) for _k, _v in obj['endpoints'].items())
                if obj.get('endpoints') is not None
                else None,
                'files': dict((_k, File.from_dict(_v)) for _k, _v in obj['files'].items())
                if obj.get('files') is not None
                else None,
                'finding_group_set': dict(
                    (_k, FindingGroup.from_dict(_v)) for _k, _v in obj['finding_group_set'].items()
                )
                if obj.get('finding_group_set') is not None
                else None,
                'found_by': dict((_k, TestType.from_dict(_v)) for _k, _v in obj['found_by'].items())
                if obj.get('found_by') is not None
                else None,
                'last_reviewed_by': dict((_k, UserStub.from_dict(_v)) for _k, _v in obj['last_reviewed_by'].items())
                if obj.get('last_reviewed_by') is not None
                else None,
                'mitigated_by': dict((_k, UserStub.from_dict(_v)) for _k, _v in obj['mitigated_by'].items())
                if obj.get('mitigated_by') is not None
                else None,
                'notes': dict((_k, Note.from_dict(_v)) for _k, _v in obj['notes'].items())
                if obj.get('notes') is not None
                else None,
                'other_issues': dict((_k, EngagementCheckList.from_dict(_v)) for _k, _v in obj['other_issues'].items())
                if obj.get('other_issues') is not None
                else None,
                'reporter': dict((_k, UserStub.from_dict(_v)) for _k, _v in obj['reporter'].items())
                if obj.get('reporter') is not None
                else None,
                'review_requested_by': dict(
                    (_k, UserStub.from_dict(_v)) for _k, _v in obj['review_requested_by'].items()
                )
                if obj.get('review_requested_by') is not None
                else None,
                'reviewers': dict((_k, UserStub.from_dict(_v)) for _k, _v in obj['reviewers'].items())
                if obj.get('reviewers') is not None
                else None,
                'risk_acceptance_set': dict(
                    (_k, RiskAcceptance.from_dict(_v)) for _k, _v in obj['risk_acceptance_set'].items()
                )
                if obj.get('risk_acceptance_set') is not None
                else None,
                'sensitive_issues': dict(
                    (_k, EngagementCheckList.from_dict(_v)) for _k, _v in obj['sensitive_issues'].items()
                )
                if obj.get('sensitive_issues') is not None
                else None,
                'session_issues': dict(
                    (_k, EngagementCheckList.from_dict(_v)) for _k, _v in obj['session_issues'].items()
                )
                if obj.get('session_issues') is not None
                else None,
                'sonarqube_issue': dict((_k, SonarqubeIssue.from_dict(_v)) for _k, _v in obj['sonarqube_issue'].items())
                if obj.get('sonarqube_issue') is not None
                else None,
                'test': dict((_k, Test.from_dict(_v)) for _k, _v in obj['test'].items())
                if obj.get('test') is not None
                else None,
                'test_import_set': dict((_k, TestImport.from_dict(_v)) for _k, _v in obj['test_import_set'].items())
                if obj.get('test_import_set') is not None
                else None,
            }
        )
        return _obj


from defectdojo_api_generated.models.finding import Finding

# TODO: Rewrite to not use raise_errors
FindingPrefetch.model_rebuild(raise_errors=False)

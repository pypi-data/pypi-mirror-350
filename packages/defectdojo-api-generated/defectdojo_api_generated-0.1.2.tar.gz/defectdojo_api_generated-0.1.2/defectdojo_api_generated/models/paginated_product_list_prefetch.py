# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from defectdojo_api_generated.models.regulation import Regulation
from defectdojo_api_generated.models.sla_configuration import SLAConfiguration
from defectdojo_api_generated.models.user_stub import UserStub


class PaginatedProductListPrefetch(BaseModel):
    """
    PaginatedProductListPrefetch
    """  # noqa: E501

    authorization_groups: Optional[Dict[str, DojoGroup]] = None
    members: Optional[Dict[str, UserStub]] = None
    prod_type: Optional[Dict[str, ProductType]] = None
    product_manager: Optional[Dict[str, UserStub]] = None
    regulations: Optional[Dict[str, Regulation]] = None
    sla_configuration: Optional[Dict[str, SLAConfiguration]] = None
    team_manager: Optional[Dict[str, UserStub]] = None
    technical_contact: Optional[Dict[str, UserStub]] = None
    __properties: ClassVar[List[str]] = [
        'authorization_groups',
        'members',
        'prod_type',
        'product_manager',
        'regulations',
        'sla_configuration',
        'team_manager',
        'technical_contact',
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaginatedProductListPrefetch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'authorization_groups',
                'members',
                'prod_type',
                'product_manager',
                'regulations',
                'sla_configuration',
                'team_manager',
                'technical_contact',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in authorization_groups (dict)
        _field_dict = {}
        if self.authorization_groups:
            for _key_authorization_groups in self.authorization_groups:
                if self.authorization_groups[_key_authorization_groups]:
                    _field_dict[_key_authorization_groups] = self.authorization_groups[
                        _key_authorization_groups
                    ].to_dict()
            _dict['authorization_groups'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in members (dict)
        _field_dict = {}
        if self.members:
            for _key_members in self.members:
                if self.members[_key_members]:
                    _field_dict[_key_members] = self.members[_key_members].to_dict()
            _dict['members'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in prod_type (dict)
        _field_dict = {}
        if self.prod_type:
            for _key_prod_type in self.prod_type:
                if self.prod_type[_key_prod_type]:
                    _field_dict[_key_prod_type] = self.prod_type[_key_prod_type].to_dict()
            _dict['prod_type'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in product_manager (dict)
        _field_dict = {}
        if self.product_manager:
            for _key_product_manager in self.product_manager:
                if self.product_manager[_key_product_manager]:
                    _field_dict[_key_product_manager] = self.product_manager[_key_product_manager].to_dict()
            _dict['product_manager'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in regulations (dict)
        _field_dict = {}
        if self.regulations:
            for _key_regulations in self.regulations:
                if self.regulations[_key_regulations]:
                    _field_dict[_key_regulations] = self.regulations[_key_regulations].to_dict()
            _dict['regulations'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in sla_configuration (dict)
        _field_dict = {}
        if self.sla_configuration:
            for _key_sla_configuration in self.sla_configuration:
                if self.sla_configuration[_key_sla_configuration]:
                    _field_dict[_key_sla_configuration] = self.sla_configuration[_key_sla_configuration].to_dict()
            _dict['sla_configuration'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in team_manager (dict)
        _field_dict = {}
        if self.team_manager:
            for _key_team_manager in self.team_manager:
                if self.team_manager[_key_team_manager]:
                    _field_dict[_key_team_manager] = self.team_manager[_key_team_manager].to_dict()
            _dict['team_manager'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in technical_contact (dict)
        _field_dict = {}
        if self.technical_contact:
            for _key_technical_contact in self.technical_contact:
                if self.technical_contact[_key_technical_contact]:
                    _field_dict[_key_technical_contact] = self.technical_contact[_key_technical_contact].to_dict()
            _dict['technical_contact'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaginatedProductListPrefetch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'authorization_groups': dict(
                    (_k, DojoGroup.from_dict(_v)) for _k, _v in obj['authorization_groups'].items()
                )
                if obj.get('authorization_groups') is not None
                else None,
                'members': dict((_k, UserStub.from_dict(_v)) for _k, _v in obj['members'].items())
                if obj.get('members') is not None
                else None,
                'prod_type': dict((_k, ProductType.from_dict(_v)) for _k, _v in obj['prod_type'].items())
                if obj.get('prod_type') is not None
                else None,
                'product_manager': dict((_k, UserStub.from_dict(_v)) for _k, _v in obj['product_manager'].items())
                if obj.get('product_manager') is not None
                else None,
                'regulations': dict((_k, Regulation.from_dict(_v)) for _k, _v in obj['regulations'].items())
                if obj.get('regulations') is not None
                else None,
                'sla_configuration': dict(
                    (_k, SLAConfiguration.from_dict(_v)) for _k, _v in obj['sla_configuration'].items()
                )
                if obj.get('sla_configuration') is not None
                else None,
                'team_manager': dict((_k, UserStub.from_dict(_v)) for _k, _v in obj['team_manager'].items())
                if obj.get('team_manager') is not None
                else None,
                'technical_contact': dict((_k, UserStub.from_dict(_v)) for _k, _v in obj['technical_contact'].items())
                if obj.get('technical_contact') is not None
                else None,
            }
        )
        return _obj


from defectdojo_api_generated.models.dojo_group import DojoGroup
from defectdojo_api_generated.models.product_type import ProductType

# TODO: Rewrite to not use raise_errors
PaginatedProductListPrefetch.model_rebuild(raise_errors=False)

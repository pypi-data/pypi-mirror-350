# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self

from defectdojo_api_generated.models.paginated_tool_configuration_list_prefetch import (
    PaginatedToolConfigurationListPrefetch,
)


class ToolConfiguration(BaseModel):
    """
    ToolConfiguration
    """  # noqa: E501

    id: StrictInt
    name: Annotated[str, Field(strict=True, max_length=200)]
    description: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    url: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    authentication_type: Optional[StrictStr] = Field(
        default=None, description='* `API` - API Key * `Password` - Username/Password * `SSH` - SSH'
    )
    extras: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(
        default=None, description='Additional definitions that will be consumed by scanner'
    )
    username: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    auth_title: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    tool_type: StrictInt
    prefetch: Optional[PaginatedToolConfigurationListPrefetch] = None
    __properties: ClassVar[List[str]] = [
        'id',
        'name',
        'description',
        'url',
        'authentication_type',
        'extras',
        'username',
        'auth_title',
        'tool_type',
        'prefetch',
    ]

    @field_validator('authentication_type')
    def authentication_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['API', 'Password', 'SSH', '']):
            raise ValueError("must be one of enum values ('API', 'Password', 'SSH', '')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'id',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prefetch
        if self.prefetch:
            _dict['prefetch'] = self.prefetch.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and 'description' in self.model_fields_set:
            _dict['description'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and 'url' in self.model_fields_set:
            _dict['url'] = None

        # set to None if authentication_type (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_type is None and 'authentication_type' in self.model_fields_set:
            _dict['authentication_type'] = None

        # set to None if extras (nullable) is None
        # and model_fields_set contains the field
        if self.extras is None and 'extras' in self.model_fields_set:
            _dict['extras'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and 'username' in self.model_fields_set:
            _dict['username'] = None

        # set to None if auth_title (nullable) is None
        # and model_fields_set contains the field
        if self.auth_title is None and 'auth_title' in self.model_fields_set:
            _dict['auth_title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'id': obj.get('id'),
                'name': obj.get('name'),
                'description': obj.get('description'),
                'url': obj.get('url'),
                'authentication_type': obj.get('authentication_type'),
                'extras': obj.get('extras'),
                'username': obj.get('username'),
                'auth_title': obj.get('auth_title'),
                'tool_type': obj.get('tool_type'),
                'prefetch': PaginatedToolConfigurationListPrefetch.from_dict(obj['prefetch'])
                if obj.get('prefetch') is not None
                else None,
            }
        )
        return _obj

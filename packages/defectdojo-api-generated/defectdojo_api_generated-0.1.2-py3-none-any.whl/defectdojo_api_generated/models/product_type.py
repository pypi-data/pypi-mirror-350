# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing_extensions import Annotated, Self


class ProductType(BaseModel):
    """
    ProductType
    """  # noqa: E501

    id: StrictInt
    name: Annotated[str, Field(strict=True, max_length=255)]
    description: Optional[Annotated[str, Field(strict=True, max_length=4000)]] = None
    critical_product: Optional[StrictBool] = None
    key_product: Optional[StrictBool] = None
    updated: Optional[datetime]
    created: Optional[datetime]
    members: List[StrictInt]
    authorization_groups: List[StrictInt]
    prefetch: Optional[PaginatedProductTypeListPrefetch] = None
    __properties: ClassVar[List[str]] = [
        'id',
        'name',
        'description',
        'critical_product',
        'key_product',
        'updated',
        'created',
        'members',
        'authorization_groups',
        'prefetch',
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'id',
                'updated',
                'created',
                'members',
                'authorization_groups',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prefetch
        if self.prefetch:
            _dict['prefetch'] = self.prefetch.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and 'description' in self.model_fields_set:
            _dict['description'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and 'updated' in self.model_fields_set:
            _dict['updated'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and 'created' in self.model_fields_set:
            _dict['created'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'id': obj.get('id'),
                'name': obj.get('name'),
                'description': obj.get('description'),
                'critical_product': obj.get('critical_product'),
                'key_product': obj.get('key_product'),
                'updated': obj.get('updated'),
                'created': obj.get('created'),
                'members': obj.get('members'),
                'authorization_groups': obj.get('authorization_groups'),
                'prefetch': PaginatedProductTypeListPrefetch.from_dict(obj['prefetch'])
                if obj.get('prefetch') is not None
                else None,
            }
        )
        return _obj


from defectdojo_api_generated.models.paginated_product_type_list_prefetch import PaginatedProductTypeListPrefetch

# TODO: Rewrite to not use raise_errors
ProductType.model_rebuild(raise_errors=False)

# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from defectdojo_api_generated.models.dojo_group_member import DojoGroupMember
from defectdojo_api_generated.models.global_role import GlobalRole
from defectdojo_api_generated.models.product_member import ProductMember
from defectdojo_api_generated.models.product_type_member import ProductTypeMember
from defectdojo_api_generated.models.user import User
from defectdojo_api_generated.models.user_contact_info import UserContactInfo


class UserProfile(BaseModel):
    """
    UserProfile
    """  # noqa: E501

    user: User
    user_contact_info: Optional[UserContactInfo] = None
    global_role: Optional[GlobalRole] = None
    dojo_group_member: List[DojoGroupMember]
    product_type_member: List[ProductTypeMember]
    product_member: List[ProductMember]
    __properties: ClassVar[List[str]] = [
        'user',
        'user_contact_info',
        'global_role',
        'dojo_group_member',
        'product_type_member',
        'product_member',
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_contact_info
        if self.user_contact_info:
            _dict['user_contact_info'] = self.user_contact_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of global_role
        if self.global_role:
            _dict['global_role'] = self.global_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dojo_group_member (list)
        _items = []
        if self.dojo_group_member:
            for _item_dojo_group_member in self.dojo_group_member:
                if _item_dojo_group_member:
                    _items.append(_item_dojo_group_member.to_dict())
            _dict['dojo_group_member'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_type_member (list)
        _items = []
        if self.product_type_member:
            for _item_product_type_member in self.product_type_member:
                if _item_product_type_member:
                    _items.append(_item_product_type_member.to_dict())
            _dict['product_type_member'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_member (list)
        _items = []
        if self.product_member:
            for _item_product_member in self.product_member:
                if _item_product_member:
                    _items.append(_item_product_member.to_dict())
            _dict['product_member'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'user': User.from_dict(obj['user']) if obj.get('user') is not None else None,
                'user_contact_info': UserContactInfo.from_dict(obj['user_contact_info'])
                if obj.get('user_contact_info') is not None
                else None,
                'global_role': GlobalRole.from_dict(obj['global_role']) if obj.get('global_role') is not None else None,
                'dojo_group_member': [DojoGroupMember.from_dict(_item) for _item in obj['dojo_group_member']]
                if obj.get('dojo_group_member') is not None
                else None,
                'product_type_member': [ProductTypeMember.from_dict(_item) for _item in obj['product_type_member']]
                if obj.get('product_type_member') is not None
                else None,
                'product_member': [ProductMember.from_dict(_item) for _item in obj['product_member']]
                if obj.get('product_member') is not None
                else None,
            }
        )
        return _obj

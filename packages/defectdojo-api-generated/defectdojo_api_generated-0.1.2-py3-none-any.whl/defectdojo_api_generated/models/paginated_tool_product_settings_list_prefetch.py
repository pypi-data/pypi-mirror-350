# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from defectdojo_api_generated.models.note import Note
from defectdojo_api_generated.models.product import Product
from defectdojo_api_generated.models.tool_configuration import ToolConfiguration


class PaginatedToolProductSettingsListPrefetch(BaseModel):
    """
    PaginatedToolProductSettingsListPrefetch
    """  # noqa: E501

    notes: Optional[Dict[str, Note]] = None
    product: Optional[Dict[str, Product]] = None
    tool_configuration: Optional[Dict[str, ToolConfiguration]] = None
    __properties: ClassVar[List[str]] = ['notes', 'product', 'tool_configuration']

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaginatedToolProductSettingsListPrefetch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'notes',
                'product',
                'tool_configuration',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in notes (dict)
        _field_dict = {}
        if self.notes:
            for _key_notes in self.notes:
                if self.notes[_key_notes]:
                    _field_dict[_key_notes] = self.notes[_key_notes].to_dict()
            _dict['notes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in product (dict)
        _field_dict = {}
        if self.product:
            for _key_product in self.product:
                if self.product[_key_product]:
                    _field_dict[_key_product] = self.product[_key_product].to_dict()
            _dict['product'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in tool_configuration (dict)
        _field_dict = {}
        if self.tool_configuration:
            for _key_tool_configuration in self.tool_configuration:
                if self.tool_configuration[_key_tool_configuration]:
                    _field_dict[_key_tool_configuration] = self.tool_configuration[_key_tool_configuration].to_dict()
            _dict['tool_configuration'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaginatedToolProductSettingsListPrefetch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'notes': dict((_k, Note.from_dict(_v)) for _k, _v in obj['notes'].items())
                if obj.get('notes') is not None
                else None,
                'product': dict((_k, Product.from_dict(_v)) for _k, _v in obj['product'].items())
                if obj.get('product') is not None
                else None,
                'tool_configuration': dict(
                    (_k, ToolConfiguration.from_dict(_v)) for _k, _v in obj['tool_configuration'].items()
                )
                if obj.get('tool_configuration') is not None
                else None,
            }
        )
        return _obj

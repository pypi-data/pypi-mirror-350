# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Annotated, Self

from defectdojo_api_generated.models.paginated_product_api_scan_configuration_list_prefetch import (
    PaginatedProductAPIScanConfigurationListPrefetch,
)


class ProductAPIScanConfiguration(BaseModel):
    """
    ProductAPIScanConfiguration
    """  # noqa: E501

    id: StrictInt
    service_key_1: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    service_key_2: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    service_key_3: Optional[Annotated[str, Field(strict=True, max_length=200)]] = None
    product: StrictInt
    tool_configuration: StrictInt
    prefetch: Optional[PaginatedProductAPIScanConfigurationListPrefetch] = None
    __properties: ClassVar[List[str]] = [
        'id',
        'service_key_1',
        'service_key_2',
        'service_key_3',
        'product',
        'tool_configuration',
        'prefetch',
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductAPIScanConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'id',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prefetch
        if self.prefetch:
            _dict['prefetch'] = self.prefetch.to_dict()
        # set to None if service_key_1 (nullable) is None
        # and model_fields_set contains the field
        if self.service_key_1 is None and 'service_key_1' in self.model_fields_set:
            _dict['service_key_1'] = None

        # set to None if service_key_2 (nullable) is None
        # and model_fields_set contains the field
        if self.service_key_2 is None and 'service_key_2' in self.model_fields_set:
            _dict['service_key_2'] = None

        # set to None if service_key_3 (nullable) is None
        # and model_fields_set contains the field
        if self.service_key_3 is None and 'service_key_3' in self.model_fields_set:
            _dict['service_key_3'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductAPIScanConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'id': obj.get('id'),
                'service_key_1': obj.get('service_key_1'),
                'service_key_2': obj.get('service_key_2'),
                'service_key_3': obj.get('service_key_3'),
                'product': obj.get('product'),
                'tool_configuration': obj.get('tool_configuration'),
                'prefetch': PaginatedProductAPIScanConfigurationListPrefetch.from_dict(obj['prefetch'])
                if obj.get('prefetch') is not None
                else None,
            }
        )
        return _obj

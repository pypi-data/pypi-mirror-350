# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date, datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self

from defectdojo_api_generated.models.finding_product import FindingProduct


class FindingEngagement(BaseModel):
    """
    FindingEngagement
    """  # noqa: E501

    id: StrictInt
    name: Optional[Annotated[str, Field(strict=True, max_length=300)]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    product: Optional[FindingProduct] = None
    target_start: date
    target_end: date
    branch_tag: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description='Tag or branch of the product the engagement tested.'
    )
    engagement_type: Optional[StrictStr] = Field(
        default=None, description='* `Interactive` - Interactive * `CI/CD` - CI/CD'
    )
    build_id: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description='Build ID of the product the engagement tested.'
    )
    commit_hash: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(
        default=None, description='Commit hash from repo'
    )
    version: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(
        default=None, description='Version of the product the engagement tested.'
    )
    created: Optional[datetime]
    updated: Optional[datetime]
    __properties: ClassVar[List[str]] = [
        'id',
        'name',
        'description',
        'product',
        'target_start',
        'target_end',
        'branch_tag',
        'engagement_type',
        'build_id',
        'commit_hash',
        'version',
        'created',
        'updated',
    ]

    @field_validator('engagement_type')
    def engagement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Interactive', 'CI/CD']):
            raise ValueError("must be one of enum values ('Interactive', 'CI/CD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        defer_build=True,
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindingEngagement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                'id',
                'created',
                'updated',
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and 'name' in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and 'description' in self.model_fields_set:
            _dict['description'] = None

        # set to None if branch_tag (nullable) is None
        # and model_fields_set contains the field
        if self.branch_tag is None and 'branch_tag' in self.model_fields_set:
            _dict['branch_tag'] = None

        # set to None if engagement_type (nullable) is None
        # and model_fields_set contains the field
        if self.engagement_type is None and 'engagement_type' in self.model_fields_set:
            _dict['engagement_type'] = None

        # set to None if build_id (nullable) is None
        # and model_fields_set contains the field
        if self.build_id is None and 'build_id' in self.model_fields_set:
            _dict['build_id'] = None

        # set to None if commit_hash (nullable) is None
        # and model_fields_set contains the field
        if self.commit_hash is None and 'commit_hash' in self.model_fields_set:
            _dict['commit_hash'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and 'version' in self.model_fields_set:
            _dict['version'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and 'created' in self.model_fields_set:
            _dict['created'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and 'updated' in self.model_fields_set:
            _dict['updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindingEngagement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                'id': obj.get('id'),
                'name': obj.get('name'),
                'description': obj.get('description'),
                'product': FindingProduct.from_dict(obj['product']) if obj.get('product') is not None else None,
                'target_start': obj.get('target_start'),
                'target_end': obj.get('target_end'),
                'branch_tag': obj.get('branch_tag'),
                'engagement_type': obj.get('engagement_type'),
                'build_id': obj.get('build_id'),
                'commit_hash': obj.get('commit_hash'),
                'version': obj.get('version'),
                'created': obj.get('created'),
                'updated': obj.get('updated'),
            }
        )
        return _obj

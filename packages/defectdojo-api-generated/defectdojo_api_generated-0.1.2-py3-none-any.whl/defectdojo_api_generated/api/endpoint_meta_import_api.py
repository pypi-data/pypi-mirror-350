# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import TYPE_CHECKING, Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated

from defectdojo_api_generated.api_client import ApiClient, RequestSerialized
from defectdojo_api_generated.api_response import ApiResponse
from defectdojo_api_generated.models.endpoint_meta_importer import EndpointMetaImporter
from defectdojo_api_generated.rest import RESTResponseType

if TYPE_CHECKING:
    """placeholder for IteratorResult types if any"""


class EndpointMetaImportApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    def endpoint_meta_import_create(
        self,
        file: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        create_endpoints: Optional[StrictBool] = None,
        create_tags: Optional[StrictBool] = None,
        create_dojo_meta: Optional[StrictBool] = None,
        product_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        product: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EndpointMetaImporter:
        """endpoint_meta_import_create

        Imports a CSV file into a product to propagate arbitrary meta and tags on endpoints.  By Names: - Provide `product_name` of existing product  By ID: - Provide the id of the product in the `product` parameter  In this scenario Defect Dojo will look up the product by the provided details.

        :param file: (required)
        :type file: bytearray
        :param create_endpoints:
        :type create_endpoints: bool
        :param create_tags:
        :type create_tags: bool
        :param create_dojo_meta:
        :type create_dojo_meta: bool
        :param product_name:
        :type product_name: str
        :param product:
        :type product: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._endpoint_meta_import_create_serialize(
            file=file,
            create_endpoints=create_endpoints,
            create_tags=create_tags,
            create_dojo_meta=create_dojo_meta,
            product_name=product_name,
            product=product,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': 'EndpointMetaImporter',
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def endpoint_meta_import_create_with_http_info(
        self,
        file: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        create_endpoints: Optional[StrictBool] = None,
        create_tags: Optional[StrictBool] = None,
        create_dojo_meta: Optional[StrictBool] = None,
        product_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        product: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EndpointMetaImporter]:
        """endpoint_meta_import_create

        Imports a CSV file into a product to propagate arbitrary meta and tags on endpoints.  By Names: - Provide `product_name` of existing product  By ID: - Provide the id of the product in the `product` parameter  In this scenario Defect Dojo will look up the product by the provided details.

        :param file: (required)
        :type file: bytearray
        :param create_endpoints:
        :type create_endpoints: bool
        :param create_tags:
        :type create_tags: bool
        :param create_dojo_meta:
        :type create_dojo_meta: bool
        :param product_name:
        :type product_name: str
        :param product:
        :type product: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._endpoint_meta_import_create_serialize(
            file=file,
            create_endpoints=create_endpoints,
            create_tags=create_tags,
            create_dojo_meta=create_dojo_meta,
            product_name=product_name,
            product=product,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': 'EndpointMetaImporter',
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def endpoint_meta_import_create_without_preload_content(
        self,
        file: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        create_endpoints: Optional[StrictBool] = None,
        create_tags: Optional[StrictBool] = None,
        create_dojo_meta: Optional[StrictBool] = None,
        product_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        product: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """endpoint_meta_import_create

        Imports a CSV file into a product to propagate arbitrary meta and tags on endpoints.  By Names: - Provide `product_name` of existing product  By ID: - Provide the id of the product in the `product` parameter  In this scenario Defect Dojo will look up the product by the provided details.

        :param file: (required)
        :type file: bytearray
        :param create_endpoints:
        :type create_endpoints: bool
        :param create_tags:
        :type create_tags: bool
        :param create_dojo_meta:
        :type create_dojo_meta: bool
        :param product_name:
        :type product_name: str
        :param product:
        :type product: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._endpoint_meta_import_create_serialize(
            file=file,
            create_endpoints=create_endpoints,
            create_tags=create_tags,
            create_dojo_meta=create_dojo_meta,
            product_name=product_name,
            product=product,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': 'EndpointMetaImporter',
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _endpoint_meta_import_create_serialize(
        self,
        file,
        create_endpoints,
        create_tags,
        create_dojo_meta,
        product_name,
        product,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if file is not None:
            _files['file'] = file
        if create_endpoints is not None:
            _form_params.append(('create_endpoints', create_endpoints))
        if create_tags is not None:
            _form_params.append(('create_tags', create_tags))
        if create_dojo_meta is not None:
            _form_params.append(('create_dojo_meta', create_dojo_meta))
        if product_name is not None:
            _form_params.append(('product_name', product_name))
        if product is not None:
            _form_params.append(('product', product))
        # process the body parameter

        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(['multipart/form-data'])
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ['basicAuth', 'cookieAuth', 'tokenAuth']

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/endpoint_meta_import/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

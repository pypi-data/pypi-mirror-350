# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from datetime import date
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated

from defectdojo_api_generated.api_client import ApiClient, RequestSerialized
from defectdojo_api_generated.api_response import ApiResponse
from defectdojo_api_generated.models.re_import_scan import ReImportScan
from defectdojo_api_generated.rest import RESTResponseType

if TYPE_CHECKING:
    """placeholder for IteratorResult types if any"""


class ReimportScanApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    def reimport_scan_create(
        self,
        scan_type: Annotated[
            StrictStr,
            Field(
                description='* `Acunetix Scan` - Acunetix Scan * `Anchore Engine Scan` - Anchore Engine Scan * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check * `Anchore Grype` - Anchore Grype * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report * `AppCheck Web Application Scanner` - AppCheck Web Application Scanner * `AppSpider Scan` - AppSpider Scan * `Aqua Scan` - Aqua Scan * `Arachni Scan` - Arachni Scan * `AuditJS Scan` - AuditJS Scan * `AWS Inspector2 Scan` - AWS Inspector2 Scan * `AWS Prowler Scan` - AWS Prowler Scan * `AWS Prowler V3` - AWS Prowler V3 * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan * `AWS Security Hub Scan` - AWS Security Hub Scan * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan * `Bandit Scan` - Bandit Scan * `Bearer CLI` - Bearer CLI * `BlackDuck API` - BlackDuck API * `Blackduck Binary Analysis` - Blackduck Binary Analysis * `Blackduck Component Risk` - Blackduck Component Risk * `Blackduck Hub Scan` - Blackduck Hub Scan * `Brakeman Scan` - Brakeman Scan * `Bugcrowd API Import` - Bugcrowd API Import * `BugCrowd Scan` - BugCrowd Scan * `Bundler-Audit Scan` - Bundler-Audit Scan * `Burp Dastardly Scan` - Burp Dastardly Scan * `Burp Enterprise Scan` - Burp Enterprise Scan * `Burp GraphQL API` - Burp GraphQL API * `Burp REST API` - Burp REST API * `Burp Scan` - Burp Scan * `CargoAudit Scan` - CargoAudit Scan * `Checkmarx CxFlow SAST` - Checkmarx CxFlow SAST * `Checkmarx One Scan` - Checkmarx One Scan * `Checkmarx OSA` - Checkmarx OSA * `Checkmarx Scan` - Checkmarx Scan * `Checkmarx Scan detailed` - Checkmarx Scan detailed * `Checkov Scan` - Checkov Scan * `Chef Inspect Log` - Chef Inspect Log * `Choctaw Hog Scan` - Choctaw Hog Scan * `Clair Scan` - Clair Scan * `Cloudsploit Scan` - Cloudsploit Scan * `Cobalt.io API Import` - Cobalt.io API Import * `Cobalt.io Scan` - Cobalt.io Scan * `Codechecker Report native` - Codechecker Report native * `Contrast Scan` - Contrast Scan * `Coverity API` - Coverity API * `Coverity Scan JSON Report` - Coverity Scan JSON Report * `Crashtest Security JSON File` - Crashtest Security JSON File * `Crashtest Security XML File` - Crashtest Security XML File * `CredScan Scan` - CredScan Scan * `Crunch42 Scan` - Crunch42 Scan * `CycloneDX Scan` - CycloneDX Scan * `DawnScanner Scan` - DawnScanner Scan * `Deepfence Threatmapper Report` - Deepfence Threatmapper Report * `Dependency Check Scan` - Dependency Check Scan * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export * `Detect-secrets Scan` - Detect-secrets Scan * `docker-bench-security Scan` - docker-bench-security Scan * `Dockle Scan` - Dockle Scan * `DrHeader JSON Importer` - DrHeader JSON Importer * `DSOP Scan` - DSOP Scan * `Duroc Hog Scan` - Duroc Hog Scan * `Edgescan Scan` - Edgescan Scan * `ESLint Scan` - ESLint Scan * `Essex Hog Scan` - Essex Hog Scan * `Fortify Scan` - Fortify Scan * `Generic Findings Import` - Generic Findings Import * `Ggshield Scan` - Ggshield Scan * `Github Vulnerability Scan` - Github Vulnerability Scan * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan * `GitLab Container Scan` - GitLab Container Scan * `GitLab DAST Report` - GitLab DAST Report * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report * `GitLab SAST Report` - GitLab SAST Report * `GitLab Secret Detection Report` - GitLab Secret Detection Report * `Gitleaks Scan` - Gitleaks Scan * `Google Cloud Artifact Vulnerability Scan` - Google Cloud Artifact Vulnerability Scan * `Gosec Scanner` - Gosec Scanner * `Gottingen Hog Scan` - Gottingen Hog Scan * `Govulncheck Scanner` - Govulncheck Scanner * `HackerOne Cases` - HackerOne Cases * `Hadolint Dockerfile check` - Hadolint Dockerfile check * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan * `HCL AppScan on Cloud SAST XML` - HCL AppScan on Cloud SAST XML * `HCLAppScan XML` - HCLAppScan XML * `Horusec Scan` - Horusec Scan * `Humble Json Importer` - Humble Json Importer * `HuskyCI Report` - HuskyCI Report * `Hydra Scan` - Hydra Scan * `IBM AppScan DAST` - IBM AppScan DAST * `Immuniweb Scan` - Immuniweb Scan * `IntSights Report` - IntSights Report * `Invicti Scan` - Invicti Scan * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan * `JFrog Xray On Demand Binary Scan` - JFrog Xray On Demand Binary Scan * `JFrog Xray Scan` - JFrog Xray Scan * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan * `KICS Scan` - KICS Scan * `Kiuwan SCA Scan` - Kiuwan SCA Scan * `Kiuwan Scan` - Kiuwan Scan * `KrakenD Audit Scan` - KrakenD Audit Scan * `kube-bench Scan` - kube-bench Scan * `Kubeaudit Scan` - Kubeaudit Scan * `KubeHunter Scan` - KubeHunter Scan * `Kubescape JSON Importer` - Kubescape JSON Importer * `Legitify Scan` - Legitify Scan * `Mend Scan` - Mend Scan * `Meterian Scan` - Meterian Scan * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan * `MobSF Scan` - MobSF Scan * `MobSF Scorecard Scan` - MobSF Scorecard Scan * `Mobsfscan Scan` - Mobsfscan Scan * `Mozilla Observatory Scan` - Mozilla Observatory Scan * `MSDefender Parser` - MSDefender Parser * `Nancy Scan` - Nancy Scan * `Netsparker Scan` - Netsparker Scan * `NeuVector (compliance)` - NeuVector (compliance) * `NeuVector (REST)` - NeuVector (REST) * `Nexpose Scan` - Nexpose Scan * `Nikto Scan` - Nikto Scan * `Nmap Scan` - Nmap Scan * `Node Security Platform Scan` - Node Security Platform Scan * `Nosey Parker Scan` - Nosey Parker Scan * `NPM Audit Scan` - NPM Audit Scan * `NPM Audit v7+ Scan` - NPM Audit v7+ Scan * `Nuclei Scan` - Nuclei Scan * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan * `OpenVAS Parser` - OpenVAS Parser * `ORT evaluated model Importer` - ORT evaluated model Importer * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer * `OSV Scan` - OSV Scan * `Outpost24 Scan` - Outpost24 Scan * `PHP Security Audit v2` - PHP Security Audit v2 * `PHP Symfony Security Check` - PHP Symfony Security Check * `pip-audit Scan` - pip-audit Scan * `PMD Scan` - PMD Scan * `Popeye Scan` - Popeye Scan * `Progpilot Scan` - Progpilot Scan * `PTART Report` - PTART Report * `PWN SAST` - PWN SAST * `Qualys Hacker Guardian Scan` - Qualys Hacker Guardian Scan * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML) * `Qualys Scan` - Qualys Scan * `Qualys Webapp Scan` - Qualys Webapp Scan * `Rapplex Scan` - Rapplex Scan * `Red Hat Satellite` - Red Hat Satellite * `Retire.js Scan` - Retire.js Scan * `Risk Recon API Importer` - Risk Recon API Importer * `Rubocop Scan` - Rubocop Scan * `Rusty Hog Scan` - Rusty Hog Scan * `SARIF` - SARIF * `Scantist Scan` - Scantist Scan * `Scout Suite Scan` - Scout Suite Scan * `Semgrep JSON Report` - Semgrep JSON Report * `SKF Scan` - SKF Scan * `Snyk Code Scan` - Snyk Code Scan * `Snyk Scan` - Snyk Scan * `Solar Appscreener Scan` - Solar Appscreener Scan * `SonarQube API Import` - SonarQube API Import * `SonarQube Scan` - SonarQube Scan * `SonarQube Scan detailed` - SonarQube Scan detailed * `Sonatype Application Scan` - Sonatype Application Scan * `SpotBugs Scan` - SpotBugs Scan * `SSH Audit Importer` - SSH Audit Importer * `SSL Labs Scan` - SSL Labs Scan * `Sslscan` - Sslscan * `Sslyze Scan` - Sslyze Scan * `SSLyze Scan (JSON)` - SSLyze Scan (JSON) * `StackHawk HawkScan` - StackHawk HawkScan * `Sysdig CLI Report` - Sysdig CLI Report * `Sysdig Vulnerability Report` - Sysdig Vulnerability Report * `Talisman Scan` - Talisman Scan * `Tenable Scan` - Tenable Scan * `Terrascan Scan` - Terrascan Scan * `Testssl Scan` - Testssl Scan * `TFSec Scan` - TFSec Scan * `Threagile risks report` - Threagile risks report * `ThreatComposer Scan` - ThreatComposer Scan * `Trivy Operator Scan` - Trivy Operator Scan * `Trivy Scan` - Trivy Scan * `Trufflehog Scan` - Trufflehog Scan * `Trufflehog3 Scan` - Trufflehog3 Scan * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan * `Trustwave Scan (CSV)` - Trustwave Scan (CSV) * `Twistlock Image Scan` - Twistlock Image Scan * `VCG Scan` - VCG Scan * `Veracode Scan` - Veracode Scan * `Veracode SourceClear Scan` - Veracode SourceClear Scan * `Vulners` - Vulners * `Wapiti Scan` - Wapiti Scan * `Wazuh` - Wazuh * `WFuzz JSON report` - WFuzz JSON report * `Whispers Scan` - Whispers Scan * `WhiteHat Sentinel` - WhiteHat Sentinel * `Wiz Scan` - Wiz Scan * `Wizcli Dir Scan` - Wizcli Dir Scan * `Wizcli IaC Scan` - Wizcli IaC Scan * `Wizcli Img Scan` - Wizcli Img Scan * `Wpscan` - Wpscan * `Xanitizer Scan` - Xanitizer Scan * `Yarn Audit Scan` - Yarn Audit Scan * `ZAP Scan` - ZAP Scan'
            ),
        ],
        scan_date: Annotated[
            Optional[date], Field(description='Scan completion date will be used on all findings.')
        ] = None,
        minimum_severity: Annotated[
            Optional[StrictStr],
            Field(
                description='Minimum severity level to be imported  * `Info` - Info * `Low` - Low * `Medium` - Medium * `High` - High * `Critical` - Critical'
            ),
        ] = None,
        active: Annotated[
            Optional[StrictBool],
            Field(description='Force findings to be active/inactive or default to the original tool (None)'),
        ] = None,
        verified: Annotated[
            Optional[StrictBool],
            Field(description='Force findings to be verified/not verified or default to the original tool (None)'),
        ] = None,
        endpoint_to_add: Annotated[
            Optional[StrictInt],
            Field(
                description='Enter the ID of an Endpoint that is associated with the target Product. New Findings will be added to that Endpoint.'
            ),
        ] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        product_type_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        product_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        engagement_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        engagement_end_date: Annotated[
            Optional[date],
            Field(
                description='End Date for Engagement. Default is current time + 365 days. Required format year-month-day'
            ),
        ] = None,
        source_code_management_uri: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True, max_length=600)]],
            Field(description='Resource link to source code'),
        ] = None,
        test_title: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        auto_create_context: Optional[StrictBool] = None,
        deduplication_on_engagement: Optional[StrictBool] = None,
        lead: Optional[StrictInt] = None,
        push_to_jira: Optional[StrictBool] = None,
        environment: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        build_id: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(description='ID of the build that was scanned.'),
        ] = None,
        branch_tag: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(description='Branch or Tag that was scanned.'),
        ] = None,
        commit_hash: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description='Commit that was scanned.')
        ] = None,
        api_scan_configuration: Optional[StrictInt] = None,
        service: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description='A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.'
            ),
        ] = None,
        group_by: Annotated[
            Optional[StrictStr],
            Field(
                description='Choose an option to automatically group new findings by the chosen option.  * `component_name` - Component Name * `component_name+component_version` - Component Name + Version * `file_path` - File path * `finding_title` - Finding Title'
            ),
        ] = None,
        create_finding_groups_for_all_findings: Annotated[
            Optional[StrictBool],
            Field(
                description='If set to false, finding groups will only be created when there is more than one grouped finding'
            ),
        ] = None,
        apply_tags_to_findings: Annotated[
            Optional[StrictBool], Field(description='If set to True, the tags will be applied to the findings')
        ] = None,
        apply_tags_to_endpoints: Annotated[
            Optional[StrictBool], Field(description='If set to True, the tags will be applied to the endpoints')
        ] = None,
        do_not_reactivate: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.'
            ),
        ] = None,
        test: Optional[StrictInt] = None,
        close_old_findings: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if old findings no longer present in the report get closed as mitigated when importing.'
            ),
        ] = None,
        close_old_findings_product_scope: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.'
            ),
        ] = None,
        version: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description='Version that will be set on existing Test object. Leave empty to leave existing value in place.'
            ),
        ] = None,
        tags: Annotated[
            Optional[List[Annotated[str, Field(min_length=1, strict=True)]]],
            Field(
                description='Modify existing tags that help describe this scan. (Existing test tags will be overwritten)'
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReImportScan:
        """reimport_scan_create

        Reimports a scan report into an existing test.  By ID: - Create a Product (or use an existing product) - Create an Engagement inside the product - Import a scan report and find the id of the Test - Provide this in the `test` parameter  By Names: - Create a Product (or use an existing product) - Create an Engagement inside the product - Import a report which will create a Test - Provide `product_name` - Provide `engagement_name` - Optional: Provide `test_title`  In this scenario Defect Dojo will look up the Test by the provided details. If no `test_title` is provided, the latest test inside the engagement will be chosen based on scan_type.  When using names you can let the importer automatically create Engagements, Products and Product_Types by using `auto_create_context=True`.  When `auto_create_context` is set to `True` you can use `deduplication_on_engagement` to restrict deduplication for imported Findings to the newly created Engagement.

        :param scan_type: * `Acunetix Scan` - Acunetix Scan * `Anchore Engine Scan` - Anchore Engine Scan * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check * `Anchore Grype` - Anchore Grype * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report * `AppCheck Web Application Scanner` - AppCheck Web Application Scanner * `AppSpider Scan` - AppSpider Scan * `Aqua Scan` - Aqua Scan * `Arachni Scan` - Arachni Scan * `AuditJS Scan` - AuditJS Scan * `AWS Inspector2 Scan` - AWS Inspector2 Scan * `AWS Prowler Scan` - AWS Prowler Scan * `AWS Prowler V3` - AWS Prowler V3 * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan * `AWS Security Hub Scan` - AWS Security Hub Scan * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan * `Bandit Scan` - Bandit Scan * `Bearer CLI` - Bearer CLI * `BlackDuck API` - BlackDuck API * `Blackduck Binary Analysis` - Blackduck Binary Analysis * `Blackduck Component Risk` - Blackduck Component Risk * `Blackduck Hub Scan` - Blackduck Hub Scan * `Brakeman Scan` - Brakeman Scan * `Bugcrowd API Import` - Bugcrowd API Import * `BugCrowd Scan` - BugCrowd Scan * `Bundler-Audit Scan` - Bundler-Audit Scan * `Burp Dastardly Scan` - Burp Dastardly Scan * `Burp Enterprise Scan` - Burp Enterprise Scan * `Burp GraphQL API` - Burp GraphQL API * `Burp REST API` - Burp REST API * `Burp Scan` - Burp Scan * `CargoAudit Scan` - CargoAudit Scan * `Checkmarx CxFlow SAST` - Checkmarx CxFlow SAST * `Checkmarx One Scan` - Checkmarx One Scan * `Checkmarx OSA` - Checkmarx OSA * `Checkmarx Scan` - Checkmarx Scan * `Checkmarx Scan detailed` - Checkmarx Scan detailed * `Checkov Scan` - Checkov Scan * `Chef Inspect Log` - Chef Inspect Log * `Choctaw Hog Scan` - Choctaw Hog Scan * `Clair Scan` - Clair Scan * `Cloudsploit Scan` - Cloudsploit Scan * `Cobalt.io API Import` - Cobalt.io API Import * `Cobalt.io Scan` - Cobalt.io Scan * `Codechecker Report native` - Codechecker Report native * `Contrast Scan` - Contrast Scan * `Coverity API` - Coverity API * `Coverity Scan JSON Report` - Coverity Scan JSON Report * `Crashtest Security JSON File` - Crashtest Security JSON File * `Crashtest Security XML File` - Crashtest Security XML File * `CredScan Scan` - CredScan Scan * `Crunch42 Scan` - Crunch42 Scan * `CycloneDX Scan` - CycloneDX Scan * `DawnScanner Scan` - DawnScanner Scan * `Deepfence Threatmapper Report` - Deepfence Threatmapper Report * `Dependency Check Scan` - Dependency Check Scan * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export * `Detect-secrets Scan` - Detect-secrets Scan * `docker-bench-security Scan` - docker-bench-security Scan * `Dockle Scan` - Dockle Scan * `DrHeader JSON Importer` - DrHeader JSON Importer * `DSOP Scan` - DSOP Scan * `Duroc Hog Scan` - Duroc Hog Scan * `Edgescan Scan` - Edgescan Scan * `ESLint Scan` - ESLint Scan * `Essex Hog Scan` - Essex Hog Scan * `Fortify Scan` - Fortify Scan * `Generic Findings Import` - Generic Findings Import * `Ggshield Scan` - Ggshield Scan * `Github Vulnerability Scan` - Github Vulnerability Scan * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan * `GitLab Container Scan` - GitLab Container Scan * `GitLab DAST Report` - GitLab DAST Report * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report * `GitLab SAST Report` - GitLab SAST Report * `GitLab Secret Detection Report` - GitLab Secret Detection Report * `Gitleaks Scan` - Gitleaks Scan * `Google Cloud Artifact Vulnerability Scan` - Google Cloud Artifact Vulnerability Scan * `Gosec Scanner` - Gosec Scanner * `Gottingen Hog Scan` - Gottingen Hog Scan * `Govulncheck Scanner` - Govulncheck Scanner * `HackerOne Cases` - HackerOne Cases * `Hadolint Dockerfile check` - Hadolint Dockerfile check * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan * `HCL AppScan on Cloud SAST XML` - HCL AppScan on Cloud SAST XML * `HCLAppScan XML` - HCLAppScan XML * `Horusec Scan` - Horusec Scan * `Humble Json Importer` - Humble Json Importer * `HuskyCI Report` - HuskyCI Report * `Hydra Scan` - Hydra Scan * `IBM AppScan DAST` - IBM AppScan DAST * `Immuniweb Scan` - Immuniweb Scan * `IntSights Report` - IntSights Report * `Invicti Scan` - Invicti Scan * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan * `JFrog Xray On Demand Binary Scan` - JFrog Xray On Demand Binary Scan * `JFrog Xray Scan` - JFrog Xray Scan * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan * `KICS Scan` - KICS Scan * `Kiuwan SCA Scan` - Kiuwan SCA Scan * `Kiuwan Scan` - Kiuwan Scan * `KrakenD Audit Scan` - KrakenD Audit Scan * `kube-bench Scan` - kube-bench Scan * `Kubeaudit Scan` - Kubeaudit Scan * `KubeHunter Scan` - KubeHunter Scan * `Kubescape JSON Importer` - Kubescape JSON Importer * `Legitify Scan` - Legitify Scan * `Mend Scan` - Mend Scan * `Meterian Scan` - Meterian Scan * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan * `MobSF Scan` - MobSF Scan * `MobSF Scorecard Scan` - MobSF Scorecard Scan * `Mobsfscan Scan` - Mobsfscan Scan * `Mozilla Observatory Scan` - Mozilla Observatory Scan * `MSDefender Parser` - MSDefender Parser * `Nancy Scan` - Nancy Scan * `Netsparker Scan` - Netsparker Scan * `NeuVector (compliance)` - NeuVector (compliance) * `NeuVector (REST)` - NeuVector (REST) * `Nexpose Scan` - Nexpose Scan * `Nikto Scan` - Nikto Scan * `Nmap Scan` - Nmap Scan * `Node Security Platform Scan` - Node Security Platform Scan * `Nosey Parker Scan` - Nosey Parker Scan * `NPM Audit Scan` - NPM Audit Scan * `NPM Audit v7+ Scan` - NPM Audit v7+ Scan * `Nuclei Scan` - Nuclei Scan * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan * `OpenVAS Parser` - OpenVAS Parser * `ORT evaluated model Importer` - ORT evaluated model Importer * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer * `OSV Scan` - OSV Scan * `Outpost24 Scan` - Outpost24 Scan * `PHP Security Audit v2` - PHP Security Audit v2 * `PHP Symfony Security Check` - PHP Symfony Security Check * `pip-audit Scan` - pip-audit Scan * `PMD Scan` - PMD Scan * `Popeye Scan` - Popeye Scan * `Progpilot Scan` - Progpilot Scan * `PTART Report` - PTART Report * `PWN SAST` - PWN SAST * `Qualys Hacker Guardian Scan` - Qualys Hacker Guardian Scan * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML) * `Qualys Scan` - Qualys Scan * `Qualys Webapp Scan` - Qualys Webapp Scan * `Rapplex Scan` - Rapplex Scan * `Red Hat Satellite` - Red Hat Satellite * `Retire.js Scan` - Retire.js Scan * `Risk Recon API Importer` - Risk Recon API Importer * `Rubocop Scan` - Rubocop Scan * `Rusty Hog Scan` - Rusty Hog Scan * `SARIF` - SARIF * `Scantist Scan` - Scantist Scan * `Scout Suite Scan` - Scout Suite Scan * `Semgrep JSON Report` - Semgrep JSON Report * `SKF Scan` - SKF Scan * `Snyk Code Scan` - Snyk Code Scan * `Snyk Scan` - Snyk Scan * `Solar Appscreener Scan` - Solar Appscreener Scan * `SonarQube API Import` - SonarQube API Import * `SonarQube Scan` - SonarQube Scan * `SonarQube Scan detailed` - SonarQube Scan detailed * `Sonatype Application Scan` - Sonatype Application Scan * `SpotBugs Scan` - SpotBugs Scan * `SSH Audit Importer` - SSH Audit Importer * `SSL Labs Scan` - SSL Labs Scan * `Sslscan` - Sslscan * `Sslyze Scan` - Sslyze Scan * `SSLyze Scan (JSON)` - SSLyze Scan (JSON) * `StackHawk HawkScan` - StackHawk HawkScan * `Sysdig CLI Report` - Sysdig CLI Report * `Sysdig Vulnerability Report` - Sysdig Vulnerability Report * `Talisman Scan` - Talisman Scan * `Tenable Scan` - Tenable Scan * `Terrascan Scan` - Terrascan Scan * `Testssl Scan` - Testssl Scan * `TFSec Scan` - TFSec Scan * `Threagile risks report` - Threagile risks report * `ThreatComposer Scan` - ThreatComposer Scan * `Trivy Operator Scan` - Trivy Operator Scan * `Trivy Scan` - Trivy Scan * `Trufflehog Scan` - Trufflehog Scan * `Trufflehog3 Scan` - Trufflehog3 Scan * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan * `Trustwave Scan (CSV)` - Trustwave Scan (CSV) * `Twistlock Image Scan` - Twistlock Image Scan * `VCG Scan` - VCG Scan * `Veracode Scan` - Veracode Scan * `Veracode SourceClear Scan` - Veracode SourceClear Scan * `Vulners` - Vulners * `Wapiti Scan` - Wapiti Scan * `Wazuh` - Wazuh * `WFuzz JSON report` - WFuzz JSON report * `Whispers Scan` - Whispers Scan * `WhiteHat Sentinel` - WhiteHat Sentinel * `Wiz Scan` - Wiz Scan * `Wizcli Dir Scan` - Wizcli Dir Scan * `Wizcli IaC Scan` - Wizcli IaC Scan * `Wizcli Img Scan` - Wizcli Img Scan * `Wpscan` - Wpscan * `Xanitizer Scan` - Xanitizer Scan * `Yarn Audit Scan` - Yarn Audit Scan * `ZAP Scan` - ZAP Scan (required)
        :type scan_type: str
        :param scan_date: Scan completion date will be used on all findings.
        :type scan_date: date
        :param minimum_severity: Minimum severity level to be imported  * `Info` - Info * `Low` - Low * `Medium` - Medium * `High` - High * `Critical` - Critical
        :type minimum_severity: str
        :param active: Force findings to be active/inactive or default to the original tool (None)
        :type active: bool
        :param verified: Force findings to be verified/not verified or default to the original tool (None)
        :type verified: bool
        :param endpoint_to_add: Enter the ID of an Endpoint that is associated with the target Product. New Findings will be added to that Endpoint.
        :type endpoint_to_add: int
        :param file:
        :type file: bytearray
        :param product_type_name:
        :type product_type_name: str
        :param product_name:
        :type product_name: str
        :param engagement_name:
        :type engagement_name: str
        :param engagement_end_date: End Date for Engagement. Default is current time + 365 days. Required format year-month-day
        :type engagement_end_date: date
        :param source_code_management_uri: Resource link to source code
        :type source_code_management_uri: str
        :param test_title:
        :type test_title: str
        :param auto_create_context:
        :type auto_create_context: bool
        :param deduplication_on_engagement:
        :type deduplication_on_engagement: bool
        :param lead:
        :type lead: int
        :param push_to_jira:
        :type push_to_jira: bool
        :param environment:
        :type environment: str
        :param build_id: ID of the build that was scanned.
        :type build_id: str
        :param branch_tag: Branch or Tag that was scanned.
        :type branch_tag: str
        :param commit_hash: Commit that was scanned.
        :type commit_hash: str
        :param api_scan_configuration:
        :type api_scan_configuration: int
        :param service: A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
        :type service: str
        :param group_by: Choose an option to automatically group new findings by the chosen option.  * `component_name` - Component Name * `component_name+component_version` - Component Name + Version * `file_path` - File path * `finding_title` - Finding Title
        :type group_by: str
        :param create_finding_groups_for_all_findings: If set to false, finding groups will only be created when there is more than one grouped finding
        :type create_finding_groups_for_all_findings: bool
        :param apply_tags_to_findings: If set to True, the tags will be applied to the findings
        :type apply_tags_to_findings: bool
        :param apply_tags_to_endpoints: If set to True, the tags will be applied to the endpoints
        :type apply_tags_to_endpoints: bool
        :param do_not_reactivate: Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.
        :type do_not_reactivate: bool
        :param test:
        :type test: int
        :param close_old_findings: Select if old findings no longer present in the report get closed as mitigated when importing.
        :type close_old_findings: bool
        :param close_old_findings_product_scope: Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.
        :type close_old_findings_product_scope: bool
        :param version: Version that will be set on existing Test object. Leave empty to leave existing value in place.
        :type version: str
        :param tags: Modify existing tags that help describe this scan. (Existing test tags will be overwritten)
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._reimport_scan_create_serialize(
            scan_type=scan_type,
            scan_date=scan_date,
            minimum_severity=minimum_severity,
            active=active,
            verified=verified,
            endpoint_to_add=endpoint_to_add,
            file=file,
            product_type_name=product_type_name,
            product_name=product_name,
            engagement_name=engagement_name,
            engagement_end_date=engagement_end_date,
            source_code_management_uri=source_code_management_uri,
            test_title=test_title,
            auto_create_context=auto_create_context,
            deduplication_on_engagement=deduplication_on_engagement,
            lead=lead,
            push_to_jira=push_to_jira,
            environment=environment,
            build_id=build_id,
            branch_tag=branch_tag,
            commit_hash=commit_hash,
            api_scan_configuration=api_scan_configuration,
            service=service,
            group_by=group_by,
            create_finding_groups_for_all_findings=create_finding_groups_for_all_findings,
            apply_tags_to_findings=apply_tags_to_findings,
            apply_tags_to_endpoints=apply_tags_to_endpoints,
            do_not_reactivate=do_not_reactivate,
            test=test,
            close_old_findings=close_old_findings,
            close_old_findings_product_scope=close_old_findings_product_scope,
            version=version,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': 'ReImportScan',
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def reimport_scan_create_with_http_info(
        self,
        scan_type: Annotated[
            StrictStr,
            Field(
                description='* `Acunetix Scan` - Acunetix Scan * `Anchore Engine Scan` - Anchore Engine Scan * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check * `Anchore Grype` - Anchore Grype * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report * `AppCheck Web Application Scanner` - AppCheck Web Application Scanner * `AppSpider Scan` - AppSpider Scan * `Aqua Scan` - Aqua Scan * `Arachni Scan` - Arachni Scan * `AuditJS Scan` - AuditJS Scan * `AWS Inspector2 Scan` - AWS Inspector2 Scan * `AWS Prowler Scan` - AWS Prowler Scan * `AWS Prowler V3` - AWS Prowler V3 * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan * `AWS Security Hub Scan` - AWS Security Hub Scan * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan * `Bandit Scan` - Bandit Scan * `Bearer CLI` - Bearer CLI * `BlackDuck API` - BlackDuck API * `Blackduck Binary Analysis` - Blackduck Binary Analysis * `Blackduck Component Risk` - Blackduck Component Risk * `Blackduck Hub Scan` - Blackduck Hub Scan * `Brakeman Scan` - Brakeman Scan * `Bugcrowd API Import` - Bugcrowd API Import * `BugCrowd Scan` - BugCrowd Scan * `Bundler-Audit Scan` - Bundler-Audit Scan * `Burp Dastardly Scan` - Burp Dastardly Scan * `Burp Enterprise Scan` - Burp Enterprise Scan * `Burp GraphQL API` - Burp GraphQL API * `Burp REST API` - Burp REST API * `Burp Scan` - Burp Scan * `CargoAudit Scan` - CargoAudit Scan * `Checkmarx CxFlow SAST` - Checkmarx CxFlow SAST * `Checkmarx One Scan` - Checkmarx One Scan * `Checkmarx OSA` - Checkmarx OSA * `Checkmarx Scan` - Checkmarx Scan * `Checkmarx Scan detailed` - Checkmarx Scan detailed * `Checkov Scan` - Checkov Scan * `Chef Inspect Log` - Chef Inspect Log * `Choctaw Hog Scan` - Choctaw Hog Scan * `Clair Scan` - Clair Scan * `Cloudsploit Scan` - Cloudsploit Scan * `Cobalt.io API Import` - Cobalt.io API Import * `Cobalt.io Scan` - Cobalt.io Scan * `Codechecker Report native` - Codechecker Report native * `Contrast Scan` - Contrast Scan * `Coverity API` - Coverity API * `Coverity Scan JSON Report` - Coverity Scan JSON Report * `Crashtest Security JSON File` - Crashtest Security JSON File * `Crashtest Security XML File` - Crashtest Security XML File * `CredScan Scan` - CredScan Scan * `Crunch42 Scan` - Crunch42 Scan * `CycloneDX Scan` - CycloneDX Scan * `DawnScanner Scan` - DawnScanner Scan * `Deepfence Threatmapper Report` - Deepfence Threatmapper Report * `Dependency Check Scan` - Dependency Check Scan * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export * `Detect-secrets Scan` - Detect-secrets Scan * `docker-bench-security Scan` - docker-bench-security Scan * `Dockle Scan` - Dockle Scan * `DrHeader JSON Importer` - DrHeader JSON Importer * `DSOP Scan` - DSOP Scan * `Duroc Hog Scan` - Duroc Hog Scan * `Edgescan Scan` - Edgescan Scan * `ESLint Scan` - ESLint Scan * `Essex Hog Scan` - Essex Hog Scan * `Fortify Scan` - Fortify Scan * `Generic Findings Import` - Generic Findings Import * `Ggshield Scan` - Ggshield Scan * `Github Vulnerability Scan` - Github Vulnerability Scan * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan * `GitLab Container Scan` - GitLab Container Scan * `GitLab DAST Report` - GitLab DAST Report * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report * `GitLab SAST Report` - GitLab SAST Report * `GitLab Secret Detection Report` - GitLab Secret Detection Report * `Gitleaks Scan` - Gitleaks Scan * `Google Cloud Artifact Vulnerability Scan` - Google Cloud Artifact Vulnerability Scan * `Gosec Scanner` - Gosec Scanner * `Gottingen Hog Scan` - Gottingen Hog Scan * `Govulncheck Scanner` - Govulncheck Scanner * `HackerOne Cases` - HackerOne Cases * `Hadolint Dockerfile check` - Hadolint Dockerfile check * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan * `HCL AppScan on Cloud SAST XML` - HCL AppScan on Cloud SAST XML * `HCLAppScan XML` - HCLAppScan XML * `Horusec Scan` - Horusec Scan * `Humble Json Importer` - Humble Json Importer * `HuskyCI Report` - HuskyCI Report * `Hydra Scan` - Hydra Scan * `IBM AppScan DAST` - IBM AppScan DAST * `Immuniweb Scan` - Immuniweb Scan * `IntSights Report` - IntSights Report * `Invicti Scan` - Invicti Scan * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan * `JFrog Xray On Demand Binary Scan` - JFrog Xray On Demand Binary Scan * `JFrog Xray Scan` - JFrog Xray Scan * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan * `KICS Scan` - KICS Scan * `Kiuwan SCA Scan` - Kiuwan SCA Scan * `Kiuwan Scan` - Kiuwan Scan * `KrakenD Audit Scan` - KrakenD Audit Scan * `kube-bench Scan` - kube-bench Scan * `Kubeaudit Scan` - Kubeaudit Scan * `KubeHunter Scan` - KubeHunter Scan * `Kubescape JSON Importer` - Kubescape JSON Importer * `Legitify Scan` - Legitify Scan * `Mend Scan` - Mend Scan * `Meterian Scan` - Meterian Scan * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan * `MobSF Scan` - MobSF Scan * `MobSF Scorecard Scan` - MobSF Scorecard Scan * `Mobsfscan Scan` - Mobsfscan Scan * `Mozilla Observatory Scan` - Mozilla Observatory Scan * `MSDefender Parser` - MSDefender Parser * `Nancy Scan` - Nancy Scan * `Netsparker Scan` - Netsparker Scan * `NeuVector (compliance)` - NeuVector (compliance) * `NeuVector (REST)` - NeuVector (REST) * `Nexpose Scan` - Nexpose Scan * `Nikto Scan` - Nikto Scan * `Nmap Scan` - Nmap Scan * `Node Security Platform Scan` - Node Security Platform Scan * `Nosey Parker Scan` - Nosey Parker Scan * `NPM Audit Scan` - NPM Audit Scan * `NPM Audit v7+ Scan` - NPM Audit v7+ Scan * `Nuclei Scan` - Nuclei Scan * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan * `OpenVAS Parser` - OpenVAS Parser * `ORT evaluated model Importer` - ORT evaluated model Importer * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer * `OSV Scan` - OSV Scan * `Outpost24 Scan` - Outpost24 Scan * `PHP Security Audit v2` - PHP Security Audit v2 * `PHP Symfony Security Check` - PHP Symfony Security Check * `pip-audit Scan` - pip-audit Scan * `PMD Scan` - PMD Scan * `Popeye Scan` - Popeye Scan * `Progpilot Scan` - Progpilot Scan * `PTART Report` - PTART Report * `PWN SAST` - PWN SAST * `Qualys Hacker Guardian Scan` - Qualys Hacker Guardian Scan * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML) * `Qualys Scan` - Qualys Scan * `Qualys Webapp Scan` - Qualys Webapp Scan * `Rapplex Scan` - Rapplex Scan * `Red Hat Satellite` - Red Hat Satellite * `Retire.js Scan` - Retire.js Scan * `Risk Recon API Importer` - Risk Recon API Importer * `Rubocop Scan` - Rubocop Scan * `Rusty Hog Scan` - Rusty Hog Scan * `SARIF` - SARIF * `Scantist Scan` - Scantist Scan * `Scout Suite Scan` - Scout Suite Scan * `Semgrep JSON Report` - Semgrep JSON Report * `SKF Scan` - SKF Scan * `Snyk Code Scan` - Snyk Code Scan * `Snyk Scan` - Snyk Scan * `Solar Appscreener Scan` - Solar Appscreener Scan * `SonarQube API Import` - SonarQube API Import * `SonarQube Scan` - SonarQube Scan * `SonarQube Scan detailed` - SonarQube Scan detailed * `Sonatype Application Scan` - Sonatype Application Scan * `SpotBugs Scan` - SpotBugs Scan * `SSH Audit Importer` - SSH Audit Importer * `SSL Labs Scan` - SSL Labs Scan * `Sslscan` - Sslscan * `Sslyze Scan` - Sslyze Scan * `SSLyze Scan (JSON)` - SSLyze Scan (JSON) * `StackHawk HawkScan` - StackHawk HawkScan * `Sysdig CLI Report` - Sysdig CLI Report * `Sysdig Vulnerability Report` - Sysdig Vulnerability Report * `Talisman Scan` - Talisman Scan * `Tenable Scan` - Tenable Scan * `Terrascan Scan` - Terrascan Scan * `Testssl Scan` - Testssl Scan * `TFSec Scan` - TFSec Scan * `Threagile risks report` - Threagile risks report * `ThreatComposer Scan` - ThreatComposer Scan * `Trivy Operator Scan` - Trivy Operator Scan * `Trivy Scan` - Trivy Scan * `Trufflehog Scan` - Trufflehog Scan * `Trufflehog3 Scan` - Trufflehog3 Scan * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan * `Trustwave Scan (CSV)` - Trustwave Scan (CSV) * `Twistlock Image Scan` - Twistlock Image Scan * `VCG Scan` - VCG Scan * `Veracode Scan` - Veracode Scan * `Veracode SourceClear Scan` - Veracode SourceClear Scan * `Vulners` - Vulners * `Wapiti Scan` - Wapiti Scan * `Wazuh` - Wazuh * `WFuzz JSON report` - WFuzz JSON report * `Whispers Scan` - Whispers Scan * `WhiteHat Sentinel` - WhiteHat Sentinel * `Wiz Scan` - Wiz Scan * `Wizcli Dir Scan` - Wizcli Dir Scan * `Wizcli IaC Scan` - Wizcli IaC Scan * `Wizcli Img Scan` - Wizcli Img Scan * `Wpscan` - Wpscan * `Xanitizer Scan` - Xanitizer Scan * `Yarn Audit Scan` - Yarn Audit Scan * `ZAP Scan` - ZAP Scan'
            ),
        ],
        scan_date: Annotated[
            Optional[date], Field(description='Scan completion date will be used on all findings.')
        ] = None,
        minimum_severity: Annotated[
            Optional[StrictStr],
            Field(
                description='Minimum severity level to be imported  * `Info` - Info * `Low` - Low * `Medium` - Medium * `High` - High * `Critical` - Critical'
            ),
        ] = None,
        active: Annotated[
            Optional[StrictBool],
            Field(description='Force findings to be active/inactive or default to the original tool (None)'),
        ] = None,
        verified: Annotated[
            Optional[StrictBool],
            Field(description='Force findings to be verified/not verified or default to the original tool (None)'),
        ] = None,
        endpoint_to_add: Annotated[
            Optional[StrictInt],
            Field(
                description='Enter the ID of an Endpoint that is associated with the target Product. New Findings will be added to that Endpoint.'
            ),
        ] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        product_type_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        product_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        engagement_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        engagement_end_date: Annotated[
            Optional[date],
            Field(
                description='End Date for Engagement. Default is current time + 365 days. Required format year-month-day'
            ),
        ] = None,
        source_code_management_uri: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True, max_length=600)]],
            Field(description='Resource link to source code'),
        ] = None,
        test_title: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        auto_create_context: Optional[StrictBool] = None,
        deduplication_on_engagement: Optional[StrictBool] = None,
        lead: Optional[StrictInt] = None,
        push_to_jira: Optional[StrictBool] = None,
        environment: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        build_id: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(description='ID of the build that was scanned.'),
        ] = None,
        branch_tag: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(description='Branch or Tag that was scanned.'),
        ] = None,
        commit_hash: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description='Commit that was scanned.')
        ] = None,
        api_scan_configuration: Optional[StrictInt] = None,
        service: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description='A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.'
            ),
        ] = None,
        group_by: Annotated[
            Optional[StrictStr],
            Field(
                description='Choose an option to automatically group new findings by the chosen option.  * `component_name` - Component Name * `component_name+component_version` - Component Name + Version * `file_path` - File path * `finding_title` - Finding Title'
            ),
        ] = None,
        create_finding_groups_for_all_findings: Annotated[
            Optional[StrictBool],
            Field(
                description='If set to false, finding groups will only be created when there is more than one grouped finding'
            ),
        ] = None,
        apply_tags_to_findings: Annotated[
            Optional[StrictBool], Field(description='If set to True, the tags will be applied to the findings')
        ] = None,
        apply_tags_to_endpoints: Annotated[
            Optional[StrictBool], Field(description='If set to True, the tags will be applied to the endpoints')
        ] = None,
        do_not_reactivate: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.'
            ),
        ] = None,
        test: Optional[StrictInt] = None,
        close_old_findings: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if old findings no longer present in the report get closed as mitigated when importing.'
            ),
        ] = None,
        close_old_findings_product_scope: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.'
            ),
        ] = None,
        version: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description='Version that will be set on existing Test object. Leave empty to leave existing value in place.'
            ),
        ] = None,
        tags: Annotated[
            Optional[List[Annotated[str, Field(min_length=1, strict=True)]]],
            Field(
                description='Modify existing tags that help describe this scan. (Existing test tags will be overwritten)'
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReImportScan]:
        """reimport_scan_create

        Reimports a scan report into an existing test.  By ID: - Create a Product (or use an existing product) - Create an Engagement inside the product - Import a scan report and find the id of the Test - Provide this in the `test` parameter  By Names: - Create a Product (or use an existing product) - Create an Engagement inside the product - Import a report which will create a Test - Provide `product_name` - Provide `engagement_name` - Optional: Provide `test_title`  In this scenario Defect Dojo will look up the Test by the provided details. If no `test_title` is provided, the latest test inside the engagement will be chosen based on scan_type.  When using names you can let the importer automatically create Engagements, Products and Product_Types by using `auto_create_context=True`.  When `auto_create_context` is set to `True` you can use `deduplication_on_engagement` to restrict deduplication for imported Findings to the newly created Engagement.

        :param scan_type: * `Acunetix Scan` - Acunetix Scan * `Anchore Engine Scan` - Anchore Engine Scan * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check * `Anchore Grype` - Anchore Grype * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report * `AppCheck Web Application Scanner` - AppCheck Web Application Scanner * `AppSpider Scan` - AppSpider Scan * `Aqua Scan` - Aqua Scan * `Arachni Scan` - Arachni Scan * `AuditJS Scan` - AuditJS Scan * `AWS Inspector2 Scan` - AWS Inspector2 Scan * `AWS Prowler Scan` - AWS Prowler Scan * `AWS Prowler V3` - AWS Prowler V3 * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan * `AWS Security Hub Scan` - AWS Security Hub Scan * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan * `Bandit Scan` - Bandit Scan * `Bearer CLI` - Bearer CLI * `BlackDuck API` - BlackDuck API * `Blackduck Binary Analysis` - Blackduck Binary Analysis * `Blackduck Component Risk` - Blackduck Component Risk * `Blackduck Hub Scan` - Blackduck Hub Scan * `Brakeman Scan` - Brakeman Scan * `Bugcrowd API Import` - Bugcrowd API Import * `BugCrowd Scan` - BugCrowd Scan * `Bundler-Audit Scan` - Bundler-Audit Scan * `Burp Dastardly Scan` - Burp Dastardly Scan * `Burp Enterprise Scan` - Burp Enterprise Scan * `Burp GraphQL API` - Burp GraphQL API * `Burp REST API` - Burp REST API * `Burp Scan` - Burp Scan * `CargoAudit Scan` - CargoAudit Scan * `Checkmarx CxFlow SAST` - Checkmarx CxFlow SAST * `Checkmarx One Scan` - Checkmarx One Scan * `Checkmarx OSA` - Checkmarx OSA * `Checkmarx Scan` - Checkmarx Scan * `Checkmarx Scan detailed` - Checkmarx Scan detailed * `Checkov Scan` - Checkov Scan * `Chef Inspect Log` - Chef Inspect Log * `Choctaw Hog Scan` - Choctaw Hog Scan * `Clair Scan` - Clair Scan * `Cloudsploit Scan` - Cloudsploit Scan * `Cobalt.io API Import` - Cobalt.io API Import * `Cobalt.io Scan` - Cobalt.io Scan * `Codechecker Report native` - Codechecker Report native * `Contrast Scan` - Contrast Scan * `Coverity API` - Coverity API * `Coverity Scan JSON Report` - Coverity Scan JSON Report * `Crashtest Security JSON File` - Crashtest Security JSON File * `Crashtest Security XML File` - Crashtest Security XML File * `CredScan Scan` - CredScan Scan * `Crunch42 Scan` - Crunch42 Scan * `CycloneDX Scan` - CycloneDX Scan * `DawnScanner Scan` - DawnScanner Scan * `Deepfence Threatmapper Report` - Deepfence Threatmapper Report * `Dependency Check Scan` - Dependency Check Scan * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export * `Detect-secrets Scan` - Detect-secrets Scan * `docker-bench-security Scan` - docker-bench-security Scan * `Dockle Scan` - Dockle Scan * `DrHeader JSON Importer` - DrHeader JSON Importer * `DSOP Scan` - DSOP Scan * `Duroc Hog Scan` - Duroc Hog Scan * `Edgescan Scan` - Edgescan Scan * `ESLint Scan` - ESLint Scan * `Essex Hog Scan` - Essex Hog Scan * `Fortify Scan` - Fortify Scan * `Generic Findings Import` - Generic Findings Import * `Ggshield Scan` - Ggshield Scan * `Github Vulnerability Scan` - Github Vulnerability Scan * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan * `GitLab Container Scan` - GitLab Container Scan * `GitLab DAST Report` - GitLab DAST Report * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report * `GitLab SAST Report` - GitLab SAST Report * `GitLab Secret Detection Report` - GitLab Secret Detection Report * `Gitleaks Scan` - Gitleaks Scan * `Google Cloud Artifact Vulnerability Scan` - Google Cloud Artifact Vulnerability Scan * `Gosec Scanner` - Gosec Scanner * `Gottingen Hog Scan` - Gottingen Hog Scan * `Govulncheck Scanner` - Govulncheck Scanner * `HackerOne Cases` - HackerOne Cases * `Hadolint Dockerfile check` - Hadolint Dockerfile check * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan * `HCL AppScan on Cloud SAST XML` - HCL AppScan on Cloud SAST XML * `HCLAppScan XML` - HCLAppScan XML * `Horusec Scan` - Horusec Scan * `Humble Json Importer` - Humble Json Importer * `HuskyCI Report` - HuskyCI Report * `Hydra Scan` - Hydra Scan * `IBM AppScan DAST` - IBM AppScan DAST * `Immuniweb Scan` - Immuniweb Scan * `IntSights Report` - IntSights Report * `Invicti Scan` - Invicti Scan * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan * `JFrog Xray On Demand Binary Scan` - JFrog Xray On Demand Binary Scan * `JFrog Xray Scan` - JFrog Xray Scan * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan * `KICS Scan` - KICS Scan * `Kiuwan SCA Scan` - Kiuwan SCA Scan * `Kiuwan Scan` - Kiuwan Scan * `KrakenD Audit Scan` - KrakenD Audit Scan * `kube-bench Scan` - kube-bench Scan * `Kubeaudit Scan` - Kubeaudit Scan * `KubeHunter Scan` - KubeHunter Scan * `Kubescape JSON Importer` - Kubescape JSON Importer * `Legitify Scan` - Legitify Scan * `Mend Scan` - Mend Scan * `Meterian Scan` - Meterian Scan * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan * `MobSF Scan` - MobSF Scan * `MobSF Scorecard Scan` - MobSF Scorecard Scan * `Mobsfscan Scan` - Mobsfscan Scan * `Mozilla Observatory Scan` - Mozilla Observatory Scan * `MSDefender Parser` - MSDefender Parser * `Nancy Scan` - Nancy Scan * `Netsparker Scan` - Netsparker Scan * `NeuVector (compliance)` - NeuVector (compliance) * `NeuVector (REST)` - NeuVector (REST) * `Nexpose Scan` - Nexpose Scan * `Nikto Scan` - Nikto Scan * `Nmap Scan` - Nmap Scan * `Node Security Platform Scan` - Node Security Platform Scan * `Nosey Parker Scan` - Nosey Parker Scan * `NPM Audit Scan` - NPM Audit Scan * `NPM Audit v7+ Scan` - NPM Audit v7+ Scan * `Nuclei Scan` - Nuclei Scan * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan * `OpenVAS Parser` - OpenVAS Parser * `ORT evaluated model Importer` - ORT evaluated model Importer * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer * `OSV Scan` - OSV Scan * `Outpost24 Scan` - Outpost24 Scan * `PHP Security Audit v2` - PHP Security Audit v2 * `PHP Symfony Security Check` - PHP Symfony Security Check * `pip-audit Scan` - pip-audit Scan * `PMD Scan` - PMD Scan * `Popeye Scan` - Popeye Scan * `Progpilot Scan` - Progpilot Scan * `PTART Report` - PTART Report * `PWN SAST` - PWN SAST * `Qualys Hacker Guardian Scan` - Qualys Hacker Guardian Scan * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML) * `Qualys Scan` - Qualys Scan * `Qualys Webapp Scan` - Qualys Webapp Scan * `Rapplex Scan` - Rapplex Scan * `Red Hat Satellite` - Red Hat Satellite * `Retire.js Scan` - Retire.js Scan * `Risk Recon API Importer` - Risk Recon API Importer * `Rubocop Scan` - Rubocop Scan * `Rusty Hog Scan` - Rusty Hog Scan * `SARIF` - SARIF * `Scantist Scan` - Scantist Scan * `Scout Suite Scan` - Scout Suite Scan * `Semgrep JSON Report` - Semgrep JSON Report * `SKF Scan` - SKF Scan * `Snyk Code Scan` - Snyk Code Scan * `Snyk Scan` - Snyk Scan * `Solar Appscreener Scan` - Solar Appscreener Scan * `SonarQube API Import` - SonarQube API Import * `SonarQube Scan` - SonarQube Scan * `SonarQube Scan detailed` - SonarQube Scan detailed * `Sonatype Application Scan` - Sonatype Application Scan * `SpotBugs Scan` - SpotBugs Scan * `SSH Audit Importer` - SSH Audit Importer * `SSL Labs Scan` - SSL Labs Scan * `Sslscan` - Sslscan * `Sslyze Scan` - Sslyze Scan * `SSLyze Scan (JSON)` - SSLyze Scan (JSON) * `StackHawk HawkScan` - StackHawk HawkScan * `Sysdig CLI Report` - Sysdig CLI Report * `Sysdig Vulnerability Report` - Sysdig Vulnerability Report * `Talisman Scan` - Talisman Scan * `Tenable Scan` - Tenable Scan * `Terrascan Scan` - Terrascan Scan * `Testssl Scan` - Testssl Scan * `TFSec Scan` - TFSec Scan * `Threagile risks report` - Threagile risks report * `ThreatComposer Scan` - ThreatComposer Scan * `Trivy Operator Scan` - Trivy Operator Scan * `Trivy Scan` - Trivy Scan * `Trufflehog Scan` - Trufflehog Scan * `Trufflehog3 Scan` - Trufflehog3 Scan * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan * `Trustwave Scan (CSV)` - Trustwave Scan (CSV) * `Twistlock Image Scan` - Twistlock Image Scan * `VCG Scan` - VCG Scan * `Veracode Scan` - Veracode Scan * `Veracode SourceClear Scan` - Veracode SourceClear Scan * `Vulners` - Vulners * `Wapiti Scan` - Wapiti Scan * `Wazuh` - Wazuh * `WFuzz JSON report` - WFuzz JSON report * `Whispers Scan` - Whispers Scan * `WhiteHat Sentinel` - WhiteHat Sentinel * `Wiz Scan` - Wiz Scan * `Wizcli Dir Scan` - Wizcli Dir Scan * `Wizcli IaC Scan` - Wizcli IaC Scan * `Wizcli Img Scan` - Wizcli Img Scan * `Wpscan` - Wpscan * `Xanitizer Scan` - Xanitizer Scan * `Yarn Audit Scan` - Yarn Audit Scan * `ZAP Scan` - ZAP Scan (required)
        :type scan_type: str
        :param scan_date: Scan completion date will be used on all findings.
        :type scan_date: date
        :param minimum_severity: Minimum severity level to be imported  * `Info` - Info * `Low` - Low * `Medium` - Medium * `High` - High * `Critical` - Critical
        :type minimum_severity: str
        :param active: Force findings to be active/inactive or default to the original tool (None)
        :type active: bool
        :param verified: Force findings to be verified/not verified or default to the original tool (None)
        :type verified: bool
        :param endpoint_to_add: Enter the ID of an Endpoint that is associated with the target Product. New Findings will be added to that Endpoint.
        :type endpoint_to_add: int
        :param file:
        :type file: bytearray
        :param product_type_name:
        :type product_type_name: str
        :param product_name:
        :type product_name: str
        :param engagement_name:
        :type engagement_name: str
        :param engagement_end_date: End Date for Engagement. Default is current time + 365 days. Required format year-month-day
        :type engagement_end_date: date
        :param source_code_management_uri: Resource link to source code
        :type source_code_management_uri: str
        :param test_title:
        :type test_title: str
        :param auto_create_context:
        :type auto_create_context: bool
        :param deduplication_on_engagement:
        :type deduplication_on_engagement: bool
        :param lead:
        :type lead: int
        :param push_to_jira:
        :type push_to_jira: bool
        :param environment:
        :type environment: str
        :param build_id: ID of the build that was scanned.
        :type build_id: str
        :param branch_tag: Branch or Tag that was scanned.
        :type branch_tag: str
        :param commit_hash: Commit that was scanned.
        :type commit_hash: str
        :param api_scan_configuration:
        :type api_scan_configuration: int
        :param service: A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
        :type service: str
        :param group_by: Choose an option to automatically group new findings by the chosen option.  * `component_name` - Component Name * `component_name+component_version` - Component Name + Version * `file_path` - File path * `finding_title` - Finding Title
        :type group_by: str
        :param create_finding_groups_for_all_findings: If set to false, finding groups will only be created when there is more than one grouped finding
        :type create_finding_groups_for_all_findings: bool
        :param apply_tags_to_findings: If set to True, the tags will be applied to the findings
        :type apply_tags_to_findings: bool
        :param apply_tags_to_endpoints: If set to True, the tags will be applied to the endpoints
        :type apply_tags_to_endpoints: bool
        :param do_not_reactivate: Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.
        :type do_not_reactivate: bool
        :param test:
        :type test: int
        :param close_old_findings: Select if old findings no longer present in the report get closed as mitigated when importing.
        :type close_old_findings: bool
        :param close_old_findings_product_scope: Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.
        :type close_old_findings_product_scope: bool
        :param version: Version that will be set on existing Test object. Leave empty to leave existing value in place.
        :type version: str
        :param tags: Modify existing tags that help describe this scan. (Existing test tags will be overwritten)
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._reimport_scan_create_serialize(
            scan_type=scan_type,
            scan_date=scan_date,
            minimum_severity=minimum_severity,
            active=active,
            verified=verified,
            endpoint_to_add=endpoint_to_add,
            file=file,
            product_type_name=product_type_name,
            product_name=product_name,
            engagement_name=engagement_name,
            engagement_end_date=engagement_end_date,
            source_code_management_uri=source_code_management_uri,
            test_title=test_title,
            auto_create_context=auto_create_context,
            deduplication_on_engagement=deduplication_on_engagement,
            lead=lead,
            push_to_jira=push_to_jira,
            environment=environment,
            build_id=build_id,
            branch_tag=branch_tag,
            commit_hash=commit_hash,
            api_scan_configuration=api_scan_configuration,
            service=service,
            group_by=group_by,
            create_finding_groups_for_all_findings=create_finding_groups_for_all_findings,
            apply_tags_to_findings=apply_tags_to_findings,
            apply_tags_to_endpoints=apply_tags_to_endpoints,
            do_not_reactivate=do_not_reactivate,
            test=test,
            close_old_findings=close_old_findings,
            close_old_findings_product_scope=close_old_findings_product_scope,
            version=version,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': 'ReImportScan',
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def reimport_scan_create_without_preload_content(
        self,
        scan_type: Annotated[
            StrictStr,
            Field(
                description='* `Acunetix Scan` - Acunetix Scan * `Anchore Engine Scan` - Anchore Engine Scan * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check * `Anchore Grype` - Anchore Grype * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report * `AppCheck Web Application Scanner` - AppCheck Web Application Scanner * `AppSpider Scan` - AppSpider Scan * `Aqua Scan` - Aqua Scan * `Arachni Scan` - Arachni Scan * `AuditJS Scan` - AuditJS Scan * `AWS Inspector2 Scan` - AWS Inspector2 Scan * `AWS Prowler Scan` - AWS Prowler Scan * `AWS Prowler V3` - AWS Prowler V3 * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan * `AWS Security Hub Scan` - AWS Security Hub Scan * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan * `Bandit Scan` - Bandit Scan * `Bearer CLI` - Bearer CLI * `BlackDuck API` - BlackDuck API * `Blackduck Binary Analysis` - Blackduck Binary Analysis * `Blackduck Component Risk` - Blackduck Component Risk * `Blackduck Hub Scan` - Blackduck Hub Scan * `Brakeman Scan` - Brakeman Scan * `Bugcrowd API Import` - Bugcrowd API Import * `BugCrowd Scan` - BugCrowd Scan * `Bundler-Audit Scan` - Bundler-Audit Scan * `Burp Dastardly Scan` - Burp Dastardly Scan * `Burp Enterprise Scan` - Burp Enterprise Scan * `Burp GraphQL API` - Burp GraphQL API * `Burp REST API` - Burp REST API * `Burp Scan` - Burp Scan * `CargoAudit Scan` - CargoAudit Scan * `Checkmarx CxFlow SAST` - Checkmarx CxFlow SAST * `Checkmarx One Scan` - Checkmarx One Scan * `Checkmarx OSA` - Checkmarx OSA * `Checkmarx Scan` - Checkmarx Scan * `Checkmarx Scan detailed` - Checkmarx Scan detailed * `Checkov Scan` - Checkov Scan * `Chef Inspect Log` - Chef Inspect Log * `Choctaw Hog Scan` - Choctaw Hog Scan * `Clair Scan` - Clair Scan * `Cloudsploit Scan` - Cloudsploit Scan * `Cobalt.io API Import` - Cobalt.io API Import * `Cobalt.io Scan` - Cobalt.io Scan * `Codechecker Report native` - Codechecker Report native * `Contrast Scan` - Contrast Scan * `Coverity API` - Coverity API * `Coverity Scan JSON Report` - Coverity Scan JSON Report * `Crashtest Security JSON File` - Crashtest Security JSON File * `Crashtest Security XML File` - Crashtest Security XML File * `CredScan Scan` - CredScan Scan * `Crunch42 Scan` - Crunch42 Scan * `CycloneDX Scan` - CycloneDX Scan * `DawnScanner Scan` - DawnScanner Scan * `Deepfence Threatmapper Report` - Deepfence Threatmapper Report * `Dependency Check Scan` - Dependency Check Scan * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export * `Detect-secrets Scan` - Detect-secrets Scan * `docker-bench-security Scan` - docker-bench-security Scan * `Dockle Scan` - Dockle Scan * `DrHeader JSON Importer` - DrHeader JSON Importer * `DSOP Scan` - DSOP Scan * `Duroc Hog Scan` - Duroc Hog Scan * `Edgescan Scan` - Edgescan Scan * `ESLint Scan` - ESLint Scan * `Essex Hog Scan` - Essex Hog Scan * `Fortify Scan` - Fortify Scan * `Generic Findings Import` - Generic Findings Import * `Ggshield Scan` - Ggshield Scan * `Github Vulnerability Scan` - Github Vulnerability Scan * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan * `GitLab Container Scan` - GitLab Container Scan * `GitLab DAST Report` - GitLab DAST Report * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report * `GitLab SAST Report` - GitLab SAST Report * `GitLab Secret Detection Report` - GitLab Secret Detection Report * `Gitleaks Scan` - Gitleaks Scan * `Google Cloud Artifact Vulnerability Scan` - Google Cloud Artifact Vulnerability Scan * `Gosec Scanner` - Gosec Scanner * `Gottingen Hog Scan` - Gottingen Hog Scan * `Govulncheck Scanner` - Govulncheck Scanner * `HackerOne Cases` - HackerOne Cases * `Hadolint Dockerfile check` - Hadolint Dockerfile check * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan * `HCL AppScan on Cloud SAST XML` - HCL AppScan on Cloud SAST XML * `HCLAppScan XML` - HCLAppScan XML * `Horusec Scan` - Horusec Scan * `Humble Json Importer` - Humble Json Importer * `HuskyCI Report` - HuskyCI Report * `Hydra Scan` - Hydra Scan * `IBM AppScan DAST` - IBM AppScan DAST * `Immuniweb Scan` - Immuniweb Scan * `IntSights Report` - IntSights Report * `Invicti Scan` - Invicti Scan * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan * `JFrog Xray On Demand Binary Scan` - JFrog Xray On Demand Binary Scan * `JFrog Xray Scan` - JFrog Xray Scan * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan * `KICS Scan` - KICS Scan * `Kiuwan SCA Scan` - Kiuwan SCA Scan * `Kiuwan Scan` - Kiuwan Scan * `KrakenD Audit Scan` - KrakenD Audit Scan * `kube-bench Scan` - kube-bench Scan * `Kubeaudit Scan` - Kubeaudit Scan * `KubeHunter Scan` - KubeHunter Scan * `Kubescape JSON Importer` - Kubescape JSON Importer * `Legitify Scan` - Legitify Scan * `Mend Scan` - Mend Scan * `Meterian Scan` - Meterian Scan * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan * `MobSF Scan` - MobSF Scan * `MobSF Scorecard Scan` - MobSF Scorecard Scan * `Mobsfscan Scan` - Mobsfscan Scan * `Mozilla Observatory Scan` - Mozilla Observatory Scan * `MSDefender Parser` - MSDefender Parser * `Nancy Scan` - Nancy Scan * `Netsparker Scan` - Netsparker Scan * `NeuVector (compliance)` - NeuVector (compliance) * `NeuVector (REST)` - NeuVector (REST) * `Nexpose Scan` - Nexpose Scan * `Nikto Scan` - Nikto Scan * `Nmap Scan` - Nmap Scan * `Node Security Platform Scan` - Node Security Platform Scan * `Nosey Parker Scan` - Nosey Parker Scan * `NPM Audit Scan` - NPM Audit Scan * `NPM Audit v7+ Scan` - NPM Audit v7+ Scan * `Nuclei Scan` - Nuclei Scan * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan * `OpenVAS Parser` - OpenVAS Parser * `ORT evaluated model Importer` - ORT evaluated model Importer * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer * `OSV Scan` - OSV Scan * `Outpost24 Scan` - Outpost24 Scan * `PHP Security Audit v2` - PHP Security Audit v2 * `PHP Symfony Security Check` - PHP Symfony Security Check * `pip-audit Scan` - pip-audit Scan * `PMD Scan` - PMD Scan * `Popeye Scan` - Popeye Scan * `Progpilot Scan` - Progpilot Scan * `PTART Report` - PTART Report * `PWN SAST` - PWN SAST * `Qualys Hacker Guardian Scan` - Qualys Hacker Guardian Scan * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML) * `Qualys Scan` - Qualys Scan * `Qualys Webapp Scan` - Qualys Webapp Scan * `Rapplex Scan` - Rapplex Scan * `Red Hat Satellite` - Red Hat Satellite * `Retire.js Scan` - Retire.js Scan * `Risk Recon API Importer` - Risk Recon API Importer * `Rubocop Scan` - Rubocop Scan * `Rusty Hog Scan` - Rusty Hog Scan * `SARIF` - SARIF * `Scantist Scan` - Scantist Scan * `Scout Suite Scan` - Scout Suite Scan * `Semgrep JSON Report` - Semgrep JSON Report * `SKF Scan` - SKF Scan * `Snyk Code Scan` - Snyk Code Scan * `Snyk Scan` - Snyk Scan * `Solar Appscreener Scan` - Solar Appscreener Scan * `SonarQube API Import` - SonarQube API Import * `SonarQube Scan` - SonarQube Scan * `SonarQube Scan detailed` - SonarQube Scan detailed * `Sonatype Application Scan` - Sonatype Application Scan * `SpotBugs Scan` - SpotBugs Scan * `SSH Audit Importer` - SSH Audit Importer * `SSL Labs Scan` - SSL Labs Scan * `Sslscan` - Sslscan * `Sslyze Scan` - Sslyze Scan * `SSLyze Scan (JSON)` - SSLyze Scan (JSON) * `StackHawk HawkScan` - StackHawk HawkScan * `Sysdig CLI Report` - Sysdig CLI Report * `Sysdig Vulnerability Report` - Sysdig Vulnerability Report * `Talisman Scan` - Talisman Scan * `Tenable Scan` - Tenable Scan * `Terrascan Scan` - Terrascan Scan * `Testssl Scan` - Testssl Scan * `TFSec Scan` - TFSec Scan * `Threagile risks report` - Threagile risks report * `ThreatComposer Scan` - ThreatComposer Scan * `Trivy Operator Scan` - Trivy Operator Scan * `Trivy Scan` - Trivy Scan * `Trufflehog Scan` - Trufflehog Scan * `Trufflehog3 Scan` - Trufflehog3 Scan * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan * `Trustwave Scan (CSV)` - Trustwave Scan (CSV) * `Twistlock Image Scan` - Twistlock Image Scan * `VCG Scan` - VCG Scan * `Veracode Scan` - Veracode Scan * `Veracode SourceClear Scan` - Veracode SourceClear Scan * `Vulners` - Vulners * `Wapiti Scan` - Wapiti Scan * `Wazuh` - Wazuh * `WFuzz JSON report` - WFuzz JSON report * `Whispers Scan` - Whispers Scan * `WhiteHat Sentinel` - WhiteHat Sentinel * `Wiz Scan` - Wiz Scan * `Wizcli Dir Scan` - Wizcli Dir Scan * `Wizcli IaC Scan` - Wizcli IaC Scan * `Wizcli Img Scan` - Wizcli Img Scan * `Wpscan` - Wpscan * `Xanitizer Scan` - Xanitizer Scan * `Yarn Audit Scan` - Yarn Audit Scan * `ZAP Scan` - ZAP Scan'
            ),
        ],
        scan_date: Annotated[
            Optional[date], Field(description='Scan completion date will be used on all findings.')
        ] = None,
        minimum_severity: Annotated[
            Optional[StrictStr],
            Field(
                description='Minimum severity level to be imported  * `Info` - Info * `Low` - Low * `Medium` - Medium * `High` - High * `Critical` - Critical'
            ),
        ] = None,
        active: Annotated[
            Optional[StrictBool],
            Field(description='Force findings to be active/inactive or default to the original tool (None)'),
        ] = None,
        verified: Annotated[
            Optional[StrictBool],
            Field(description='Force findings to be verified/not verified or default to the original tool (None)'),
        ] = None,
        endpoint_to_add: Annotated[
            Optional[StrictInt],
            Field(
                description='Enter the ID of an Endpoint that is associated with the target Product. New Findings will be added to that Endpoint.'
            ),
        ] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        product_type_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        product_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        engagement_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        engagement_end_date: Annotated[
            Optional[date],
            Field(
                description='End Date for Engagement. Default is current time + 365 days. Required format year-month-day'
            ),
        ] = None,
        source_code_management_uri: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True, max_length=600)]],
            Field(description='Resource link to source code'),
        ] = None,
        test_title: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        auto_create_context: Optional[StrictBool] = None,
        deduplication_on_engagement: Optional[StrictBool] = None,
        lead: Optional[StrictInt] = None,
        push_to_jira: Optional[StrictBool] = None,
        environment: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None,
        build_id: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(description='ID of the build that was scanned.'),
        ] = None,
        branch_tag: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(description='Branch or Tag that was scanned.'),
        ] = None,
        commit_hash: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]], Field(description='Commit that was scanned.')
        ] = None,
        api_scan_configuration: Optional[StrictInt] = None,
        service: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description='A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.'
            ),
        ] = None,
        group_by: Annotated[
            Optional[StrictStr],
            Field(
                description='Choose an option to automatically group new findings by the chosen option.  * `component_name` - Component Name * `component_name+component_version` - Component Name + Version * `file_path` - File path * `finding_title` - Finding Title'
            ),
        ] = None,
        create_finding_groups_for_all_findings: Annotated[
            Optional[StrictBool],
            Field(
                description='If set to false, finding groups will only be created when there is more than one grouped finding'
            ),
        ] = None,
        apply_tags_to_findings: Annotated[
            Optional[StrictBool], Field(description='If set to True, the tags will be applied to the findings')
        ] = None,
        apply_tags_to_endpoints: Annotated[
            Optional[StrictBool], Field(description='If set to True, the tags will be applied to the endpoints')
        ] = None,
        do_not_reactivate: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.'
            ),
        ] = None,
        test: Optional[StrictInt] = None,
        close_old_findings: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if old findings no longer present in the report get closed as mitigated when importing.'
            ),
        ] = None,
        close_old_findings_product_scope: Annotated[
            Optional[StrictBool],
            Field(
                description='Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.'
            ),
        ] = None,
        version: Annotated[
            Optional[Annotated[str, Field(min_length=1, strict=True)]],
            Field(
                description='Version that will be set on existing Test object. Leave empty to leave existing value in place.'
            ),
        ] = None,
        tags: Annotated[
            Optional[List[Annotated[str, Field(min_length=1, strict=True)]]],
            Field(
                description='Modify existing tags that help describe this scan. (Existing test tags will be overwritten)'
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """reimport_scan_create

        Reimports a scan report into an existing test.  By ID: - Create a Product (or use an existing product) - Create an Engagement inside the product - Import a scan report and find the id of the Test - Provide this in the `test` parameter  By Names: - Create a Product (or use an existing product) - Create an Engagement inside the product - Import a report which will create a Test - Provide `product_name` - Provide `engagement_name` - Optional: Provide `test_title`  In this scenario Defect Dojo will look up the Test by the provided details. If no `test_title` is provided, the latest test inside the engagement will be chosen based on scan_type.  When using names you can let the importer automatically create Engagements, Products and Product_Types by using `auto_create_context=True`.  When `auto_create_context` is set to `True` you can use `deduplication_on_engagement` to restrict deduplication for imported Findings to the newly created Engagement.

        :param scan_type: * `Acunetix Scan` - Acunetix Scan * `Anchore Engine Scan` - Anchore Engine Scan * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check * `Anchore Grype` - Anchore Grype * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report * `AppCheck Web Application Scanner` - AppCheck Web Application Scanner * `AppSpider Scan` - AppSpider Scan * `Aqua Scan` - Aqua Scan * `Arachni Scan` - Arachni Scan * `AuditJS Scan` - AuditJS Scan * `AWS Inspector2 Scan` - AWS Inspector2 Scan * `AWS Prowler Scan` - AWS Prowler Scan * `AWS Prowler V3` - AWS Prowler V3 * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan * `AWS Security Hub Scan` - AWS Security Hub Scan * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan * `Bandit Scan` - Bandit Scan * `Bearer CLI` - Bearer CLI * `BlackDuck API` - BlackDuck API * `Blackduck Binary Analysis` - Blackduck Binary Analysis * `Blackduck Component Risk` - Blackduck Component Risk * `Blackduck Hub Scan` - Blackduck Hub Scan * `Brakeman Scan` - Brakeman Scan * `Bugcrowd API Import` - Bugcrowd API Import * `BugCrowd Scan` - BugCrowd Scan * `Bundler-Audit Scan` - Bundler-Audit Scan * `Burp Dastardly Scan` - Burp Dastardly Scan * `Burp Enterprise Scan` - Burp Enterprise Scan * `Burp GraphQL API` - Burp GraphQL API * `Burp REST API` - Burp REST API * `Burp Scan` - Burp Scan * `CargoAudit Scan` - CargoAudit Scan * `Checkmarx CxFlow SAST` - Checkmarx CxFlow SAST * `Checkmarx One Scan` - Checkmarx One Scan * `Checkmarx OSA` - Checkmarx OSA * `Checkmarx Scan` - Checkmarx Scan * `Checkmarx Scan detailed` - Checkmarx Scan detailed * `Checkov Scan` - Checkov Scan * `Chef Inspect Log` - Chef Inspect Log * `Choctaw Hog Scan` - Choctaw Hog Scan * `Clair Scan` - Clair Scan * `Cloudsploit Scan` - Cloudsploit Scan * `Cobalt.io API Import` - Cobalt.io API Import * `Cobalt.io Scan` - Cobalt.io Scan * `Codechecker Report native` - Codechecker Report native * `Contrast Scan` - Contrast Scan * `Coverity API` - Coverity API * `Coverity Scan JSON Report` - Coverity Scan JSON Report * `Crashtest Security JSON File` - Crashtest Security JSON File * `Crashtest Security XML File` - Crashtest Security XML File * `CredScan Scan` - CredScan Scan * `Crunch42 Scan` - Crunch42 Scan * `CycloneDX Scan` - CycloneDX Scan * `DawnScanner Scan` - DawnScanner Scan * `Deepfence Threatmapper Report` - Deepfence Threatmapper Report * `Dependency Check Scan` - Dependency Check Scan * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export * `Detect-secrets Scan` - Detect-secrets Scan * `docker-bench-security Scan` - docker-bench-security Scan * `Dockle Scan` - Dockle Scan * `DrHeader JSON Importer` - DrHeader JSON Importer * `DSOP Scan` - DSOP Scan * `Duroc Hog Scan` - Duroc Hog Scan * `Edgescan Scan` - Edgescan Scan * `ESLint Scan` - ESLint Scan * `Essex Hog Scan` - Essex Hog Scan * `Fortify Scan` - Fortify Scan * `Generic Findings Import` - Generic Findings Import * `Ggshield Scan` - Ggshield Scan * `Github Vulnerability Scan` - Github Vulnerability Scan * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan * `GitLab Container Scan` - GitLab Container Scan * `GitLab DAST Report` - GitLab DAST Report * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report * `GitLab SAST Report` - GitLab SAST Report * `GitLab Secret Detection Report` - GitLab Secret Detection Report * `Gitleaks Scan` - Gitleaks Scan * `Google Cloud Artifact Vulnerability Scan` - Google Cloud Artifact Vulnerability Scan * `Gosec Scanner` - Gosec Scanner * `Gottingen Hog Scan` - Gottingen Hog Scan * `Govulncheck Scanner` - Govulncheck Scanner * `HackerOne Cases` - HackerOne Cases * `Hadolint Dockerfile check` - Hadolint Dockerfile check * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan * `HCL AppScan on Cloud SAST XML` - HCL AppScan on Cloud SAST XML * `HCLAppScan XML` - HCLAppScan XML * `Horusec Scan` - Horusec Scan * `Humble Json Importer` - Humble Json Importer * `HuskyCI Report` - HuskyCI Report * `Hydra Scan` - Hydra Scan * `IBM AppScan DAST` - IBM AppScan DAST * `Immuniweb Scan` - Immuniweb Scan * `IntSights Report` - IntSights Report * `Invicti Scan` - Invicti Scan * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan * `JFrog Xray On Demand Binary Scan` - JFrog Xray On Demand Binary Scan * `JFrog Xray Scan` - JFrog Xray Scan * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan * `KICS Scan` - KICS Scan * `Kiuwan SCA Scan` - Kiuwan SCA Scan * `Kiuwan Scan` - Kiuwan Scan * `KrakenD Audit Scan` - KrakenD Audit Scan * `kube-bench Scan` - kube-bench Scan * `Kubeaudit Scan` - Kubeaudit Scan * `KubeHunter Scan` - KubeHunter Scan * `Kubescape JSON Importer` - Kubescape JSON Importer * `Legitify Scan` - Legitify Scan * `Mend Scan` - Mend Scan * `Meterian Scan` - Meterian Scan * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan * `MobSF Scan` - MobSF Scan * `MobSF Scorecard Scan` - MobSF Scorecard Scan * `Mobsfscan Scan` - Mobsfscan Scan * `Mozilla Observatory Scan` - Mozilla Observatory Scan * `MSDefender Parser` - MSDefender Parser * `Nancy Scan` - Nancy Scan * `Netsparker Scan` - Netsparker Scan * `NeuVector (compliance)` - NeuVector (compliance) * `NeuVector (REST)` - NeuVector (REST) * `Nexpose Scan` - Nexpose Scan * `Nikto Scan` - Nikto Scan * `Nmap Scan` - Nmap Scan * `Node Security Platform Scan` - Node Security Platform Scan * `Nosey Parker Scan` - Nosey Parker Scan * `NPM Audit Scan` - NPM Audit Scan * `NPM Audit v7+ Scan` - NPM Audit v7+ Scan * `Nuclei Scan` - Nuclei Scan * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan * `OpenVAS Parser` - OpenVAS Parser * `ORT evaluated model Importer` - ORT evaluated model Importer * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer * `OSV Scan` - OSV Scan * `Outpost24 Scan` - Outpost24 Scan * `PHP Security Audit v2` - PHP Security Audit v2 * `PHP Symfony Security Check` - PHP Symfony Security Check * `pip-audit Scan` - pip-audit Scan * `PMD Scan` - PMD Scan * `Popeye Scan` - Popeye Scan * `Progpilot Scan` - Progpilot Scan * `PTART Report` - PTART Report * `PWN SAST` - PWN SAST * `Qualys Hacker Guardian Scan` - Qualys Hacker Guardian Scan * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML) * `Qualys Scan` - Qualys Scan * `Qualys Webapp Scan` - Qualys Webapp Scan * `Rapplex Scan` - Rapplex Scan * `Red Hat Satellite` - Red Hat Satellite * `Retire.js Scan` - Retire.js Scan * `Risk Recon API Importer` - Risk Recon API Importer * `Rubocop Scan` - Rubocop Scan * `Rusty Hog Scan` - Rusty Hog Scan * `SARIF` - SARIF * `Scantist Scan` - Scantist Scan * `Scout Suite Scan` - Scout Suite Scan * `Semgrep JSON Report` - Semgrep JSON Report * `SKF Scan` - SKF Scan * `Snyk Code Scan` - Snyk Code Scan * `Snyk Scan` - Snyk Scan * `Solar Appscreener Scan` - Solar Appscreener Scan * `SonarQube API Import` - SonarQube API Import * `SonarQube Scan` - SonarQube Scan * `SonarQube Scan detailed` - SonarQube Scan detailed * `Sonatype Application Scan` - Sonatype Application Scan * `SpotBugs Scan` - SpotBugs Scan * `SSH Audit Importer` - SSH Audit Importer * `SSL Labs Scan` - SSL Labs Scan * `Sslscan` - Sslscan * `Sslyze Scan` - Sslyze Scan * `SSLyze Scan (JSON)` - SSLyze Scan (JSON) * `StackHawk HawkScan` - StackHawk HawkScan * `Sysdig CLI Report` - Sysdig CLI Report * `Sysdig Vulnerability Report` - Sysdig Vulnerability Report * `Talisman Scan` - Talisman Scan * `Tenable Scan` - Tenable Scan * `Terrascan Scan` - Terrascan Scan * `Testssl Scan` - Testssl Scan * `TFSec Scan` - TFSec Scan * `Threagile risks report` - Threagile risks report * `ThreatComposer Scan` - ThreatComposer Scan * `Trivy Operator Scan` - Trivy Operator Scan * `Trivy Scan` - Trivy Scan * `Trufflehog Scan` - Trufflehog Scan * `Trufflehog3 Scan` - Trufflehog3 Scan * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan * `Trustwave Scan (CSV)` - Trustwave Scan (CSV) * `Twistlock Image Scan` - Twistlock Image Scan * `VCG Scan` - VCG Scan * `Veracode Scan` - Veracode Scan * `Veracode SourceClear Scan` - Veracode SourceClear Scan * `Vulners` - Vulners * `Wapiti Scan` - Wapiti Scan * `Wazuh` - Wazuh * `WFuzz JSON report` - WFuzz JSON report * `Whispers Scan` - Whispers Scan * `WhiteHat Sentinel` - WhiteHat Sentinel * `Wiz Scan` - Wiz Scan * `Wizcli Dir Scan` - Wizcli Dir Scan * `Wizcli IaC Scan` - Wizcli IaC Scan * `Wizcli Img Scan` - Wizcli Img Scan * `Wpscan` - Wpscan * `Xanitizer Scan` - Xanitizer Scan * `Yarn Audit Scan` - Yarn Audit Scan * `ZAP Scan` - ZAP Scan (required)
        :type scan_type: str
        :param scan_date: Scan completion date will be used on all findings.
        :type scan_date: date
        :param minimum_severity: Minimum severity level to be imported  * `Info` - Info * `Low` - Low * `Medium` - Medium * `High` - High * `Critical` - Critical
        :type minimum_severity: str
        :param active: Force findings to be active/inactive or default to the original tool (None)
        :type active: bool
        :param verified: Force findings to be verified/not verified or default to the original tool (None)
        :type verified: bool
        :param endpoint_to_add: Enter the ID of an Endpoint that is associated with the target Product. New Findings will be added to that Endpoint.
        :type endpoint_to_add: int
        :param file:
        :type file: bytearray
        :param product_type_name:
        :type product_type_name: str
        :param product_name:
        :type product_name: str
        :param engagement_name:
        :type engagement_name: str
        :param engagement_end_date: End Date for Engagement. Default is current time + 365 days. Required format year-month-day
        :type engagement_end_date: date
        :param source_code_management_uri: Resource link to source code
        :type source_code_management_uri: str
        :param test_title:
        :type test_title: str
        :param auto_create_context:
        :type auto_create_context: bool
        :param deduplication_on_engagement:
        :type deduplication_on_engagement: bool
        :param lead:
        :type lead: int
        :param push_to_jira:
        :type push_to_jira: bool
        :param environment:
        :type environment: str
        :param build_id: ID of the build that was scanned.
        :type build_id: str
        :param branch_tag: Branch or Tag that was scanned.
        :type branch_tag: str
        :param commit_hash: Commit that was scanned.
        :type commit_hash: str
        :param api_scan_configuration:
        :type api_scan_configuration: int
        :param service: A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
        :type service: str
        :param group_by: Choose an option to automatically group new findings by the chosen option.  * `component_name` - Component Name * `component_name+component_version` - Component Name + Version * `file_path` - File path * `finding_title` - Finding Title
        :type group_by: str
        :param create_finding_groups_for_all_findings: If set to false, finding groups will only be created when there is more than one grouped finding
        :type create_finding_groups_for_all_findings: bool
        :param apply_tags_to_findings: If set to True, the tags will be applied to the findings
        :type apply_tags_to_findings: bool
        :param apply_tags_to_endpoints: If set to True, the tags will be applied to the endpoints
        :type apply_tags_to_endpoints: bool
        :param do_not_reactivate: Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.
        :type do_not_reactivate: bool
        :param test:
        :type test: int
        :param close_old_findings: Select if old findings no longer present in the report get closed as mitigated when importing.
        :type close_old_findings: bool
        :param close_old_findings_product_scope: Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.
        :type close_old_findings_product_scope: bool
        :param version: Version that will be set on existing Test object. Leave empty to leave existing value in place.
        :type version: str
        :param tags: Modify existing tags that help describe this scan. (Existing test tags will be overwritten)
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._reimport_scan_create_serialize(
            scan_type=scan_type,
            scan_date=scan_date,
            minimum_severity=minimum_severity,
            active=active,
            verified=verified,
            endpoint_to_add=endpoint_to_add,
            file=file,
            product_type_name=product_type_name,
            product_name=product_name,
            engagement_name=engagement_name,
            engagement_end_date=engagement_end_date,
            source_code_management_uri=source_code_management_uri,
            test_title=test_title,
            auto_create_context=auto_create_context,
            deduplication_on_engagement=deduplication_on_engagement,
            lead=lead,
            push_to_jira=push_to_jira,
            environment=environment,
            build_id=build_id,
            branch_tag=branch_tag,
            commit_hash=commit_hash,
            api_scan_configuration=api_scan_configuration,
            service=service,
            group_by=group_by,
            create_finding_groups_for_all_findings=create_finding_groups_for_all_findings,
            apply_tags_to_findings=apply_tags_to_findings,
            apply_tags_to_endpoints=apply_tags_to_endpoints,
            do_not_reactivate=do_not_reactivate,
            test=test,
            close_old_findings=close_old_findings,
            close_old_findings_product_scope=close_old_findings_product_scope,
            version=version,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': 'ReImportScan',
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _reimport_scan_create_serialize(
        self,
        scan_type,
        scan_date,
        minimum_severity,
        active,
        verified,
        endpoint_to_add,
        file,
        product_type_name,
        product_name,
        engagement_name,
        engagement_end_date,
        source_code_management_uri,
        test_title,
        auto_create_context,
        deduplication_on_engagement,
        lead,
        push_to_jira,
        environment,
        build_id,
        branch_tag,
        commit_hash,
        api_scan_configuration,
        service,
        group_by,
        create_finding_groups_for_all_findings,
        apply_tags_to_findings,
        apply_tags_to_endpoints,
        do_not_reactivate,
        test,
        close_old_findings,
        close_old_findings_product_scope,
        version,
        tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {
            'tags': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if scan_date is not None:
            _form_params.append(('scan_date', scan_date))
        if minimum_severity is not None:
            _form_params.append(('minimum_severity', minimum_severity))
        if active is not None:
            _form_params.append(('active', active))
        if verified is not None:
            _form_params.append(('verified', verified))
        if endpoint_to_add is not None:
            _form_params.append(('endpoint_to_add', endpoint_to_add))
        if file is not None:
            _files['file'] = file
        if product_type_name is not None:
            _form_params.append(('product_type_name', product_type_name))
        if product_name is not None:
            _form_params.append(('product_name', product_name))
        if engagement_name is not None:
            _form_params.append(('engagement_name', engagement_name))
        if engagement_end_date is not None:
            _form_params.append(('engagement_end_date', engagement_end_date))
        if source_code_management_uri is not None:
            _form_params.append(('source_code_management_uri', source_code_management_uri))
        if test_title is not None:
            _form_params.append(('test_title', test_title))
        if auto_create_context is not None:
            _form_params.append(('auto_create_context', auto_create_context))
        if deduplication_on_engagement is not None:
            _form_params.append(('deduplication_on_engagement', deduplication_on_engagement))
        if lead is not None:
            _form_params.append(('lead', lead))
        if push_to_jira is not None:
            _form_params.append(('push_to_jira', push_to_jira))
        if environment is not None:
            _form_params.append(('environment', environment))
        if build_id is not None:
            _form_params.append(('build_id', build_id))
        if branch_tag is not None:
            _form_params.append(('branch_tag', branch_tag))
        if commit_hash is not None:
            _form_params.append(('commit_hash', commit_hash))
        if api_scan_configuration is not None:
            _form_params.append(('api_scan_configuration', api_scan_configuration))
        if service is not None:
            _form_params.append(('service', service))
        if group_by is not None:
            _form_params.append(('group_by', group_by))
        if create_finding_groups_for_all_findings is not None:
            _form_params.append(('create_finding_groups_for_all_findings', create_finding_groups_for_all_findings))
        if apply_tags_to_findings is not None:
            _form_params.append(('apply_tags_to_findings', apply_tags_to_findings))
        if apply_tags_to_endpoints is not None:
            _form_params.append(('apply_tags_to_endpoints', apply_tags_to_endpoints))
        if do_not_reactivate is not None:
            _form_params.append(('do_not_reactivate', do_not_reactivate))
        if scan_type is not None:
            _form_params.append(('scan_type', scan_type))
        if test is not None:
            _form_params.append(('test', test))
        if close_old_findings is not None:
            _form_params.append(('close_old_findings', close_old_findings))
        if close_old_findings_product_scope is not None:
            _form_params.append(('close_old_findings_product_scope', close_old_findings_product_scope))
        if version is not None:
            _form_params.append(('version', version))
        if tags is not None:
            _form_params.append(('tags', tags))
        # process the body parameter

        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(['multipart/form-data'])
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = ['basicAuth', 'cookieAuth', 'tokenAuth']

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/reimport-scan/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

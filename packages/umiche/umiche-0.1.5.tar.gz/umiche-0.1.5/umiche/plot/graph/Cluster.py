__version__ = "v1.0"
__copyright__ = "Copyright 2025"
__license__ = "GPL-3.0"
__developer__ = "Jianfeng Sun"
__maintainer__ = "Jianfeng Sun"
__email__="jianfeng.sunmt@gmail.com"


import json
import networkx as nx
import seaborn as sns
import matplotlib.pyplot as plt
from umiche.plot.gadget.Element import Element as pele
from umiche.util.Reader import Reader as freader
from umiche.network.Adjacency import Adjacency as netadj


class Cluster:

    def __init__(
            self,
            dedup_cluster,
            ccs,
            edge_list,
            umi_uniq_val_cnt_fpn=None,
    ):
        self.dedup_cluster = dedup_cluster
        self.ccs = ccs
        self.edge_list = edge_list
        self.umi_uniq_val_cnt_fpn = umi_uniq_val_cnt_fpn
        self.pele = pele()
        self.freader = freader()
        self.palette = self.pele.color(which='ccs4', is_random=True)
        self.palette = [
            'crimson',
            'gray', # grey sienna
            'orange',
            'seagreen',
            'cornflowerblue',
            'sienna',
        ]
        sns.set(font="Helvetica")
        sns.set_style("ticks")

        # cc
        # self.dedup_cluster = [[69, 72, 838, 1221, 97, 210, 249, 315, 324, 374, 457, 658, 727, 760, 771, 933, 1073, 1126, 1198, 1260, 1271, 1307, 1498, 1505, 1541, 1563, 914, 946, 1083, 684, 1288, 1543, 822, 1174, 119, 290, 303, 204, 218, 289, 302, 404, 545, 586, 633, 674, 709, 720, 802, 884, 943, 980, 1355, 1436, 1488, 1553, 786, 537, 867, 1649, 1255, 701, 1080, 347, 251, 1315, 1549]]
        # mcl
        # self.dedup_cluster = [[69, 72, 838, 1221, 97, 210, 249, 315, 324, 374, 457, 658, 727, 760, 771, 933, 1073, 1126, 1198, 1260, 1271, 1307, 1498, 1505, 1541, 1563, 914, 946, 1083, 684, 1288, 1543, 822], [1174, 119, 290, 303, 204, 218, 289, 302, 404, 545, 586, 633, 674, 709, 720, 802, 884, 943, 980, 1355, 1436, 1488, 1553, 786, 537, 867, 1649, 1255, 701, 1080, 347, 251], [1315, 1549]]
        # direc
        # self.dedup_cluster = [[1541, 1543, 1549, 1553, 786, 404, 1174, 537, 1436, 289, 290, 1315, 802, 545, 674, 302, 303, 943, 1080, 1083, 701, 709, 586, 1355, 204, 1488, 720, 980, 218, 347, 867, 1255, 1260, 1649, 884, 119, 760, 633, 251], [771, 1288, 914, 658, 1563, 1307, 933, 684, 1198, 1073, 946, 315, 324, 1221, 69, 838, 72, 457, 210, 727, 1498, 97, 1505, 1126, 374, 1271, 249], [822]]
        # self.ccs = {69: [72, 838, 1221], 72: [69, 97, 210, 249, 315, 324, 374, 457, 658, 727, 760, 771, 838, 933, 1073, 1126, 1198, 1221, 1260, 1271, 1307, 1498, 1505, 1541, 1563], 838: [69, 72, 1221], 1221: [69, 72, 838, 914, 946], 97: [72, 658, 1505], 210: [72, 1083, 1271], 249: [72, 684, 727, 1073], 315: [72, 374, 946, 1126], 324: [72, 771], 374: [72, 315, 1126], 457: [72, 1288, 1307], 658: [72, 97, 1505], 727: [72, 249, 1073], 760: [72, 933, 1543], 771: [72, 324], 933: [72, 760], 1073: [72, 249, 727], 1126: [72, 315, 374], 1198: [72, 1260, 1541], 1260: [72, 1083, 1198, 1541, 1543], 1271: [72, 210], 1307: [72, 457], 1498: [72, 684, 1563], 1505: [72, 97, 658, 822], 1541: [72, 1198, 1260], 1563: [72, 914, 1498], 914: [1221, 1563], 946: [315, 1221], 1083: [210, 1260], 684: [249, 1498], 1288: [457], 1543: [760, 1174, 1260], 822: [1505], 1174: [119, 290, 303, 1315, 1543], 119: [204, 218, 289, 290, 302, 303, 404, 545, 586, 633, 674, 709, 720, 802, 884, 943, 980, 1174, 1355, 1436, 1488, 1553], 290: [119, 303, 786, 1174], 303: [119, 290, 1174], 1315: [1174, 1549], 204: [119, 537, 720, 1488], 218: [119, 302, 674, 867, 1649], 289: [119, 980], 302: [119, 218, 674, 1255], 404: [119, 802, 943], 545: [119, 701, 1436], 586: [119, 709, 884], 633: [119, 1080, 1553], 674: [119, 218, 302], 709: [119, 586, 884], 720: [119, 204, 347, 1488], 802: [119, 404, 537, 943], 884: [119, 586, 701, 709], 943: [119, 404, 802], 980: [119, 251, 289], 1355: [119, 251, 867], 1436: [119, 545], 1488: [119, 204, 720], 1553: [119, 633, 786], 786: [290, 1553], 1549: [1315], 537: [204, 802], 867: [218, 1355, 1649], 1649: [218, 867], 1255: [302], 701: [545, 884], 1080: [633], 347: [720], 251: [980, 1355]}
        # self.edge_list = [(97, 72), (658, 97), (1355, 119), (204, 119), (1649, 218), (1541, 72), (933, 72), (914, 1563), (1505, 72), (1221, 69), (404, 119), (1649, 867), (1307, 72), (302, 119), (802, 119), (1543, 760), (1126, 72), (709, 586), (786, 1553), (374, 315), (946, 315), (1073, 72), (720, 204), (933, 760), (1174, 1543), (210, 72), (771, 72), (537, 204), (727, 249), (1563, 72), (684, 1498), (822, 1505), (1549, 1315), (1505, 97), (545, 119), (374, 72), (1553, 119), (1436, 119), (867, 218), (457, 72), (1563, 1498), (709, 119), (720, 119), (1260, 1198), (1543, 1260), (218, 119), (251, 1355), (701, 545), (1541, 1260), (1488, 204), (1553, 633), (1083, 210), (980, 289), (119, 1174), (727, 72), (290, 119), (1073, 727), (1541, 1198), (884, 586), (802, 404), (303, 119), (347, 720), (674, 218), (1221, 838), (1221, 72), (914, 1221), (943, 119), (586, 119), (943, 802), (838, 72), (1271, 210), (980, 119), (674, 302), (786, 290), (251, 980), (1488, 720), (1488, 119), (946, 1221), (1073, 249), (884, 709), (1288, 457), (1126, 315), (943, 404), (537, 802), (302, 218), (249, 72), (315, 72), (303, 290), (290, 1174), (884, 119), (633, 119), (771, 324), (658, 72), (1505, 658), (1307, 457), (303, 1174), (72, 69), (289, 119), (838, 69), (684, 249), (1498, 72), (1315, 1174), (1126, 374), (701, 884), (1255, 302), (674, 119), (1080, 633), (1083, 1260), (1436, 545), (1260, 72), (1271, 72), (867, 1355), (760, 72), (1198, 72), (324, 72)]

        # self.dedup_cluster = [[0, 9, 26, 27], [16, 20, 25], [33, 13, 17, 30], [28, 2, 14]]
        # self.ccs = {0: [9, 16, 26, 27], 9: [0, 33], 16: [0, 20, 25], 26: [0], 27: [0], 33: [9, 13, 17], 20: [16, 25], 25: [16, 20, 28], 13: [30, 33], 17: [30, 33], 28: [2, 25], 30: [13, 17], 2: [14, 28], 14: [2]}
        # self.edge_list = [(25, 16), (17, 33), (9, 0), (13, 33), (16, 0), (30, 17), (30, 13), (33, 9), (20, 16), (26, 0), (2, 28), (27, 0), (28, 25), (14, 2), (25, 20)]

        # self.dedup_cluster = [[0, 3, 88], [86, 82, 18, 93, 11], [53, 52, 95], [25, 97, 7]]
        # self.ccs = {0: [3, 88], 3: [0, 86], 88: [0], 86: [3, 82], 82: [18, 86, 93], 18: [11, 82], 93: [82], 11: [18, 53], 53: [11, 25, 52], 25: [53, 97], 52: [53, 95], 97: [7, 25], 95: [52], 7: [97]}
        # self.edge_list = [(53, 11), (52, 53), (93, 82), (7, 97), (95, 52), (88, 0), (3, 0), (86, 3), (11, 18), (82, 86), (25, 53), (97, 25), (18, 82)]

        # cc iCHIP
        # self.dedup_cluster =  [[23, 41, 27, 62, 85, 48, 58, 81, 28, 46, 45, 38, 71, 39, 64, 49]]
        # mcl
        # self.dedup_cluster =  [[23, 41, 27, 62], [85, 48, 58, 81, 28, 46, 45, 38], [71, 39, 64, 49]]
        # direc
        # self.dedup_cluster = [[64, 49, 71, 39], [48, 81, 85, 58, 62], [38, 28, 46], [45], [27], [41, 23]]
        # self.ccs = {23: [41], 41: [23, 27], 27: [41, 62], 62: [27, 85], 85: [48, 58, 62, 81], 48: [81, 85], 58: [85], 81: [28, 46, 48, 71, 85], 28: [45, 46, 81], 46: [28, 38, 81], 71: [39, 81], 45: [28, 38], 38: [45, 46], 39: [64, 71], 64: [39, 49], 49: [64]}
        # self.edge_list = [(38, 46), (58, 85), (71, 81), (48, 85), (81, 85), (28, 81), (62, 27), (41, 23), (46, 81), (49, 64), (38, 45), (85, 62), (64, 39), (81, 48), (45, 28), (39, 71), (46, 28), (27, 41)]

        self.nodes = [*self.ccs.keys()]
        print('nodes: {}'.format(self.nodes))

        # df_umi_uniq_val_cnt = self.freader.generic()
        df_umi_uniq_val_cnt = self.freader.generic(df_fpn=self.umi_uniq_val_cnt_fpn)
        import pandas as pd
        umi_cnt_dict = pd.Series(df_umi_uniq_val_cnt[1].values, index=df_umi_uniq_val_cnt[0]).to_dict()
        self.node_size = {node_i: umi_cnt_dict[int(node_i)]*60 for node_i in self.nodes}
        print(self.node_size)

    def nodeColors(self, arr_2d, palette):
        colors = {}
        for i, arr_1d in enumerate(arr_2d):
            for j in arr_1d:
                colors[j] = palette[i]
        print(colors)
        colors_ = {}
        for node in self.nodes:
            colors_[node] = colors[node]
        print(colors_)
        return colors_

    def edgeColors(self, edge_list, node_colors):
        colors_ = []
        for i, edges in enumerate(edge_list):
            colors_.append(node_colors[edges[0]])
        return colors_

    def draw(self, ):
        fig, ax = plt.subplots(figsize=(10, 10))

        G = nx.Graph()
        G.add_nodes_from(self.nodes)
        G.add_edges_from(self.edge_list)

        node_colors = self.nodeColors(arr_2d=self.dedup_cluster, palette=self.palette)

        options = {
            "font_size": 8,
            # "node_size": 200,
            'node_size': [*self.node_size.values()],
            "node_color": [*node_colors.values()],
            # "edgecolors": 'gray',
            "linewidths": 1,
            "width": 3,
            "alpha": 0.8,
        }

        pos = nx.spring_layout(G, seed=2) # 2
        # pos=nx.circular_layout(G)
        # pos=nx.spiral_layout(G)

        nx.draw_networkx(
            G, pos,
            edge_color='grey',
            with_labels=False,
            # with_labels=True,
            **options
        )

        ac = plt.gca()
        ac.margins(0.20)
        plt.axis("off")
        # plt.title("MCL", fontsize=20)
        fig.subplots_adjust(
            top=0.98,
            bottom=0.01,
            left=0.01,
            right=0.98,
            # hspace=0.60,
            # wspace=0.30,
        )
        # plt.savefig('./cc.pdf')
        # plt.savefig('./mcl.pdf')
        # plt.savefig('./direc.pdf')
        plt.show()


if __name__ == "__main__":
    from umiche.path import to

    p = Cluster(
        umi_uniq_val_cnt_fpn=to('data/simu/mclumi/seq_errs/umi_uniq_val_cnt-simu.txt'),
        # umi_uniq_val_cnt_fpn=to('data/simu/mclumi/seq_errs/umi_uniq_val_cnt-iclip.txt'),
        dedup_cluster = [
            [69, 72, 838, 1221, 97, 210, 249, 315, 324, 374, 457, 658, 727, 760, 771, 933, 1073, 1126, 1198, 1260, 1271, 1307, 1498, 1505, 1541, 1563, 914, 946, 1083, 684, 1288, 1543, 822],
            [1174, 119, 290, 303, 204, 218, 289, 302, 404, 545, 586, 633, 674, 709, 720, 802, 884, 943, 980, 1355, 1436, 1488, 1553, 786, 537, 867, 1649, 1255, 701, 1080, 347, 251],
            [1315, 1549]
        ],
        ccs = {
            69: [72, 838, 1221],
            72: [69, 97, 210, 249, 315, 324, 374, 457, 658, 727, 760, 771, 838, 933, 1073, 1126, 1198, 1221, 1260, 1271, 1307, 1498, 1505, 1541, 1563],
            838: [69, 72, 1221],
            1221: [69, 72, 838, 914, 946],
            97: [72, 658, 1505],
            210: [72, 1083, 1271],
            249: [72, 684, 727, 1073],
            315: [72, 374, 946, 1126],
            324: [72, 771],
            374: [72, 315, 1126],
            457: [72, 1288, 1307],
            658: [72, 97, 1505],
            727: [72, 249, 1073],
            760: [72, 933, 1543],
            771: [72, 324],
            933: [72, 760],
            1073: [72, 249, 727],
            1126: [72, 315, 374],
            1198: [72, 1260, 1541],
            1260: [72, 1083, 1198, 1541, 1543],
            1271: [72, 210],
            1307: [72, 457],
            1498: [72, 684, 1563],
            1505: [72, 97, 658, 822],
            1541: [72, 1198, 1260],
            1563: [72, 914, 1498],
            914: [1221, 1563],
            946: [315, 1221],
            1083: [210, 1260],
            684: [249, 1498],
            1288: [457],
            1543: [760, 1174, 1260],
            822: [1505],
            1174: [119, 290, 303, 1315, 1543],
            119: [204, 218, 289, 290, 302, 303, 404, 545, 586, 633, 674, 709, 720, 802, 884, 943, 980, 1174, 1355, 1436, 1488, 1553],
            290: [119, 303, 786, 1174],
            303: [119, 290, 1174],
            1315: [1174, 1549],
            204: [119, 537, 720, 1488],
            218: [119, 302, 674, 867, 1649],
            289: [119, 980],
            302: [119, 218, 674, 1255],
            404: [119, 802, 943],
            545: [119, 701, 1436],
            586: [119, 709, 884],
            633: [119, 1080, 1553],
            674: [119, 218, 302],
            709: [119, 586, 884],
            720: [119, 204, 347, 1488],
            802: [119, 404, 537, 943],
            884: [119, 586, 701, 709],
            943: [119, 404, 802],
            980: [119, 251, 289],
            1355: [119, 251, 867],
            1436: [119, 545],
            1488: [119, 204, 720],
            1553: [119, 633, 786],
            786: [290, 1553],
            1549: [1315],
            537: [204, 802],
            867: [218, 1355, 1649],
            1649: [218, 867],
            1255: [302],
            701: [545, 884],
            1080: [633],
            347: [720],
            251: [980, 1355],
        },
        edge_list = [
            (97, 72), (658, 97), (1355, 119), (204, 119), (1649, 218), (1541, 72), (933, 72), (914, 1563),
            (1505, 72), (1221, 69), (404, 119), (1649, 867), (1307, 72), (302, 119), (802, 119), (1543, 760),
            (1126, 72), (709, 586), (786, 1553), (374, 315), (946, 315), (1073, 72), (720, 204), (933, 760),
            (1174, 1543), (210, 72), (771, 72), (537, 204), (727, 249), (1563, 72), (684, 1498), (822, 1505),
            (1549, 1315), (1505, 97), (545, 119), (374, 72), (1553, 119), (1436, 119), (867, 218), (457, 72),
            (1563, 1498), (709, 119), (720, 119), (1260, 1198), (1543, 1260), (218, 119), (251, 1355),
            (701, 545), (1541, 1260), (1488, 204), (1553, 633), (1083, 210), (980, 289), (119, 1174),
            (727, 72), (290, 119), (1073, 727), (1541, 1198), (884, 586), (802, 404), (303, 119), (347, 720),
            (674, 218), (1221, 838), (1221, 72), (914, 1221), (943, 119), (586, 119), (943, 802), (838, 72),
            (1271, 210), (980, 119), (674, 302), (786, 290), (251, 980), (1488, 720), (1488, 119),
            (946, 1221), (1073, 249), (884, 709), (1288, 457), (1126, 315), (943, 404), (537, 802),
            (302, 218), (249, 72), (315, 72), (303, 290), (290, 1174), (884, 119), (633, 119), (771, 324),
            (658, 72), (1505, 658), (1307, 457), (303, 1174), (72, 69), (289, 119), (838, 69), (684, 249),
            (1498, 72), (1315, 1174), (1126, 374), (701, 884), (1255, 302), (674, 119), (1080, 633),
            (1083, 1260), (1436, 545), (1260, 72), (1271, 72), (867, 1355), (760, 72), (1198, 72), (324, 72)
        ],
    )

    p.draw()
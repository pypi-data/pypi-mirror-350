# MCP Model Service: {package_name}
This package contains an MCP service named **{mcp_server_name}** generated by MCP Modelservice SDK with multi-mount architecture.

## Running the Service
1.  **Prerequisites**:
    *   Python 3.7+ and pip. Set `PYTHON_EXECUTABLE` and `PIP_EXECUTABLE` env vars if needed.
    *   `start.sh` installs `mcp_modelservice_sdk`, `uvicorn`. Manual install if fails.
2.  **Execution**:
    *   Unzip package, `cd {package_name}/project`.
    *   `chmod +x start.sh` then `./start.sh`.
    Service at: `{service_url_example}` (host/port from `main.py`).

## About the Service
*   **Base MCP Server Name**: `{mcp_server_name}`
*   **Server Root Path**: `{mcp_server_root_path}`
*   **MCP Base Path**: `{mcp_service_base_path}`
*   **Base URL**: `{service_url_example}`

## Multi-Mount Architecture
This service uses a **directory-based routing** approach where each Python file in your source directory gets its own FastMCP instance mounted at a path derived from its location in the directory structure.

For example, if your source directory contains:
- `moduleA.py` → mounted at `{mcp_server_root_path}/moduleA{mcp_service_base_path}`
- `subsystemB/moduleC.py` → mounted at `{mcp_server_root_path}/subsystemB/moduleC{mcp_service_base_path}`
- `subsystemB/__init__.py` → mounted at `{mcp_server_root_path}/subsystemB{mcp_service_base_path}`

This organization allows for a more intuitive grouping of related tools based on your code's directory structure.

## Interacting with the Service
Interact via an MCP client. To list all tools for a specific module, send a POST request to the appropriate endpoint.

For example, to list tools from `moduleA.py`, POST to:
`{service_url_example}/moduleA{mcp_service_base_path}/list_tools` with an empty JSON body `{{{{}}}}`

## Exposed Tools
{tool_documentation_section}

## Customization
*   **Dependencies**: Add to environment or modify `start.sh`/use `requirements.txt`.
*   **Configuration**: Modify `main.py` for host, port, logging.
*   **Directory Structure**: Organize your Python files in directories to create logical groupings of tools.

Generated by MCP Modelservice SDK.
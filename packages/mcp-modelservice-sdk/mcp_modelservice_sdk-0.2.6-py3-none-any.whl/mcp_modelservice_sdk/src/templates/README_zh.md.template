# 🚀 轻松构建与部署 MCP 服务：`{package_name}` 服务指南

*[English Version](README.md)*

欢迎使用您的 `{package_name}` MCP 服务！此服务由 `mcp-modelservice-sdk` 生成，提供了一种简单的方式来部署和与您的 MCP（模型上下文协议）工具进行交互。

## 什么是此服务？

这是一个即可部署的 MCP 服务，包含：
- 📦 **预打包工具**：您的 Python 函数转换为 MCP 工具
- 🚀 **一键部署**：简单的启动脚本，立即可用
- 🔄 **自动路由**：{architecture_description}
- 🌐 **跨平台兼容**：支持多种传输协议和部署环境

## 🔥 快速开始

### 1. 环境要求

- Python >= 3.10
- FastMCP 已安装（启动脚本会自动处理）

### 2. 运行服务

```bash
# 使脚本可执行（Linux/Mac）
chmod +x start.sh

# 启动服务
./start.sh

# 或手动运行
python main.py
```

服务将在以下地址可用：**{service_url_example}**

### 3. 测试您的服务

启动后，访问交互式测试页面：
```
{service_url_example}/mcp
```

## 📖 服务详情

### 🏗️ 架构信息

- **服务名称**：`{mcp_server_name}`
- **服务器根路径**：`{mcp_server_root_path}`
- **MCP 基础路径**：`{mcp_service_base_path}`
- **基础 URL**：`{service_url_example}`
- **架构类型**：{architecture_description}

{architecture_detailed_explanation}

## 🔧 可用工具

{tool_documentation_section}

## 🤝 客户端集成

### 使用浏览器界面

1. **MCP Inspector**：下载并使用 MCP Inspector
2. **交互式测试**：访问 `{service_url_example}/mcp` 进行直接测试

### 使用 Python 客户端

```python
import requests
import json

def call_mcp_tool(tool_name, parameters, endpoint_url="{service_url_example}"):
    """使用给定参数调用 MCP 工具"""
    payload = {{
        "jsonrpc": "2.0",
        "method": tool_name,
        "params": parameters,
        "id": 1
    }}
    response = requests.post(f"{{endpoint_url}}/mcp", json=payload)
    return response.json()

# 使用示例
result = call_mcp_tool("your_function_name", {{"param1": "value1", "param2": "value2"}})
print(result)
```

### 使用 FastMCP 客户端

```python
from fastmcp import FastMCP

# 连接到您的服务
client = FastMCP("{service_url_example}")

# 列出可用工具
tools = await client.list_tools()

# 调用工具
result = await client.call_tool("your_function_name", {{"param1": "value1"}})
```

## ⚙️ 配置与自定义

### 环境变量

创建 `.env` 文件来自定义您的服务：

```env
# 服务配置
HOST=127.0.0.1
PORT=8080
MCP_SERVER_NAME={mcp_server_name}

# 日志
LOG_LEVEL=INFO
```

### 修改依赖项

1. **添加 Python 包**：更新 `requirements.txt` 或修改 `start.sh`
2. **环境设置**：根据需要修改启动脚本
3. **服务配置**：编辑 `main.py` 进行高级自定义

### 目录结构

您的服务遵循此组织结构：
```
{package_name}/
├── project/
│   ├── main.py              # 服务入口点
│   ├── start.sh             # 启动脚本
│   ├── README.md            # 此文档
│   ├── {source_structure}   # 您的原始代码结构
│   └── requirements.txt     # Python 依赖项
```

## 📚 生产部署

### Docker 部署

```dockerfile
FROM python:3.10-slim

WORKDIR /app
COPY . .

RUN pip install -r requirements.txt

EXPOSE 8080

CMD ["python", "main.py"]
```
## 💡 故障排除

### 服务无法启动？

1. **检查端口可用性**：尝试使用 `--port 9000` 指定其他端口
2. **验证 Python 代码**：确保您的函数中没有语法错误
3. **检查依赖项**：运行 `pip install -r requirements.txt`
4. **查看日志**：检查控制台输出以获取具体错误信息

### 工具无法工作？

1. **验证函数签名**：确保有正确的类型提示和文档字符串
2. **检查参数**：验证参数名称和类型符合预期
3. **本地测试**：使用 `/mcp` 的交互式界面

### 性能问题？

1. **监控资源**：检查 CPU 和内存使用情况
2. **优化函数**：检查并优化您的 Python 代码
3. **水平扩展**：在负载均衡器后部署多个实例

## 🔄 更新与维护

### 更新您的代码

1. 替换源目录中的文件
2. 重启服务：`./start.sh`
3. 使用交互式界面进行测试

### 监控

在以下位置监控您的服务健康状况：
- **健康检查**：`{service_url_example}/health`
- **指标**：`{service_url_example}/metrics`（如果启用）
- **日志**：检查控制台输出或日志文件

## 📞 支持与资源

- **生成工具**：[mcp-modelservice-sdk](https://github.com/liuhaotian9420/mcp(https://github.com/liuhaotian9420/mcp)
- **完整文档**：[完整文档](https://github.com/liuhaotian9420/mcp/docs)
- **问题反馈**：[报告问题](https://github.com/liuhaotian9420/mcp/issues)

---

🎉  如有任何问题或建议，欢迎随时联系我们。

*由 mcp-modelservice-sdk v{sdk_version} 生成* 
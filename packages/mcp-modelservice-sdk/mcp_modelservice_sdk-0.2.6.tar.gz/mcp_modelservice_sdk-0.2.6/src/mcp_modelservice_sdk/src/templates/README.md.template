# 🚀 Easy Build & Deploy MCP Services: `{package_name}` Service Guide

*[中文版本](README_zh.md)*

Welcome to your `{package_name}` MCP service! This service was generated by `mcp-modelservice-sdk` and provides an easy way to deploy and interact with your MCP (Model Context Protocol) tools.

## What is this Service?

This is a ready-to-deploy MCP service that contains:
- 📦 **Pre-packaged Tools**: Your Python functions converted to MCP tools
- 🚀 **One-click Deployment**: Simple startup script for immediate use
- 🔄 **Auto-routing**: {architecture_description}
- 🌐 **Cross-platform**: Compatible with multiple transport protocols and deployment environments

## 🔥 Quick Start

### 1. Prerequisites

- Python >= 3.10
- FastMCP installed (handled automatically by start script)

### 2. Running the Service

```bash
# Make the start script executable (Linux/Mac)
chmod +x start.sh

# Start the service
./start.sh

# Or run manually
python main.py
```

The service will be available at: **{service_url_example}**

### 3. Testing Your Service

After startup, visit the interactive testing page:
```
{service_url_example}/mcp
```

## 📖 Service Details

### 🏗️ Architecture Information

- **Service Name**: `{mcp_server_name}`
- **Server Root Path**: `{mcp_server_root_path}`
- **MCP Base Path**: `{mcp_service_base_path}`
- **Base URL**: `{service_url_example}`
- **Architecture**: {architecture_description}

{architecture_detailed_explanation}

## 🔧 Available Tools

{tool_documentation_section}

## 🤝 Client Integration

### Using Browser Interface

1. **MCP Inspector**: Download and use MCP Inspector
2. **Interactive Testing**: Visit `{service_url_example}/mcp` for direct testing

### Using Python Client

```python
import requests
import json

def call_mcp_tool(tool_name, parameters, endpoint_url="{service_url_example}"):
    """Call an MCP tool with given parameters"""
    payload = {{
        "jsonrpc": "2.0",
        "method": tool_name,
        "params": parameters,
        "id": 1
    }}
    response = requests.post(f"{{endpoint_url}}/mcp", json=payload)
    return response.json()

# Example usage
result = call_mcp_tool("your_function_name", {{"param1": "value1", "param2": "value2"}})
print(result)
```

### Using FastMCP Client

```python
from fastmcp import FastMCP

# Connect to your service
client = FastMCP("{service_url_example}")

# List available tools
tools = await client.list_tools()

# Call a tool
result = await client.call_tool("your_function_name", {{"param1": "value1"}})
```

## ⚙️ Configuration & Customization

### Environment Variables

Create a `.env` file to customize your service:

```env
# Service Configuration
HOST=127.0.0.1
PORT=8080
MCP_SERVER_NAME={mcp_server_name}

# Logging
LOG_LEVEL=INFO
```

### Modifying Dependencies

1. **Add Python packages**: Update `requirements.txt` or modify `start.sh`
2. **Environment setup**: Modify the startup script as needed
3. **Service configuration**: Edit `main.py` for advanced customization

### Directory Structure

Your service follows this organization:
```
{package_name}/
├── project/
│   ├── main.py              # Service entry point
│   ├── start.sh             # Startup script
│   ├── README.md            # This documentation
│   ├── {source_structure}   # Your original code structure
│   └── requirements.txt     # Python dependencies
```

## 📚 Production Deployment

### Docker Deployment

```dockerfile
FROM python:3.10-slim

WORKDIR /app
COPY . .

RUN pip install -r requirements.txt

EXPOSE 8080

CMD ["python", "main.py"]
```

### Cloud Deployment

The service is compatible with:
- **Heroku**: Use the included `Procfile`
- **AWS Lambda**: With serverless adapters
- **Google Cloud Run**: Ready for containerization
- **Azure Container Instances**: Direct deployment

## 💡 Troubleshooting

### Service Won't Start?

1. **Check port availability**: Try `--port 9000` for a different port
2. **Verify Python code**: Ensure no syntax errors in your functions
3. **Check dependencies**: Run `pip install -r requirements.txt`
4. **Review logs**: Check console output for specific error messages

### Tool Not Working?

1. **Verify function signature**: Ensure proper type hints and docstrings
2. **Check parameters**: Verify parameter names and types match expectations
3. **Test locally**: Use the interactive interface at `/mcp`

### Performance Issues?

1. **Monitor resources**: Check CPU and memory usage
2. **Optimize functions**: Review and optimize your Python code
3. **Scale horizontally**: Deploy multiple instances behind a load balancer

## 🔄 Updates & Maintenance

### Updating Your Code

1. Replace files in the source directory
2. Restart the service: `./start.sh`
3. Test with the interactive interface

### Monitoring

Monitor your service health at:
- **Health check**: `{service_url_example}/health`
- **Metrics**: `{service_url_example}/metrics` (if enabled)
- **Logs**: Check console output or log files

## 📞 Support & Resources

- **Generated by**: [mcp-modelservice-sdk](https://github.com/liuhaotian9420/mcp)
- **Documentation**: [Full Documentation](https://github.com/liuhaotian9420/mcp/docs)
- **Issues**: [Report Issues](https://github.com/liuhaotian9420/mcp/issues)

---

🎉 **Enjoy your MCP service!** If you have any questions or suggestions, feel free to reach out to us.

*Generated by mcp-modelservice-sdk v{sdk_version}*
from typing import Any

from eclypse_core.simulation._simulator.local import Simulator

class EclypseEvent:
    """An event in the simulation."""

    def __init__(
        self,
        name: str,
        trigger_every_ms: float | None = None,
        timeout: float | None = None,
        max_calls: int | None = None,
        triggers: dict[str, str | int | list[int]] | None = None,
        verbose: bool = False,
    ) -> None:
        """Initialize the event.

        Args:
            name (str): The name of the event.
            trigger_every_ms (Optional[float], optional): The time between periodic event
                triggers in milliseconds. Defaults to None.
            timeout (Optional[float], optional): The maximum time the event can run in
                seconds. Defaults to None.
            max_calls (Optional[int], optional): The maximum number of calls the event
                can have. Defaults to None.
            triggers (Optional[Dict[str, Union[str, int, List[int]]]], optional): The
                events that trigger the event. Defaults to None.
            verbose (bool, optional): Whether to print verbose output. Defaults to False.

        Raises:
            ValueError: The event must have a name.
        """

    def __call__(self, **kwargs) -> Any:
        """The event logic. Must be implemented by the user by either decorating a
        function or a class with a __call__ method, or by subclassing the EclypseEvent
        class and implementing the __call__ method.

        Raises:
            NotImplementedError: The event logic is not implemented.
        """

    @property
    def name(self) -> str:
        """The type of the event.

        Returns:
            EventType: The type of the event.
        """

    @property
    def n_calls(self) -> int:
        """Return the number of iterations of the simulation.

        Returns:
            int: The number of iterations.
        """

    @property
    def simulator(self) -> Simulator:
        """The simulator associated with the event.

        Returns:
            Simulator: The simulator associated with the event.
        """

    @property
    def is_periodic(self) -> bool:
        """The type of the event.

        Returns:
            EventType: The type of the event.
        """

    @property
    def delay(self) -> float | None:
        """The time between periodic event triggers in seconds."""

    @property
    def finished(self) -> bool:
        """Return True if the simulation has stopped, either because it reached the
        maximum number of iterations, the maximum time or it was manually stopped.

        Returns:
            bool: True if the simulation has stopped, False otherwise.
        """

    @property
    def data(self) -> dict[str, Any]:
        """The data generated by the event.

        Returns:
            Dict[str, Any]: The data generated by the event.
        """

    @property
    def triggered_by(self) -> str | None:
        """The event that triggered the event.

        Returns:
            Optional[str]: The event that triggered the event.
        """

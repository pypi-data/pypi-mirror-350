name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: PyO3/maturin-action@v1
      - name: Run cargo tests
        run: cargo test --all-features


  linux:
    runs-on: ${{ matrix.platform.runner }}

    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          # - runner: ubuntu-22.04
          #   target: aarch64
          # - runner: ubuntu-22.04
          #   target: armv7

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      # - name: Export aarch64 cross-compiler
      #   if: matrix.platform.target == 'aarch64'
      #   run: echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install AArch64 cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          # point maturin's cc-rs at the aarch64 cross-compiler
          CC_aarch64_unknown_linux_gnu: gcc-aarch64-linux-gnu
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: gcc-aarch64-linux-gnu
          # force the assembler to know it's ARMv8-A
          CFLAGS_aarch64_unknown_linux_gnu: "-march=armv8-a -D__ARM_ARCH=8"
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic perl-CPAN

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi
            

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ubuntu-22.04

    # Use Alpine so we can use apk directly
    container:
      image: alpine:3.18

    strategy:
      matrix:
        target: [ x86_64-unknown-linux-musl ]

    steps:
      - name: Check out source
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          apk update
          apk add --no-cache \
            bash \
            python3 \
            python3-dev \
            py3-pip \
            build-base \
            libffi-dev \
            pkgconfig \
            openssl-dev \
            curl \
            cmake \
            patchelf
          ln -s "$(which gcc)" /usr/bin/musl-gcc

          # sanity‚Äêcheck it
          which musl-gcc
          musl-gcc --version

      - name: Install Rust toolchain
        env:
          HOME: /root      
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

          source /root/.cargo/env
          rustup default stable
          rustup target add ${{ matrix.target }}   # install musl target

      - name: Install maturin
        env:
          HOME: /root    
        run: |
          source /root/.cargo/env
          cargo install maturin --locked --force

      - name: Build musllinux wheel
        env:
          HOME: /root
        run: |
          source /root/.cargo/env
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc
          export OPENSSL_STATIC=1
          python3 -m venv .venv
          source .venv/bin/activate
          pip install patchelf
          maturin build \
            --release \
            --manylinux musllinux_1_2 \
            --target ${{ matrix.target }} \
            --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}
          path: dist
  

  # windows:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: windows-latest
  #           target: x64

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #         architecture: ${{ matrix.platform.target }}
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: 'true'
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.platform.target }}
  #         path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    # if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [test, linux, musllinux, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

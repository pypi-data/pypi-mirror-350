# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].87491454325809755332177775722742283631
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nSearch the web to answer\\n</instructions>"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 6.48e-05,
          'gen_ai.usage.input_tokens': 162,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15860054276850690112,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261681947409854,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17198170524780427149,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261680931440575,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-26T08:14:41-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_ud3cwr6N75FInolAFKUaPpSt',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17967374099649043092,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261681962151104,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 17198170524780427149,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261681958449664,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 9.2e-05,
          'gen_ai.usage.input_tokens': 230,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2524747225664238079,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261683061077340,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17198170524780427149,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261681967607036,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_Wvh0OclFRrLWl4izPjryNA76',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14701140709892522089,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261683071364677,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 17198170524780427149,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261683069737042,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00010159999999999999,
          'gen_ai.usage.input_tokens': 254,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8745773714744984608,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261684076608546,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 17198170524780427149,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261683087129143,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '9edd42f9-a2c9-48cf-9de5-cc0755f3a412',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17198170524780427149,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 87491454325809755332177775722742283631,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261684631823043,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261680926901743,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].274680751075423540615003964383898876113
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 614627532154384648,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261650705856006,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14628962883674286883,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261649725315959,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-26T08:14:10-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_34f2QfapDdgDUXio7pjgo5wp',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5414615004810641599,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261650711285862,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 9307802333540991826,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261650708285494,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1621408277451039959,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261651347470808,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14628962883674286883,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261650713202440,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_vvPsXr1p5mZOrUB7Tdm9b8Gu',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18012514017468685632,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261651349851562,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 16489542855364840820,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261651349585822,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3826464038413609762,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261652165295226,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14628962883674286883,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261651351475181,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': 'ec011341-b1e7-4e5d-b265-b1048c038648',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 672162040527029998,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 274680751075423540615003964383898876113,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261652172284536,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261649724134594,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].158036044823277914133966979954351425354
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 6.52e-05,
          'gen_ai.usage.input_tokens': 163,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11763517427614955104,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261659450486088,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 13868338372379262632,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261658448006869,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-26T08:14:19-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'call_9k67ddSPBpaUPJyipkKq8WQq',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3246786394701879981,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261659466454517,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 13868338372379262632,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261659462204826,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 9.24e-05,
          'gen_ai.usage.input_tokens': 231,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12960657963076340245,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261660415580966,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 13868338372379262632,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261659473590589,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'call_MPusr7YbJYpRROszaCynZ4sm',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15579439802503812920,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261660423444190,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 13868338372379262632,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261660422446765,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.000102,
          'gen_ai.usage.input_tokens': 255,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3140344538168519874,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261661453817062,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 13868338372379262632,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261660428892877,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '1a1358ed-720b-4e77-ac64-b2ff24456319',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13868338372379262632,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 158036044823277914133966979954351425354,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261661468089533,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261658435676129,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].271123023533386293550074758061676882320
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 7.2e-05,
          'gen_ai.usage.input_tokens': 180,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2176289010087953496,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 271123023533386293550074758061676882320,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261667098684701,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14971643781780374989,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 271123023533386293550074758061676882320,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261666139144289,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00010839999999999999,
          'gen_ai.usage.input_tokens': 271,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3527572892722331359,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 271123023533386293550074758061676882320,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261668152000833,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14971643781780374989,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 271123023533386293550074758061676882320,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261667464983620,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.000118,
          'gen_ai.usage.input_tokens': 295,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4822037412170374258,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 271123023533386293550074758061676882320,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261669035811372,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 14971643781780374989,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 271123023533386293550074758061676882320,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261668175345940,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '6dbd3f14-5641-4750-ab22-6cee4c5c82bd',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14971643781780374989,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 271123023533386293550074758061676882320,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261669053212370,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261666132587567,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].258877251558286731950911174279945847177
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"content": "Search the web to answer", "role": "system"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00011439999999999999,
          'gen_ai.usage.input_tokens': 286,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15599793197242430480,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261673999249801,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10178558365742158677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261673296162906,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-05-26T08:14:34-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone":"America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8785436811919401602,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261674010911103,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 10178558365742158677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261674008748326,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.00014759999999999998,
          'gen_ai.usage.input_tokens': 369,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1427744168141841008,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261674737595513,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10178558365742158677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261674015811319,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text":"2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17984847670033620580,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261674744543272,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 10178558365742158677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261674744285809,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025. I have written this value to a file.',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.usage.input_cost': 0.0001572,
          'gen_ai.usage.input_tokens': 393,
          'gen_ai.usage.output_cost': 3.9999999999999996e-05,
          'gen_ai.usage.output_tokens': 25,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5621365697003590974,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261675746864392,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10178558365742158677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261674747848825,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': 'b5a87b2d-4829-416c-874c-cbbbc40ee270',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10178558365742158677,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 258877251558286731950911174279945847177,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261675762883225,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261673293352005,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].1547657674320570112615969327685415112
  dict({
    'final_output': 'The current year in the America/New_York timezone is 2025.',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer"}, {"role": "user", "content": "New task:\\nUse the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 7.48e-05,
          'gen_ai.usage.input_tokens': 187,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1385592032891138481,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261690564087211,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 9090267575601750421,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261689639271733,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-05-26T08:14:50-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"timezone": "America/New_York", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6126172514274114032,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261690583385057,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 9090267575601750421,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261690580953819,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.0001256,
          'gen_ai.usage.input_tokens': 314,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9636608843245430713,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261691276577180,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 9090267575601750421,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261690590100573,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.tool.args': '{"text": "2025", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3097404686226955205,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261691291023467,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 9090267575601750421,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261691290250065,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\":\\"The current year in the America/New_York timezone is 2025.\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.000158,
          'gen_ai.usage.input_tokens': 395,
          'gen_ai.usage.output_cost': 4.48e-05,
          'gen_ai.usage.output_tokens': 28,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 12922510650250619306,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261692390633071,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 9090267575601750421,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261691298318691,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'The current year in the America/New_York timezone is 2025.',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"answer": "The current year in the America/New_York timezone is 2025.", "sanitize_inputs_outputs": true}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6635247514927669870,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261692402218366,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 9090267575601750421,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261692402172858,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '44dad466-f4ca-4560-a7d6-148ce079bb1e',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9090267575601750421,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 1547657674320570112615969327685415112,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261692421408657,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261689638821552,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].53037677236949520372674895373402421314
  dict({
    'final_output': 'None',
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Search the web to answer"}, {"role": "user", "content": "Use the tools to find what year it is in the America/New_York timezone and write the value (single number) to a file"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\":\\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 7.52e-05,
          'gen_ai.usage.input_tokens': 188,
          'gen_ai.usage.output_cost': 2.88e-05,
          'gen_ai.usage.output_tokens': 18,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 11602106197264206200,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261697164630087,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10843920338075109604,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261696350069192,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-05-26T08:14:57-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None)] isError=False"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17323904605981131256,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261697185350433,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 10843920338075109604,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261697182446053,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\":\\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.00011159999999999999,
          'gen_ai.usage.input_tokens': 279,
          'gen_ai.usage.output_cost': 2.4e-05,
          'gen_ai.usage.output_tokens': 15,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15588241813654890177,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261697909829378,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10843920338075109604,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261697197714422,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5670327806826749372,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261697922578494,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 10843920338075109604,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261697922425970,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "task_complete", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'gpt-4.1-mini',
          'gen_ai.response.model': 'gpt-4.1-mini-2025-04-14',
          'gen_ai.usage.input_cost': 0.00012119999999999999,
          'gen_ai.usage.input_tokens': 303,
          'gen_ai.usage.output_cost': 1.6e-05,
          'gen_ai.usage.output_tokens': 10,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5295409470974120997,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261698830882530,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm gpt-4.1-mini',
        'parent': dict({
          'is_remote': False,
          'span_id': 10843920338075109604,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261697932998200,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.id': '64ac119e-c48e-4398-a742-da5f503d2195',
          'gen_ai.request.model': 'gpt-4.1-mini',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10843920338075109604,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 53037677236949520372674895373402421314,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1748261698844755701,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.33.1',
          }),
          'schema_url': '',
        }),
        'start_time': 1748261696347298446,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---

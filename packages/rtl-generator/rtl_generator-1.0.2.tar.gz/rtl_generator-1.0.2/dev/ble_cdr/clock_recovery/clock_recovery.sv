//! This file generated by [rtl-generator](https://github.com/burnettlab/rtl-generator.git), written by Brandon Hippe
//!
//! ## Generator Arguments
// #{(param_table)}
//!
//!|   Argument   | Value |
//!| :----------: | :---: |
//!| mf_clock_rec |  True |
//!    
// #{/(param_table)}

// Included Modules:
// #{(included_modules)}
// INCLUDED MODULES GO HERE
// #{/(included_modules)}

// #{(include_clock_recovery)}
module clock_recovery #(
    parameter int SAMPLE_RATE =  /* #{(samples_per_symbol)} */ 16  /* #{/(samples_per_symbol)} */
) (
    input logic clk,
    input logic en,
    input logic resetn,

    input logic mf_bit,

    output logic symbol_clk
);

  localparam int PIPELINE_STAGES = 1;

  logic [$clog2(SAMPLE_RATE-1):0] sample_counter;
  logic p_mf_bit;

  always_ff @(posedge clk or negedge resetn) begin
    if (~resetn) begin
      sample_counter <= 0;
      p_mf_bit <= 0;
    end else if (en) begin
      if ((mf_bit ^ p_mf_bit) || (sample_counter == SAMPLE_RATE - 1)) begin
        sample_counter <= 0;
      end else begin
        sample_counter <= sample_counter + 1;
      end

      p_mf_bit <= mf_bit;
    end
  end

  assign symbol_clk = (sample_counter == ((SAMPLE_RATE - 1) >> 1));

endmodule
// #{/(include_clock_recovery)}

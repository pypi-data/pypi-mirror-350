# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .environment import TmdbApiEnvironment
from .raw_client import AsyncRawTmdbApi, RawTmdbApi
from .types.account_favorite_movies_request_sort_by import AccountFavoriteMoviesRequestSortBy
from .types.account_favorite_movies_response import AccountFavoriteMoviesResponse
from .types.account_favorite_tv_request_sort_by import AccountFavoriteTvRequestSortBy
from .types.account_favorite_tv_response import AccountFavoriteTvResponse
from .types.account_lists_response import AccountListsResponse
from .types.account_movie_recommendations_response import AccountMovieRecommendationsResponse
from .types.account_movie_watchlist_request_sort_by import AccountMovieWatchlistRequestSortBy
from .types.account_movie_watchlist_response import AccountMovieWatchlistResponse
from .types.account_rated_movies_request_sort_by import AccountRatedMoviesRequestSortBy
from .types.account_rated_movies_response import AccountRatedMoviesResponse
from .types.account_rated_tv_request_sort_by import AccountRatedTvRequestSortBy
from .types.account_rated_tv_response import AccountRatedTvResponse
from .types.account_tv_recommendations_response import AccountTvRecommendationsResponse
from .types.account_tv_watchlist_request_sort_by import AccountTvWatchlistRequestSortBy
from .types.account_tv_watchlist_response import AccountTvWatchlistResponse
from .types.auth_create_access_token_response import AuthCreateAccessTokenResponse
from .types.auth_create_request_token_response import AuthCreateRequestTokenResponse
from .types.auth_logout_response import AuthLogoutResponse
from .types.list_add_items_response import ListAddItemsResponse
from .types.list_clear_response import ListClearResponse
from .types.list_create_response import ListCreateResponse
from .types.list_delete_response import ListDeleteResponse
from .types.list_details_response import ListDetailsResponse
from .types.list_item_status_request_media_type import ListItemStatusRequestMediaType
from .types.list_item_status_response import ListItemStatusResponse
from .types.list_remove_items_response import ListRemoveItemsResponse
from .types.list_update_items_response import ListUpdateItemsResponse
from .types.list_update_response import ListUpdateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TmdbApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : TmdbApiEnvironment
        The environment to use for requests from the client. from .environment import TmdbApiEnvironment



        Defaults to TmdbApiEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from tmdb import TmdbApi

    client = TmdbApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: TmdbApiEnvironment = TmdbApiEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawTmdbApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawTmdbApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTmdbApi
        """
        return self._raw_client

    def auth_create_request_token(
        self, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthCreateRequestTokenResponse:
        """


        Parameters
        ----------
        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthCreateRequestTokenResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.auth_create_request_token(
            raw_body="RAW_BODY",
        )
        """
        _response = self._raw_client.auth_create_request_token(raw_body=raw_body, request_options=request_options)
        return _response.data

    def auth_create_access_token(
        self, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthCreateAccessTokenResponse:
        """


        Parameters
        ----------
        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthCreateAccessTokenResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.auth_create_access_token(
            raw_body="RAW_BODY",
        )
        """
        _response = self._raw_client.auth_create_access_token(raw_body=raw_body, request_options=request_options)
        return _response.data

    def auth_logout(
        self, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthLogoutResponse:
        """
        Log out of a session.

        Parameters
        ----------
        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthLogoutResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.auth_logout(
            raw_body="RAW_BODY",
        )
        """
        _response = self._raw_client.auth_logout(raw_body=raw_body, request_options=request_options)
        return _response.data

    def list_details(
        self,
        list_id: int,
        *,
        language: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDetailsResponse:
        """
        Retrieve a list by id.

        Parameters
        ----------
        list_id : int

        language : typing.Optional[str]

        page : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDetailsResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_details(
            list_id=1,
        )
        """
        _response = self._raw_client.list_details(
            list_id, language=language, page=page, request_options=request_options
        )
        return _response.data

    def list_update(
        self, list_id: int, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListUpdateResponse:
        """
        Update the details of a list.

        Parameters
        ----------
        list_id : int

        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUpdateResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_update(
            list_id=1,
            raw_body="RAW_BODY",
        )
        """
        _response = self._raw_client.list_update(list_id, raw_body=raw_body, request_options=request_options)
        return _response.data

    def list_create(
        self, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListCreateResponse:
        """
        Create a new list.

        Parameters
        ----------
        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListCreateResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_create(
            raw_body="RAW_BODY",
        )
        """
        _response = self._raw_client.list_create(raw_body=raw_body, request_options=request_options)
        return _response.data

    def list_clear(self, list_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> ListClearResponse:
        """
        Clear all of the items on a list.

        Parameters
        ----------
        list_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListClearResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_clear(
            list_id=1,
        )
        """
        _response = self._raw_client.list_clear(list_id, request_options=request_options)
        return _response.data

    def list_delete(
        self, list_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListDeleteResponse:
        """
        Delete a list.

        Parameters
        ----------
        list_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDeleteResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_delete(
            list_id=1,
        )
        """
        _response = self._raw_client.list_delete(list_id, request_options=request_options)
        return _response.data

    def list_add_items(
        self, list_id: int, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListAddItemsResponse:
        """
        Add items to a list.

        Parameters
        ----------
        list_id : int

        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAddItemsResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_add_items(
            list_id=1,
            raw_body="RAW_BODY",
        )
        """
        _response = self._raw_client.list_add_items(list_id, raw_body=raw_body, request_options=request_options)
        return _response.data

    def list_update_items(
        self, list_id: str, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListUpdateItemsResponse:
        """
        Update an individual item on a list

        Parameters
        ----------
        list_id : str

        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUpdateItemsResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_update_items(
            list_id="list_id",
            raw_body="RAW_BODY",
        )
        """
        _response = self._raw_client.list_update_items(list_id, raw_body=raw_body, request_options=request_options)
        return _response.data

    def list_remove_items(
        self, list_id: int, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListRemoveItemsResponse:
        """
        Remove items from a list

        Parameters
        ----------
        list_id : int

        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListRemoveItemsResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_remove_items(
            list_id=1,
            raw_body="RAW_BODY",
        )
        """
        _response = self._raw_client.list_remove_items(list_id, raw_body=raw_body, request_options=request_options)
        return _response.data

    def list_item_status(
        self,
        list_id: int,
        *,
        media_id: int,
        media_type: ListItemStatusRequestMediaType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListItemStatusResponse:
        """
        Check if an item is on a list.

        Parameters
        ----------
        list_id : int

        media_id : int

        media_type : ListItemStatusRequestMediaType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListItemStatusResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.list_item_status(
            list_id=1,
            media_id=1,
            media_type="",
        )
        """
        _response = self._raw_client.list_item_status(
            list_id, media_id=media_id, media_type=media_type, request_options=request_options
        )
        return _response.data

    def account_lists(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountListsResponse:
        """
        Get the custom lists that a user has created.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountListsResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_lists(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_lists(account_object_id, page=page, request_options=request_options)
        return _response.data

    def account_favorite_movies(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountFavoriteMoviesRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountFavoriteMoviesResponse:
        """
        Get a users list of favourite movies.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountFavoriteMoviesRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountFavoriteMoviesResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_favorite_movies(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_favorite_movies(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    def account_favorite_tv(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountFavoriteTvRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountFavoriteTvResponse:
        """
        Get a users list of favourite TV shows.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountFavoriteTvRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountFavoriteTvResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_favorite_tv(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_favorite_tv(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    def account_tv_recommendations(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountTvRecommendationsResponse:
        """
        Get a users list of recommended TV shows.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountTvRecommendationsResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_tv_recommendations(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_tv_recommendations(
            account_object_id, page=page, language=language, request_options=request_options
        )
        return _response.data

    def account_movie_recommendations(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountMovieRecommendationsResponse:
        """
        Get a users list of recommended movies.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountMovieRecommendationsResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_movie_recommendations(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_movie_recommendations(
            account_object_id, page=page, language=language, request_options=request_options
        )
        return _response.data

    def account_movie_watchlist(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountMovieWatchlistRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountMovieWatchlistResponse:
        """
        Get a users movie watchlist.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountMovieWatchlistRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountMovieWatchlistResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_movie_watchlist(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_movie_watchlist(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    def account_tv_watchlist(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountTvWatchlistRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountTvWatchlistResponse:
        """
        Get a users TV watchlist.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountTvWatchlistRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountTvWatchlistResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_tv_watchlist(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_tv_watchlist(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    def account_rated_movies(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountRatedMoviesRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountRatedMoviesResponse:
        """
        Get a users rated movies.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountRatedMoviesRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountRatedMoviesResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_rated_movies(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_rated_movies(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    def account_rated_tv(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountRatedTvRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountRatedTvResponse:
        """
        Get a users rated TV shows.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountRatedTvRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountRatedTvResponse
            200

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.account_rated_tv(
            account_object_id="account_object_id",
        )
        """
        _response = self._raw_client.account_rated_tv(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    def getting_started(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """


        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from tmdb import TmdbApi

        client = TmdbApi(
            api_key="YOUR_API_KEY",
        )
        client.getting_started()
        """
        _response = self._raw_client.getting_started(request_options=request_options)
        return _response.data


class AsyncTmdbApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : TmdbApiEnvironment
        The environment to use for requests from the client. from .environment import TmdbApiEnvironment



        Defaults to TmdbApiEnvironment.DEFAULT



    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from tmdb import AsyncTmdbApi

    client = AsyncTmdbApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: TmdbApiEnvironment = TmdbApiEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawTmdbApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTmdbApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTmdbApi
        """
        return self._raw_client

    async def auth_create_request_token(
        self, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthCreateRequestTokenResponse:
        """


        Parameters
        ----------
        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthCreateRequestTokenResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.auth_create_request_token(
                raw_body="RAW_BODY",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.auth_create_request_token(raw_body=raw_body, request_options=request_options)
        return _response.data

    async def auth_create_access_token(
        self, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthCreateAccessTokenResponse:
        """


        Parameters
        ----------
        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthCreateAccessTokenResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.auth_create_access_token(
                raw_body="RAW_BODY",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.auth_create_access_token(raw_body=raw_body, request_options=request_options)
        return _response.data

    async def auth_logout(
        self, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AuthLogoutResponse:
        """
        Log out of a session.

        Parameters
        ----------
        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AuthLogoutResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.auth_logout(
                raw_body="RAW_BODY",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.auth_logout(raw_body=raw_body, request_options=request_options)
        return _response.data

    async def list_details(
        self,
        list_id: int,
        *,
        language: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDetailsResponse:
        """
        Retrieve a list by id.

        Parameters
        ----------
        list_id : int

        language : typing.Optional[str]

        page : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDetailsResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_details(
                list_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_details(
            list_id, language=language, page=page, request_options=request_options
        )
        return _response.data

    async def list_update(
        self, list_id: int, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListUpdateResponse:
        """
        Update the details of a list.

        Parameters
        ----------
        list_id : int

        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUpdateResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_update(
                list_id=1,
                raw_body="RAW_BODY",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_update(list_id, raw_body=raw_body, request_options=request_options)
        return _response.data

    async def list_create(
        self, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListCreateResponse:
        """
        Create a new list.

        Parameters
        ----------
        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListCreateResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_create(
                raw_body="RAW_BODY",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_create(raw_body=raw_body, request_options=request_options)
        return _response.data

    async def list_clear(
        self, list_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListClearResponse:
        """
        Clear all of the items on a list.

        Parameters
        ----------
        list_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListClearResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_clear(
                list_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_clear(list_id, request_options=request_options)
        return _response.data

    async def list_delete(
        self, list_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListDeleteResponse:
        """
        Delete a list.

        Parameters
        ----------
        list_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDeleteResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_delete(
                list_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_delete(list_id, request_options=request_options)
        return _response.data

    async def list_add_items(
        self, list_id: int, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListAddItemsResponse:
        """
        Add items to a list.

        Parameters
        ----------
        list_id : int

        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAddItemsResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_add_items(
                list_id=1,
                raw_body="RAW_BODY",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_add_items(list_id, raw_body=raw_body, request_options=request_options)
        return _response.data

    async def list_update_items(
        self, list_id: str, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListUpdateItemsResponse:
        """
        Update an individual item on a list

        Parameters
        ----------
        list_id : str

        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUpdateItemsResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_update_items(
                list_id="list_id",
                raw_body="RAW_BODY",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_update_items(
            list_id, raw_body=raw_body, request_options=request_options
        )
        return _response.data

    async def list_remove_items(
        self, list_id: int, *, raw_body: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ListRemoveItemsResponse:
        """
        Remove items from a list

        Parameters
        ----------
        list_id : int

        raw_body : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListRemoveItemsResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_remove_items(
                list_id=1,
                raw_body="RAW_BODY",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_remove_items(
            list_id, raw_body=raw_body, request_options=request_options
        )
        return _response.data

    async def list_item_status(
        self,
        list_id: int,
        *,
        media_id: int,
        media_type: ListItemStatusRequestMediaType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListItemStatusResponse:
        """
        Check if an item is on a list.

        Parameters
        ----------
        list_id : int

        media_id : int

        media_type : ListItemStatusRequestMediaType

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListItemStatusResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_item_status(
                list_id=1,
                media_id=1,
                media_type="",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_item_status(
            list_id, media_id=media_id, media_type=media_type, request_options=request_options
        )
        return _response.data

    async def account_lists(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountListsResponse:
        """
        Get the custom lists that a user has created.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountListsResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_lists(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_lists(account_object_id, page=page, request_options=request_options)
        return _response.data

    async def account_favorite_movies(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountFavoriteMoviesRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountFavoriteMoviesResponse:
        """
        Get a users list of favourite movies.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountFavoriteMoviesRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountFavoriteMoviesResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_favorite_movies(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_favorite_movies(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    async def account_favorite_tv(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountFavoriteTvRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountFavoriteTvResponse:
        """
        Get a users list of favourite TV shows.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountFavoriteTvRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountFavoriteTvResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_favorite_tv(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_favorite_tv(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    async def account_tv_recommendations(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountTvRecommendationsResponse:
        """
        Get a users list of recommended TV shows.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountTvRecommendationsResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_tv_recommendations(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_tv_recommendations(
            account_object_id, page=page, language=language, request_options=request_options
        )
        return _response.data

    async def account_movie_recommendations(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountMovieRecommendationsResponse:
        """
        Get a users list of recommended movies.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountMovieRecommendationsResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_movie_recommendations(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_movie_recommendations(
            account_object_id, page=page, language=language, request_options=request_options
        )
        return _response.data

    async def account_movie_watchlist(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountMovieWatchlistRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountMovieWatchlistResponse:
        """
        Get a users movie watchlist.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountMovieWatchlistRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountMovieWatchlistResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_movie_watchlist(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_movie_watchlist(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    async def account_tv_watchlist(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountTvWatchlistRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountTvWatchlistResponse:
        """
        Get a users TV watchlist.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountTvWatchlistRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountTvWatchlistResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_tv_watchlist(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_tv_watchlist(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    async def account_rated_movies(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountRatedMoviesRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountRatedMoviesResponse:
        """
        Get a users rated movies.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountRatedMoviesRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountRatedMoviesResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_rated_movies(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_rated_movies(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    async def account_rated_tv(
        self,
        account_object_id: str,
        *,
        page: typing.Optional[int] = None,
        language: typing.Optional[str] = None,
        sort_by: typing.Optional[AccountRatedTvRequestSortBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountRatedTvResponse:
        """
        Get a users rated TV shows.

        Parameters
        ----------
        account_object_id : str

        page : typing.Optional[int]

        language : typing.Optional[str]

        sort_by : typing.Optional[AccountRatedTvRequestSortBy]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountRatedTvResponse
            200

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.account_rated_tv(
                account_object_id="account_object_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.account_rated_tv(
            account_object_id, page=page, language=language, sort_by=sort_by, request_options=request_options
        )
        return _response.data

    async def getting_started(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """


        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from tmdb import AsyncTmdbApi

        client = AsyncTmdbApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.getting_started()


        asyncio.run(main())
        """
        _response = await self._raw_client.getting_started(request_options=request_options)
        return _response.data


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: TmdbApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")

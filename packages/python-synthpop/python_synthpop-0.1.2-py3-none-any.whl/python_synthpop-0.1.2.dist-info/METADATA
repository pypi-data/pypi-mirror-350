Metadata-Version: 2.4
Name: python-synthpop
Version: 0.1.2
Summary: Python implementation of the R package synthpop for generating synthetic data
Home-page: https://github.com/algorithm-audit/python-synthpop
Author: Algorithm Audit
Author-email: info@algorithmaudit.eu
License: EUROPEAN UNION PUBLIC LICENCE v. 1.2 EUPL © the European Union 2007, 2016
        
        This European Union Public Licence (the ‘EUPL’) applies to the Work (as defined below) which is provided under the terms of this Licence. Any use of the Work, other than as authorised under this Licence is prohibited (to the extent such use is covered by a right of the copyright holder of the Work). The Work is provided under the terms of this Licence when the Licensor (as defined below) has placed the following notice immediately following the copyright notice for the Work: Licensed under the EUPL or has expressed by any other means his willingness to license under the EUPL.
        
        1.Definitions In this Licence, the following terms have the following meaning: — ‘The Licence’:this Licence. — ‘The Original Work’:the work or software distributed or communicated by the Licensor under this Licence, available as Source Code and also as Executable Code as the case may be. — ‘Derivative Works’:the works or software that could be created by the Licensee, based upon the Original Work or modifications thereof. This Licence does not define the extent of modification or dependence on the Original Work required in order to classify a work as a Derivative Work; this extent is determined by copyright law applicable in the country mentioned in Article 15. — ‘The Work’:the Original Work or its Derivative Works. — ‘The Source Code’:the human-readable form of the Work which is the most convenient for people to study and modify. — ‘The Executable Code’:any code which has generally been compiled and which is meant to be interpreted by a computer as a program. — ‘The Licensor’:the natural or legal person that distributes or communicates the Work under the Licence. — ‘Contributor(s)’:any natural or legal person who modifies the Work under the Licence, or otherwise contributes to the creation of a Derivative Work. — ‘The Licensee’ or ‘You’:any natural or legal person who makes any usage of the Work under the terms of the Licence. — ‘Distribution’ or ‘Communication’:any act of selling, giving, lending, renting, distributing, communicating, transmitting, or otherwise making available, online or offline, copies of the Work or providing access to its essential functionalities at the disposal of any other natural or legal person.
        
        2.Scope of the rights granted by the Licence The Licensor hereby grants You a worldwide, royalty-free, non-exclusive, sublicensable licence to do the following, for the duration of copyright vested in the Original Work: — use the Work in any circumstance and for all usage, — reproduce the Work, — modify the Work, and make Derivative Works based upon the Work, — communicate to the public, including the right to make available or display the Work or copies thereof to the public and perform publicly, as the case may be, the Work, — distribute the Work or copies thereof, — lend and rent the Work or copies thereof, — sublicense rights in the Work or copies thereof. Those rights can be exercised on any media, supports and formats, whether now known or later invented, as far as the applicable law permits so. In the countries where moral rights apply, the Licensor waives his right to exercise his moral right to the extent allowed by law in order to make effective the licence of the economic rights here above listed. The Licensor grants to the Licensee royalty-free, non-exclusive usage rights to any patents held by the Licensor, to the extent necessary to make use of the rights granted on the Work under this Licence.
        
        3.Communication of the Source Code The Licensor may provide the Work either in its Source Code form, or as Executable Code. If the Work is provided as Executable Code, the Licensor provides in addition a machine-readable copy of the Source Code of the Work along with each copy of the Work that the Licensor distributes or indicates, in a notice following the copyright notice attached to the Work, a repository where the Source Code is easily and freely accessible for as long as the Licensor continues to distribute or communicate the Work.
        
        4.Limitations on copyright Nothing in this Licence is intended to deprive the Licensee of the benefits from any exception or limitation to the exclusive rights of the rights owners in the Work, of the exhaustion of those rights or of other applicable limitations thereto.
        
        5.Obligations of the Licensee The grant of the rights mentioned above is subject to some restrictions and obligations imposed on the Licensee. Those obligations are the following:
        
        Attribution right: The Licensee shall keep intact all copyright, patent or trademarks notices and all notices that refer to the Licence and to the disclaimer of warranties. The Licensee must include a copy of such notices and a copy of the Licence with every copy of the Work he/she distributes or communicates. The Licensee must cause any Derivative Work to carry prominent notices stating that the Work has been modified and the date of modification.
        
        Copyleft clause: If the Licensee distributes or communicates copies of the Original Works or Derivative Works, this Distribution or Communication will be done under the terms of this Licence or of a later version of this Licence unless the Original Work is expressly distributed only under this version of the Licence — for example by communicating ‘EUPL v. 1.2 only’. The Licensee (becoming Licensor) cannot offer or impose any additional terms or conditions on the Work or Derivative Work that alter or restrict the terms of the Licence.
        
        Compatibility clause: If the Licensee Distributes or Communicates Derivative Works or copies thereof based upon both the Work and another work licensed under a Compatible Licence, this Distribution or Communication can be done under the terms of this Compatible Licence. For the sake of this clause, ‘Compatible Licence’ refers to the licences listed in the appendix attached to this Licence. Should the Licensee's obligations under the Compatible Licence conflict with his/her obligations under this Licence, the obligations of the Compatible Licence shall prevail.
        
        Provision of Source Code: When distributing or communicating copies of the Work, the Licensee will provide a machine-readable copy of the Source Code or indicate a repository where this Source will be easily and freely available for as long as the Licensee continues to distribute or communicate the Work. Legal Protection: This Licence does not grant permission to use the trade names, trademarks, service marks, or names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the copyright notice.
        
        6.Chain of Authorship The original Licensor warrants that the copyright in the Original Work granted hereunder is owned by him/her or licensed to him/her and that he/she has the power and authority to grant the Licence. Each Contributor warrants that the copyright in the modifications he/she brings to the Work are owned by him/her or licensed to him/her and that he/she has the power and authority to grant the Licence. Each time You accept the Licence, the original Licensor and subsequent Contributors grant You a licence to their contributions to the Work, under the terms of this Licence.
        
        7.Disclaimer of Warranty The Work is a work in progress, which is continuously improved by numerous Contributors. It is not a finished work and may therefore contain defects or ‘bugs’ inherent to this type of development. For the above reason, the Work is provided under the Licence on an ‘as is’ basis and without warranties of any kind concerning the Work, including without limitation merchantability, fitness for a particular purpose, absence of defects or errors, accuracy, non-infringement of intellectual property rights other than copyright as stated in Article 6 of this Licence. This disclaimer of warranty is an essential part of the Licence and a condition for the grant of any rights to the Work.
        
        8.Disclaimer of Liability Except in the cases of wilful misconduct or damages directly caused to natural persons, the Licensor will in no event be liable for any direct or indirect, material or moral, damages of any kind, arising out of the Licence or of the use of the Work, including without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, loss of data or any commercial damage, even if the Licensor has been advised of the possibility of such damage. However, the Licensor will be liable under statutory product liability laws as far such laws apply to the Work.
        
        9.Additional agreements While distributing the Work, You may choose to conclude an additional agreement, defining obligations or services consistent with this Licence. However, if accepting obligations, You may act only on your own behalf and on your sole responsibility, not on behalf of the original Licensor or any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against such Contributor by the fact You have accepted any warranty or additional liability.
        
        10.Acceptance of the Licence The provisions of this Licence can be accepted by clicking on an icon ‘I agree’ placed under the bottom of a window displaying the text of this Licence or by affirming consent in any other similar way, in accordance with the rules of applicable law. Clicking on that icon indicates your clear and irrevocable acceptance of this Licence and all of its terms and conditions. Similarly, you irrevocably accept this Licence and all of its terms and conditions by exercising any rights granted to You by Article 2 of this Licence, such as the use of the Work, the creation by You of a Derivative Work or the Distribution or Communication by You of the Work or copies thereof.
        
        11.Information to the public In case of any Distribution or Communication of the Work by means of electronic communication by You (for example, by offering to download the Work from a remote location) the distribution channel or media (for example, a website) must at least provide to the public the information requested by the applicable law regarding the Licensor, the Licence and the way it may be accessible, concluded, stored and reproduced by the Licensee.
        
        12.Termination of the Licence The Licence and the rights granted hereunder will terminate automatically upon any breach by the Licensee of the terms of the Licence. Such a termination will not terminate the licences of any person who has received the Work from the Licensee under the Licence, provided such persons remain in full compliance with the Licence.
        
        13.Miscellaneous Without prejudice of Article 9 above, the Licence represents the complete agreement between the Parties as to the Work. If any provision of the Licence is invalid or unenforceable under applicable law, this will not affect the validity or enforceability of the Licence as a whole. Such provision will be construed or reformed so as necessary to make it valid and enforceable. The European Commission may publish other linguistic versions or new versions of this Licence or updated versions of the Appendix, so far this is required and reasonable, without reducing the scope of the rights granted by the Licence. New versions of the Licence will be published with a unique version number. All linguistic versions of this Licence, approved by the European Commission, have identical value. Parties can take advantage of the linguistic version of their choice.
        
        14.Jurisdiction Without prejudice to specific agreement between parties, — any litigation resulting from the interpretation of this License, arising between the European Union institutions, bodies, offices or agencies, as a Licensor, and any Licensee, will be subject to the jurisdiction of the Court of Justice of the European Union, as laid down in article 272 of the Treaty on the Functioning of the European Union, — any litigation arising between other parties and resulting from the interpretation of this License, will be subject to the exclusive jurisdiction of the competent court where the Licensor resides or conducts its primary business.
        
        15.Applicable Law Without prejudice to specific agreement between parties, — this Licence shall be governed by the law of the European Union Member State where the Licensor has his seat, resides or has his registered office, — this licence shall be governed by Belgian law if the Licensor has no seat, residence or registered office inside a European Union Member State.
        
        Appendix
        
        ‘Compatible Licences’ according to Article 5 EUPL are: — GNU General Public License (GPL) v. 2, v. 3 — GNU Affero General Public License (AGPL) v. 3 — Open Software License (OSL) v. 2.1, v. 3.0 — Eclipse Public License (EPL) v. 1.0 — CeCILL v. 2.0, v. 2.1 — Mozilla Public Licence (MPL) v. 2 — GNU Lesser General Public Licence (LGPL) v. 2.1, v. 3 — Creative Commons Attribution-ShareAlike v. 3.0 Unported (CC BY-SA 3.0) for works other than software — European Union Public Licence (EUPL) v. 1.1, v. 1.2 — Québec Free and Open-Source Licence — Reciprocity (LiLiQ-R) or Strong Reciprocity (LiLiQ-R+).
        
        The European Commission may update this Appendix to later versions of the above licences without producing a new version of the EUPL, as long as they provide the rights granted in Article 2 of this Licence and protect the covered Source Code from exclusive appropriation. All other changes or additions to this Appendix require the production of a new EUPL version.
        
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: copulas>=0.1.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Dynamic: author-email
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

![image](https://raw.githubusercontent.com/NGO-Algorithm-Audit/python-synthpop/b09d3fe93ac21406199810e39e2a844dc1faefd0/images/Header.png)

# python-synthpop

```python-synthpop``` is an open-source library for synthetic data generation (SDG). The library includes robust implementations of Classification and Regression Trees (CART) and Gaussian Copula (GC) synthesizers, equipping users with an open-source python library to generate high-quality, privacy-preserving synthetic data. This library is a Python implementation of the CART method used in R package [synthpop](https://cran.r-project.org/web/packages/synthpop/index.html).

Synthetic data is generated in six steps:

1. **Detect data types**: detect numerical, categorial and/or datetime data;
2. **Process missing data**: process missing data: remove or impute missing values;
3. **Preprocessing**: transforms data into numerical format;
4. **Synthesizer**: fit CART or GC;
5. **Postprocessing**: map synthetic data back to its original structure and domain;
6. **Evaluation metrics**: determine quality of synthetic data, e.g., similarity, utility and privacy metrics. 

☁️ [Web app](https://algorithmaudit.eu/technical-tools/sdg/#web-app) – a demo of synthetic data generation using `python-synthpop` in the browser using [WebAssembly](https://github.com/NGO-Algorithm-Audit/local-first-web-tool).

# Installation

#### Pip

```
pip install python-synthpop
```

#### Source

```
git clone https://github.com/NGO-Algorithm-Audit/python-synthpop.git
cd python-synthpop
pip install -r requirements.txt
python setup.py install
```

# Examples

#### Social Diagnosis 2011 dataset
We will use the [Social Diagnosis 2011](https://search.r-project.org/CRAN/refmans/synthpop/html/SD2011.html) dataset as an example, which is a comprehensive survey conducted in Poland. This dataset includes a wide range of variables related to the social and economic conditions of Polish households and individuals. It covers aspects such as income, employment, education, health, and overall quality of life. 

```
In [1]:  import pandas as pd

In [2]:  df = pd.read_csv('../datasets/socialdiagnosis/data/SocialDiagnosis2011.csv', sep=';')
         df.head()
Out[2]:
	sex	age	marital	income	ls	smoke
0	FEMALE	57	MARRIED	800.0	PLEASED	NO
1	MALE	20	SINGLE	350.0	MOSTLY SATISFIED	NO
2	FEMALE	18	SINGLE	NaN	PLEASED	NO
3	FEMALE	78	WIDOWED	900.0	MIXED	NO
4	FEMALE	54	MARRIED	1500.0	MOSTLY SATISFIED	YES

```

### python-synthpop

Using default parameters the six steps are applied on the Social Diagnosis example to generate synthetic data. See also the corresponding [notebook](./example_notebooks/00_readme.ipynb).

```
In [1]:     from synthpop import MissingDataHandler, DataProcessor, CARTMethod

In [2]:     # 1. Initiate metadata
            md_handler = MissingDataHandler()

            # 1.1 Get data types
            metadata= md_handler.get_column_dtypes(df)
            print("Column Data Types:", metadata)

            Column Data Types: {'sex': 'categorical', 'age': 'numerical', 'marital': 'categorical', 'income': 'numerical', 'ls': 'categorical', 'smoke': 'categorical'}

In [3]:     # 2. Process missing data
            print("Missing data:")
            print(df.isnull().sum())

            Missing data:
            sex          0
            age          0
            marital      9
            income     683
            ls           8
            smoke       10
            dtype: int64

In [4]:     # 2.1 Detect type of missingness
            missingness_dict = md_handler.detect_missingness(df)
            print("Detected missingness type:", missingness_dict)

            Detected missingness type: {'marital': 'MAR', 'income': 'MAR', 'ls': 'MAR', 'smoke': 'MAR'}


In [5]:     # 2.2 Impute missing values
            real_df = md_handler.apply_imputation(df, missingness_dict)

            print("Missing data:")
            print(real_df.isnull().sum())

            Missing data:
            sex        0
            age        0
            marital    0
            income     0
            ls         0
            smoke      0
            dtype: int64


In [6]:     # 3. Preprocessing: Instantiate the DataProcessor with column_dtypes
            processor = DataProcessor(metadata)

            # 3.1 Preprocess the data: transforms raw data into a numerical format
            processed_data = processor.preprocess(real_df)
            print("Processed data:")
            display(processed_data.head())

            Processed data:
            sex	age	marital	income	ls	smoke
            0	0	0.503625	3	-0.517232	4	0
            1	1	-1.495187	4	-0.898113	3	0
            2	0	-1.603231	4	0.000000	4	0
            3	0	1.638086	5	-0.432591	1	0
            4	0	0.341559	3	0.075251	3	1


In [7]:     # 4. Fit the CART method
            cart = CARTMethod(metadata, smoothing=True, proper=True, minibucket=5, random_state=42)
            cart.fit(processed_data)

In [8]:     # 4.1 Preview generated synthetic data
            synthetic_processed = cart.sample(100)
            print("Synthetic processed data:")
            display(synthetic_processed.head())

            Synthetic processed data:
            sex	age	marital	income	ls	smoke
            0	1	-1.087360	3	-1.201126	4	0
            1	1	-0.882289	3	1.182255	4	0
            2	0	1.449201	5	-0.255936	2	0
            3	0	0.890598	3	0.220739	4	1
            4	0	0.313502	3	1.395039	4	0

In [9]:     # 5. Postprocessing: back to the original format and preview of data
            synthetic_df = processor.postprocess(synthetic_processed)
            print("Synthetic data in original format:")
            display(synthetic_df.head())

            Synthetic data in original format:
            sex	age	marital	income	ls	smoke
            0	FEMALE	30.377064	SINGLE	-8.000000	MOSTLY DISSATISFIED	NO
            1	MALE	54.823585	MARRIED	1861.809802	PLEASED	YES
            2	FEMALE	78.641244	MARRIED	771.239134	MOSTLY DISSATISFIED	NO
            3	MALE	53.458122	MARRIED	1758.942347	PLEASED	NO
            4	FEMALE	60.354551	SINGLE	1024.351794	PLEASED	NO

In [10]:    from synthpop.metrics import (
                MetricsReport,
                EfficacyMetrics,
                DisclosureProtection
            )

In [11]:    # 6. Evaluate the synthetic data

            # 6.1 Diagnostic report
            report = MetricsReport(real_df, synthetic_df, metadata)
            report_df = report.generate_report()
            print("=== Diagnostic Report ===")
            display(report_df)

            	column	type	missing_value_similarity	range_coverage	boundary_adherence	ks_complement	tv_complement	statistic_similarity	category_coverage	category_adherence
                0	sex	categorical	1.0	N/A	N/A	N/A	0.9764	N/A	1.0	1.0
                1	age	numerical	1.0	0.94757	1.0	0.9142	N/A	0.962239	N/A	N/A
                2	marital	categorical	1.0	N/A	N/A	N/A	0.967	N/A	0.666667	1.0
                3	income	numerical	1.0	0.408926	1.0	0.9056	N/A	0.948719	N/A	N/A
                4	ls	categorical	1.0	N/A	N/A	N/A	0.9224	N/A	0.857143	1.0
                5	smoke	categorical	1.0	N/A	N/A	N/A	0.9754	N/A	1.0	1.0

In [12]:    # 6.2 Efficacy metrics

            # 6.2.1 Regression
            reg_efficacy = EfficacyMetrics(task='regression', target_column="income")
            reg_metrics = reg_efficacy.evaluate(real_df, synthetic_df)
            print("=== Regression Efficacy Metrics ===")
            print(reg_metrics)

            === Regression Efficacy Metrics ===
            {'mse': 1669726.6979087007, 'mae': 904.2202005090558, 'r2': -0.19619130295207743}

In [13]:    # 6.2.2 Classification
            clf_efficacy = EfficacyMetrics(task='classification', target_column="smoke")
            clf_metrics = clf_efficacy.evaluate(real_df, synthetic_df)
            print("\n=== Classification Efficacy Metrics ===")
            print(clf_metrics)

            === Classification Efficacy Metrics ===
            {'accuracy': 0.6058, 'f1_score': 0.6184739077074358}

In [14]:    # 6.3 Privacy
            dp = DisclosureProtection(real_df, synthetic_df)
            dp_score = dp.score()
            dp_report = dp.report()

            print("\n=== Disclosure Protection ===")
            print(f"Score: {dp_score:.3f}")
            print("Detailed Report:", dp_report)

            === Disclosure Protection ===
            Score: 1.000
            Detailed Report: {'threshold': 0.0, 'risk_rate': 0.0, 'disclosure_protection_score': 1.0}
```

Metadata-Version: 2.4
Name: dashgen
Version: 0.1.0
Summary: Gere dashboards visuais como imagens usando HTML/CSS e Playwright.
Home-page: https://github.com/77-Indicadores/dashgen
Author: Vinicius Moreira
Author-email: vinicius@77indicadores.com.br
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: playwright
Requires-Dist: jinja2
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary



# Dashgen

ðŸ“Š Gere **dashboards visuais como imagens (PNG)** diretamente do Python com HTML, CSS e Chart.js.

---

## âœ¨ O que Ã©?

`dashgen` Ã© um micro-framework que permite montar dashboards com:

- âœ… **Cards com indicadores e progresso**
- âœ… **Tabelas com dados estruturados**
- âœ… **GrÃ¡ficos de barra e linha com Chart.js**
- âœ… **Sistema de layout com `Row()` e `Column()`**
- âœ… **Temas personalizados com variÃ¡veis CSS**
- âœ… **ExportaÃ§Ã£o como imagem via Playwright**

---

## ðŸš€ InstalaÃ§Ã£o

```bash
pip install dashgen
playwright install
````

---

## ðŸ§ª Exemplo RÃ¡pido

```python
from dashgen import Dashboard
from dashgen.core.layout import Row, Column

db = Dashboard(
    title="RelatÃ³rio de Vendas",
    logo_path="logo.png",
    size=(1080, 1080),
    theme={
        "primary": "#005f73",
        "accent": "#94d2bd",
        "bg": "#fefae0",
        "text": "#001219"
    }
)

# Cards
db.add(Row(
    Column(6).add_card("Receita Acumulada", 8200000, 10000000),
    Column(6).add_card("Unidades Vendidas", 320, 400)
))

# Tabela + GrÃ¡fico
empreendimentos = [
    {"Nome": "Projeto A", "Meta": "R$ 2M", "Realizado": "R$ 1.6M", "VariaÃ§Ã£o": "-20%"},
    {"Nome": "Projeto B", "Meta": "R$ 3M", "Realizado": "R$ 3.1M", "VariaÃ§Ã£o": "+3%"},
]
grafico_barras = [
    {"label": "Jan", "value": 120},
    {"label": "Fev", "value": 135},
    {"label": "Mar", "value": 160},
]
db.add(Row(
    Column(6).add_table("Receita por Empreendimento", empreendimentos, ["Nome", "Meta", "Realizado", "VariaÃ§Ã£o"]),
    Column(6).add_chart("bar", "Vendas Mensais", grafico_barras)
))

# GrÃ¡fico de linha
grafico_linha = [
    {"label": "Jan", "value": 1200000},
    {"label": "Fev", "value": 1450000},
    {"label": "Mar", "value": 1600000},
]
db.add(Row(
    Column(12).add_chart("line", "Receita Total (R$)", grafico_linha)
))

# Exportar imagem
db.generate("output_dashboard.png")
```

---

## ðŸ§± Componentes disponÃ­veis

### âœ… `Dashboard`

Classe principal que coordena a montagem e renderizaÃ§Ã£o da imagem.

### âœ… `Row()` e `Column(width)`

Sistema de layout baseado em grid de 12 colunas.

```python
Row(Column(6), Column(6))  # duas colunas lado a lado
Row(Column(12))            # elemento ocupando 100%
```

### âœ… `add_card(title, value, target)`

Componente com barra de progresso e KPI.

### âœ… `add_table(title, data, headers)`

Tabela com cabeÃ§alho fixo e linhas formatadas.

### âœ… `add_chart(chart_type, title, data)`

Suporta:

* `"bar"`: grÃ¡fico de barras
* `"line"`: grÃ¡fico de linhas

---

## ðŸŽ¨ Temas Personalizados

Via argumento `theme={...}` no `Dashboard()`:

| Chave     | VariÃ¡vel CSS | Exemplo   |
| --------- | ------------ | --------- |
| `primary` | `--primary`  | `#005f73` |
| `accent`  | `--accent`   | `#94d2bd` |
| `bg`      | `--bg`       | `#fefae0` |
| `text`    | `--text`     | `#001219` |

---

## ðŸ“¦ Build e PublicaÃ§Ã£o

Para empacotar o projeto:

```bash
pip install build
python -m build
```

Para publicar:

```bash
pip install twine
twine upload dist/*
```

---

## ðŸ›  Requisitos

* Python 3.7+
* `playwright` (com `playwright install`)
* `jinja2`

---

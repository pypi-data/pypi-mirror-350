name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

  cancel-in-progress: true

permissions:
  contents: read

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  linux_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        run: rustup show
      - uses: mozilla-actions/sccache-action@v0.0.3
      
      # Install dependencies and create virtualenv
      - name: Install dependencies and create virtualenv
        run: |
          python -m pip install --upgrade pip
          python -m pip install virtualenv
          python -m virtualenv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip install pytest python-dotenv
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
      
      # Build and install the package with maturin
      - name: Build and install package
        run: |
          source .venv/bin/activate
          maturin develop --release
      
      # Debug: Check the installed package structure
      - name: Debug Package Installation
        run: |
          source .venv/bin/activate
          echo "=== Package installation check ==="
          pip show polar-llama
          echo ""
          echo "=== Python site-packages contents ==="
          python -c "
          import site
          import os
          for path in site.getsitepackages():
              polar_path = os.path.join(path, 'polar_llama')
              if os.path.exists(polar_path):
                  print(f'Found polar_llama at: {polar_path}')
                  for item in os.listdir(polar_path):
                      print(f'  - {item}')
          "
          echo ""
          echo "=== Test basic import ==="
          python -c "
          try:
              import polar_llama
              print('✓ polar_llama imported successfully')
              print(f'polar_llama location: {polar_llama.__file__}')
              
              from polar_llama import Provider
              print('✓ Provider imported successfully')
              print(f'Provider.OPENAI: {Provider.OPENAI}')
              
          except Exception as e:
              print(f'✗ Import failed: {e}')
              import traceback
              traceback.print_exc()
          "
      
      # Run tests from a different directory to ensure we're testing the installed package
      - name: Run Tests
        run: |
          source .venv/bin/activate
          # Set dummy API keys to prevent errors in tests that might still use dotenv
          export OPENAI_API_KEY="dummy_key"
          export ANTHROPIC_API_KEY="dummy_key"
          export GROQ_API_KEY="dummy_key"
          export GEMINI_API_KEY="dummy_key"
          
          # Create a temporary directory and run tests from there
          mkdir -p /tmp/test_run
          cd /tmp/test_run
          
          # Copy test files to temp directory
          cp -r $GITHUB_WORKSPACE/tests .
          
          # Run tests
          python -m pytest tests -v --tb=short
      
      # Run pre-commit checks
      - name: Run pre-commit checks
        run: |
          source .venv/bin/activate
          cd $GITHUB_WORKSPACE
          cargo fmt --all && cargo clippy --all-features
          python -m ruff check . --fix || true
          if [ -d "polar_llama" ]; then
            python -m ruff format polar_llama || true
          fi
          if [ -d "tests" ]; then
            python -m ruff format tests || true
          fi
          if [ -d "polar_llama" ] && [ -d "tests" ]; then
            python -m mypy --ignore-missing-imports polar_llama tests || true
          elif [ -d "polar_llama" ]; then
            python -m mypy --ignore-missing-imports polar_llama || true
          elif [ -d "tests" ]; then
            python -m mypy --ignore-missing-imports tests || true
          fi
      
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl libssl-dev pkg-config

      # Most basic approach for building wheels, using the stable manylinux image
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          architecture: ${{ matrix.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  release:
    name: Release
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
          
      - name: List distribution files
        run: ls -la dist/
          
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*

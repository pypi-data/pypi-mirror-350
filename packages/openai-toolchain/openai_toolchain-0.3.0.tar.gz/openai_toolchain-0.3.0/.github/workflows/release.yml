name: Release

on:
  push:
    tags:
      - "v*" # Matches tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string

permissions:
  contents: write # Needed to create releases and tags
  packages: write # Needed to publish to GitHub Packages (if used)
  id-token: write # Needed for OIDC authentication

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Needed for the changelog generation

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Get version
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            # Manual trigger with version input
            VERSION="${{ github.event.inputs.version }}"
            # Ensure version doesn't start with 'v' for consistency
            VERSION=${VERSION#v}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
            echo "TAG_NAME=v${VERSION}" >> $GITHUB_ENV
            echo "MANUAL_RELEASE=true" >> $GITHUB_ENV
          else
            # Automatic trigger from tag
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
            echo "TAG_NAME=v${VERSION}" >> $GITHUB_ENV
            echo "MANUAL_RELEASE=false" >> $GITHUB_ENV
          fi

          echo "Using version: ${VERSION}"
          echo "Tag name: v${VERSION}"

      - name: Extract release notes from CHANGELOG.md
        id: changelog
        run: |
          # Extract the section for this version from CHANGELOG.md
          # Assumes CHANGELOG.md follows Keep a Changelog format
          VERSION=${{ steps.version.outputs.version }}

          # Create a temporary file for the extracted section
          TEMP_FILE=$(mktemp)

          # Use awk to extract the section between the version headers
          awk -v version="$VERSION" '
            $0 ~ "^## \\[" version "\\]" {flag=1; next}
            $0 ~ /^## \[/ && flag {exit}
            flag && NF {print}
          ' CHANGELOG.md > "$TEMP_FILE"

          # Trim leading/trailing whitespace
          CHANGELOG=$(cat "$TEMP_FILE" | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//')
          rm "$TEMP_FILE"

          if [ -z "$CHANGELOG" ]; then
            echo "::warning::No CHANGELOG entry found for version $VERSION"
            CHANGELOG="* No changelog entry for this version *"
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.TAG_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          generate_release_notes: ${{ !env.MANUAL_RELEASE }}
          draft: false
          prerelease: false
          body: |
            ### Changes
            ${{ env.CHANGELOG }}

            ### Installation
            ```bash
            pip install openai-toolchain==${{ steps.version.outputs.version }}
            ```

      - name: Build package
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build --sdist --wheel --outdir dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true

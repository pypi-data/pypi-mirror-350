"""
hf_api.py

This module provides a wrapper around the Hugging Face Inference API using the `huggingface_hub.InferenceClient`.

Main functionality:
- Send prompts to an AI model hosted on Hugging Face (e.g., deepseek-ai/DeepSeek-V3).
- Generate realistic, consistent fake SQL data for testing purposes based on a provided database schema.

Classes:
    HFapi: Handles interaction with the Hugging Face model and abstracts prompt formatting and message sending.

Usage example:

    from hf_api import HFapi

    api = HFapi()
    schema = "users:id,name,username; posts:id,user_id,title"
    fake_sql = api.prompt_fake_data(schema, num_rows=5)
    print(fake_sql)
"""

from huggingface_hub import InferenceClient

from rowgen.utils import API_KEY


class HFapi:
    """
    A wrapper for interacting with the Hugging Face Inference API to generate SQL data or chat completions.
    """

    def __init__(self, provider: str = "novita", api_key: str = API_KEY):
        """
        Initializes the Hugging Face API client.

        Args:
            provider (str): The provider name for the inference API.
            api_key (str): API key for authenticating with the provider.
        """
        self.client = InferenceClient(provider=provider, api_key=api_key)

    def send_message_to_api(self, message: str) -> str:
        """
        Sends a message to the AI model and returns the generated response.

        Args:
            message (str): The input message or prompt to be sent to the model.

        Returns:
            str: The response generated by the AI model.
        """
        completion = self.client.chat.completions.create(
            model="deepseek-ai/DeepSeek-V3",
            messages=[
                {
                    "role": "user",
                    "content": message,
                }
            ],
        )
        return completion.choices[0].message["content"]

    def prompt_fake_data(self, db_schema: str, num_rows: int = 10) -> str:
        """
        Generates SQL `INSERT` statements with fake data for a given database schema.

        Args:
            db_schema (str): The database schema in the format "table:column" used for generating data.
            num_rows (int): The number of fake data rows to generate.

        Returns:
            str: A string of SQL `INSERT` statements with realistic and consistent fake data,
                 with no explanatory text.
        """
        prompt = f"""
        Generate {num_rows} rows of fake SQL data for the following table:column schema. 
        Make the data look believable and realistic (no placeholder names like 'John Doe').
        Ensure consistency between tables (e.g., valid foreign key references). Respect the constraints and checks too.
        Respond with only SQL INSERT statements, without any additional explanation or text.

        Schema: {db_schema}
        """
        return self.send_message_to_api(prompt.strip())

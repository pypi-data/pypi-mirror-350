Metadata-Version: 2.1
Name: dundle
Version: 2025.5.23
Summary: dundle.py - Convenient, non-standard package builder. No pyproject.toml, only dunders like __version__
Project-URL: homepage, https://github.com/python-dundle/dundle
Classifier: Topic :: Software Development :: Build Tools
License: 0BSD
Description-Content-Type: text/plain

dundle.py - Convenient, non-standard package builder. No pyproject.toml, only dunders like __version__

pip install dundle

"dunders" (also known as magic names) are names with two leading and two trailing underscores.

Supported module-level dunders
==============================

Note: PEP 8 suggests module dunders to be placed after the module docstring but before any import statements.

__name__
    The name of the project. Must be a string.

__version__
    The version of the project. Must be a string. Must conform to https://packaging.python.org/en/latest/specifications/version-specifiers/#version-scheme
    e.g. "3.11.2"

__description__
    The short (one-line) description of the project. Must be a string.
    Note: If __description__ is not present, the first line of the module docstring (__doc__) is used.
    e.g. "Generate random cat GIFs!"

__readme__
    The long description of the project. Must be a string or a dictionary.
    - If string, it is a relative path to the README file.
    - If dictionary: the optional key "file", if present, has a relative path to the README as value. The optional key "content-type", if present, has "text/plain", "text/x-rst" or "text/markdown" as value.
    Note: If __readme__ is not present (or if only content-type is present), the module docstring (__doc__) is used.
    e.g. "README.rst"
    e.g. {"file": "README.txt", "content-type": "text/markdown"}
    e.g. {"content-type": "text/plain"}

__requires_python__
    The Python version requirements of the project. Must be a string. Must conform to https://packaging.python.org/en/latest/specifications/version-specifiers/#id5
    e.g. ">= 3.8"

__urls__
    The URLs relevant to the project. Must be a dictionary. Key is a label. Value is a URL. Both are strings. See well-known labels at https://packaging.python.org/en/latest/specifications/well-known-project-urls/#well-known-labels
    e.g. {"homepage": "https://example.com", "source": "https://git.example.com", "documentation": "https://example.com/doc"}

__dependencies__
    The dependencies of the project. Must be a sequence of strings. Must conform to https://packaging.python.org/en/latest/specifications/dependency-specifiers/#dependency-specifiers
    e.g. ["httpx", "gidgethub[httpx]>4.0.0", "django>2.1; os_name != 'nt'", "django>2.0; os_name == 'nt'"]

__optional_dependencies__
    The optional dependencies of the project. Must be a dictionary. Key is a string. Value is a sequence of strings. Must conform to https://packaging.python.org/en/latest/specifications/dependency-specifiers/#dependency-specifiers
    e.g. {"gui": ["PyQt5"], "cli": ["rich", "click"]}

__classifiers__
    The trove classifiers (https://pypi.org/classifiers) relevant to the project. Must be a sequence of strings. License classifiers (i.e. License ::) are deprecated in favor of __license__
    e.g. ["Development Status :: 5 - Production/Stable", "Topic :: Software Development :: Build Tools"]

__keywords__
    The keywords of the project. Must be a sequence of strings.
    e.g. ["dog", "puppy"]

__authors__
__maintainers__
    The authors/maintainers of the project. Must be a sequence of dictionaries. Each dictionary may have the key "name" or "email" or both.
    e.g. [{"name": "Alice", "email": "alice@example.com"}, {"name": "Bob"}, {"email": "charlie@example.com"}]

__license__
    SPDX license expression. Must be a string. See short license identifiers at https://spdx.org/licenses
    e.g. "0BSD"
    e.g. "MIT"
    e.g. "MIT OR 0BSD OR (Apache-2.0 AND BSD-2-Clause)"

__license_files__
    Files containing licenses and other legal notices. Must be a sequence of strings.
    Each string is a relative path to a file as a valid glob pattern that conforms to https://packaging.python.org/en/latest/specifications/glob-patterns
    e.g. ["LICENSE"]
    e.g. ["LICEN[CS]E*", "vendored/licenses/*.txt", "AUTHORS.md"]

Command-line Usage
======================

Library Usage
=================

Source distribution (.sdist)
============================

Wheel/binary distribution (.whl)
================================

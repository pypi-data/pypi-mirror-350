# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import typing
from . import mock

class DataType:
    def __repr__(self) -> str:
        ...


class EventBuilder:
    r"""
    Builder for creating and logging events with field values.
    
    This class provides a fluent interface for building events field by field,
    with type checking performed as fields are added.
    
    Examples:
        >>> event = source.get_event("http_request")
        >>> builder = event.build()
        >>> (builder
        ...     .insert("method", "GET")
        ...     .insert("path", "/api/users")
        ...     .insert("status_code", 200)
        ...     .log())
    """
    def insert(self, name:str, value:typing.Any) -> EventBuilder:
        r"""
        Add a field value. Performs type checking against the schema.
        Returns self for method chaining.
        
        Args:
            name (str): The name of the field.
            value (Any): The value for the field.
        
        Returns:
            EventBuilder: self.
        
        Raises:
            KeyError: If the field name is not in the schema.
            TypeError: If the value type does not match the schema.
        
        Examples:
            >>> builder = event.build()
            >>> builder.insert("status_code", 200)
            >>> # Method chaining
            >>> builder.insert("method", "GET").insert("path", "/api/users")
        """
        ...

    def log(self) -> None:
        r"""
        Log the event with the collected data at the current time.
        Consumes the builder.
        
        Raises:
            RuntimeError: If sending the event fails internally.
        
        Examples:
            >>> builder = event.build()
            >>> builder.insert("status_code", 200)
            >>> builder.log()  # Send with current timestamp
        """
        ...

    def log_at(self, time_ns:int) -> None:
        r"""
        Log the event with the collected data at a specific time.
        Consumes the builder.
        
        Args:
            time_ns (int): Timestamp in nanoseconds since Unix epoch.
        
        Raises:
            RuntimeError: If sending the event fails internally.
        
        Examples:
            >>> builder = event.build()
            >>> builder.insert("status_code", 200)
            >>> # Send with custom timestamp
            >>> builder.log_at(1625097600000000000)
        """
        ...

    def __repr__(self) -> str:
        r"""
        String representation of the builder.
        """
        ...


class TraceEventFieldMetadata:
    r"""
    Metadata describing a field in a trace event schema.
    
    This class defines the structure of a field within an event schema,
    including its name, data type, and optional unit of measurement.
    
    Args:
        name (str): The field name.
        data_type (DataType): The data type for the field.
        unit (Optional[str]): Optional unit of measurement.
    
    Examples:
        >>> # Define a field for HTTP status code
        >>> status_field = TraceEventFieldMetadata("status_code", DataType.Int32)
        >>>
        >>> # Define a field with a unit of measurement
        >>> duration_field = TraceEventFieldMetadata(
        ...     "duration_ms", DataType.Float64, "milliseconds")
    """
    name: str
    data_type: DataType
    unit: typing.Optional[str]
    def __new__(cls,name,data_type,unit = ...): ...
    def __repr__(self) -> str:
        ...


class TracePublishClient:
    r"""
    Client for publishing trace events to a Zelos Cloud service.
    
    This client manages the connection to a remote trace service and
    provides the communication channel needed by TraceSource objects
    to transmit events. It handles batching, retries, and connection management.
    
    Examples:
        >>> # Create a client with default settings
        >>> client = TracePublishClient()
        >>>
        >>> # Create a client with custom configuration
        >>> config = TracePublishClientConfig(url="grpc://localhost:2300")
        >>> client = TracePublishClient(config)
    """
    def __new__(cls,config = ...): ...
    def url(self, ) -> str:
        r"""
        Get the URL of the connected trace service.
        """
        ...

    def __repr__(self) -> str:
        r"""
        String representation of the client.
        """
        ...


class TracePublishClientConfig:
    r"""
    Configuration for the PyTracePublishClient.
    
    This class allows customizing the behavior of trace publishing, including:
    - Batch size: Number of events to batch before sending
    - Batch timeout: Maximum time to wait before sending a partial batch
    
    Examples:
        >>> config = TracePublishClientConfig(
        ...     batch_size=500,
        ...     batch_timeout_ms=2000,
        ...     reconnect_delay_ms=100,
        ...     url="grpc://localhost:2300"
        ... )
        >>> client = TracePublishClient(config)
    """
    batch_size: int
    batch_timeout_ms: int
    reconnect_delay_ms: int
    url: str
    def __new__(cls,url = ...,batch_size = ...,batch_timeout_ms = ...,reconnect_delay_ms = ...): ...
    def __repr__(self) -> str:
        r"""
        String representation of the configuration.
        """
        ...

    def set_url(self, url:str) -> None:
        r"""
        Set the URL of the connected trace service.
        """
        ...

    def set_batch_size(self, size:int) -> None:
        r"""
        Set the configured batch size.
        """
        ...

    def set_batch_timeout_ms(self, ms:int) -> None:
        r"""
        Set the configured batch timeout in milliseconds.
        """
        ...

    def set_reconnect_delay_ms(self, ms:int) -> None:
        r"""
        Set the configured reconnect delay in milliseconds.
        """
        ...


class TraceSender:
    r"""
    Communication channel for sending trace events.
    
    This class is typically obtained from a TracePublishClient and passed to
    a TraceSource during creation. It handles the underlying message transport.
    
    Note:
        Users generally don't need to interact with this class directly;
        it's used internally to connect TraceSource to TracePublishClient.
    """
    ...

class TraceSource:
    r"""
    Central source for trace events in an application.
    
    A TraceSource represents a single data source within your application
    (like a service or component) and manages the event schemas and transmission
    of events to the trace collection system.
    
    Examples:
        >>> client = TracePublishClient()
        >>> source = TraceSource("my_service")
        >>>
        >>> # Define an event schema
        >>> http_event = source.add_event("http_request", [
        ...     TraceEventFieldMetadata("method", DataType.String),
        ...     TraceEventFieldMetadata("path", DataType.String),
        ...     TraceEventFieldMetadata("status_code", DataType.Int32),
        ...     TraceEventFieldMetadata("duration_ms", DataType.Float64, "milliseconds"),
        ... ])
        >>>
        >>> # Log an event
        >>> http_event.log(**{
        ...     "method": "GET",
        ...     "path": "/api/users",
        ...     "status_code": 200,
        ...     "duration_ms": 42.3
        ... })
    """
    name: str
    def __new__(cls,name,sender = ...): ...
    def add_value_table(self, name,field_name,data) -> None:
        r"""
        Add a value table to the trace source.
        
        Args:
            name (str): The name of the value table.
            data (dict): A dictionary of values to add to the value table.
        
        Returns:
            None
        
        Examples:
            >>> source.add_value_table("my_table", {"key": 123})
            >>> source.add_value_table("my_table", {"key": 123}, {"key2": 456})
        """
        ...

    def add_event_from_dict(self, name,data) -> TraceSourceEvent:
        ...

    def log_dict(self, name,data) -> None:
        r"""
        Log an event with a name and a dictionary of fields.
        
        Args:
            name (str): The name to log.
            data (dict): A dictionary of fields to log.
            prefix (str): A prefix to add to the event name.
        
        Returns:
            None
        
        Examples:
            >>> source.log_dict("my_event", {"key": 123})
        """
        ...

    def log(self, name,data) -> None:
        r"""
        Log an event with a name and a dictionary of fields.
        
        Args:
            name (str): The name to log.
            data (dict): A dictionary of fields to log.
        
        Returns:
            None
        
        Examples:
            >>> source.log("my_event", {"key": 123})
        """
        ...

    def get_event(self, name:str) -> TraceSourceEvent:
        r"""
        Get a handle to a previously registered event schema.
        
        Args:
            name (str): The name of the event schema.
        
        Returns:
            TraceSourceEvent: A handle to the event.
        
        Raises:
            KeyError: If no event with the given name is registered.
        
        Examples:
            >>> # After defining an event schema
            >>> event = source.get_event("http_request")
        """
        ...

    def build_event(self, slf:TraceSource, name:str) -> TraceSourceSchemaBuilder:
        r"""
        Start building a new event schema associated with this source.
        If an event with the same name exists, it will be overwritten upon calling build().
        
        Args:
            name (str): The name for the new event schema.
        
        Returns:
            TraceSourceSchemaBuilder: A builder instance to define fields.
        
        Examples:
            >>> builder = source.build_event("http_request")
            >>> (builder
            ...     .add_string_field("method")
            ...     .add_string_field("path")
            ...     .add_i32_field("status_code")
            ...     .build())
        """
        ...

    def add_event(self, name,schema) -> TraceSourceEvent:
        r"""
        Directly registers an event schema defined by a list of TraceEventFieldMetadata.
        Useful if the schema is constructed programmatically.
        
        Args:
            name (str): The name for the event schema.
            schema (list[TraceEventFieldMetadata]): List defining the fields.
        
        Returns:
            TraceSourceEvent: A handle to the newly registered event.
        
        Raises:
            ValueError: If registering the schema fails internally.
        """
        ...

    def __repr__(self) -> str:
        r"""
        String representation of the source.
        """
        ...


class TraceSourceEvent:
    ...

class TraceSourceSchemaBuilder:
    r"""
    Builder for defining event schemas in a TraceSource.
    
    This class provides a fluent interface for defining the fields in an event schema.
    It is created by a TraceSource when defining new event types.
    
    Examples:
        >>> builder = source.build_event("http_request")
        >>> (builder
        ...     .add_string_field("method")
        ...     .add_string_field("path")
        ...     .add_i32_field("status_code")
        ...     .add_f64_field("duration_ms", "milliseconds")
        ...     .build())  # Returns a TraceSourceEvent
    """
    def add_field(self, name,data_type,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a field to the event schema being built.
        Returns self for method chaining.
        
        Args:
            name (str): The name of the field.
            data_type (DataType): The data type of the field.
            unit (Optional[str]): Optional unit of measurement for the field.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder = source.build_event("cpu_metrics")
            >>> builder.add_field("usage_percent", DataType.FLOAT64, "percent")
        """
        ...

    def add_i8_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add an 8-bit signed integer field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_i8_field("temperature", "celsius")
        """
        ...

    def add_i16_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a 16-bit signed integer field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_i16_field("altitude", "meters")
        """
        ...

    def add_i32_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a 32-bit signed integer field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_i32_field("status_code")
        """
        ...

    def add_i64_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a 64-bit signed integer field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_i64_field("timestamp", "seconds")
        """
        ...

    def add_u8_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add an 8-bit unsigned integer field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_u8_field("color_red", "level")
        """
        ...

    def add_u16_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a 16-bit unsigned integer field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_u16_field("port_number")
        """
        ...

    def add_u32_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a 32-bit unsigned integer field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_u32_field("request_id")
        """
        ...

    def add_u64_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a 64-bit unsigned integer field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_u64_field("user_id")
        """
        ...

    def add_f32_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a 32-bit floating point field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_f32_field("temperature", "celsius")
        """
        ...

    def add_f64_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a 64-bit floating point field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_f64_field("duration_ms", "milliseconds")
        """
        ...

    def add_timestamp_ns_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a timestamp field (nanoseconds since epoch) to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_timestamp_ns_field("created_at")
        """
        ...

    def add_binary_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a binary data field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_binary_field("image_data")
        """
        ...

    def add_string_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a string field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_string_field("message")
            >>> builder.add_string_field("http_method")
        """
        ...

    def add_bool_field(self, name,unit = ...) -> TraceSourceSchemaBuilder:
        r"""
        Add a boolean field to the schema.
        
        Args:
            name (str): Field name.
            unit (Optional[str]): Optional unit of measurement.
        
        Returns:
            TraceSourceSchemaBuilder: self for method chaining.
        
        Examples:
            >>> builder.add_bool_field("is_success")
            >>> builder.add_bool_field("has_error")
        """
        ...

    def build(self, ) -> TraceSourceEvent:
        r"""
        Finalize the schema definition and register it with the TraceSource.
        Returns the created TraceSourceEvent handle. Consumes the builder.
        
        Returns:
            TraceSourceEvent: Handle to the newly registered event type.
        
        Raises:
            RuntimeError: If registering the schema fails internally.
        
        Examples:
            >>> event = (source.build_event("http_request")
            ...     .add_string_field("method")
            ...     .add_i32_field("status_code")
            ...     .build())
        """
        ...

    def __repr__(self) -> str:
        r"""
        String representation of the schema builder.
        """
        ...


class TraceValue:
    ...

class TraceWriter:
    r"""
    Python wrapper for the TraceWriter.
    
    This writer manages writing trace events to a local file, with support for
    batching and buffering. It can be used with a TraceSource to capture events
    for later analysis.
    
    The writer uses context management and should be used with a `with` statement
    to ensure proper resource cleanup and automatic start/stop of trace capture.
    
    Examples:
        >>> # Basic usage with default settings
        >>> with TraceWriter("my_trace.trz") as writer:
        ...     # Trace events will be captured automatically
        ...     pass
        >>>
        >>> # Custom batch configuration
        >>> with TraceWriter("my_trace.trz", batch_size=500, batch_timeout_ms=2000) as writer:
        ...     # Trace events will be captured with custom batch settings
        ...     pass
    """
    path: str
    def __new__(cls,path,batch_size = ...,batch_timeout_ms = ...): ...
    def open(self) -> None:
        r"""
        Start the trace writer and begin capturing events.
        
        This method initializes the writer and starts background tasks for
        batching and writing trace events. It's automatically called when
        entering the context manager (with statement).
        
        Returns:
            None
        
        Raises:
            RuntimeError: If the writer cannot be initialized.
        
        Note:
            This method is called automatically by __enter__ when using
            the context manager pattern.
        """
        ...

    def __enter__(self) -> None:
        ...

    def close(self) -> None:
        r"""
        Stop the trace writer and finalize trace capture.
        
        This method gracefully shuts down the writer, cancels background tasks,
        and ensures all buffered events are written to the trace file. It's
        automatically called when exiting the context manager.
        
        Returns:
            None
        
        Note:
            This method is called automatically by __exit__ when using
            the context manager pattern.
        """
        ...

    def __exit__(self, _exc_type:typing.Optional[typing.Any], _exc_value:typing.Optional[typing.Any], _traceback:typing.Optional[typing.Any]) -> None:
        ...

    def __repr__(self) -> str:
        r"""
        String representation of the writer.
        """
        ...


def enable_logging(log_level = ...) -> None:
    r"""
    Enable logging for the Zelos SDK native module.
    
    This function initializes the tracing system with the specified log level.
    If no log level is provided, it defaults to "info".
    
    Args:
        log_level (Optional[str]): The log level to use.
            Valid values: "trace", "debug", "info", "warn", "error".
            Defaults to "info" if not specified.
    
    Returns:
        None
    
    Examples:
        >>> enable_logging("debug")  # Set log level to debug
        >>> enable_logging("info")   # Set log level to info
        >>> enable_logging()         # Set log level to info
    """
    ...

def get_global_router_sender() -> TraceSender:
    r"""
    Get the global default trace router sender
    
    Returns:
        TraceSender: The global router's sender
    
    Examples:
        >>> sender = get_global_router_sender()
    """
    ...

def init(name = ...,client_config = ...,log_level = ...) -> tuple[TracePublishClient, TraceSource]:
    r"""
    Initialize the ZelosCloud tracing system.
    
    Creates a TracePublishClient and a TraceSource, storing them as global defaults.
    
    Args:
        source_name (str): A unique identifier for your application
        config (Optional[dict]): Configuration options for the TracePublishClient.
            Can include: channel_capacity, batch_size, batch_timeout_ms.
        enable_logging (Optional[str]): Logging level to enable, None disables logging.
    
    Returns:
        tuple: (client, source) - The created TracePublishClient and TraceSource
    
    Examples:
        >>> # Initialize with the default name of "py"
        >>> client, source = init()
        >>>
        >>> # Initialize with defaults and connect later
        >>> client, source = init("my_app")
        >>>
        >>> # Initialize and connect in one step
        >>> client, source = init("my_app")
        >>>
        >>> # Initialize with custom config (alternatively, set the ZELOS_TRACE_URL environment variable)
        >>> client, source = init(
        ...     "my_app",
        ...     client_config=TracePublishClientConfig(
        ...         url="grpc://localhost:2300",
        ...     ),
        ...     log_level="debug"
        ... )
    """
    ...

def log(name,data,source = ...) -> None:
    ...


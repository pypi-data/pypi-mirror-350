from typing import Optional, List, Iterator
from pydantic import BaseModel, Field, AnyUrl


class VulnerabilityReferences(BaseModel):
    product: Optional[List[AnyUrl]] = Field(default_factory=list)
    patches: Optional[List[AnyUrl]] = Field(default_factory=list)
    advisories: Optional[List[AnyUrl]] = Field(default_factory=list)
    exploits: Optional[List[AnyUrl]] = Field(default_factory=list)
    reports: Optional[List[AnyUrl]] = Field(default_factory=list)
    other: Optional[List[AnyUrl]] = Field(default_factory=list)

    def extend(self, references: "VulnerabilityReferences"):
        self.product.extend(references.product)
        self.patches.extend(references.patches)
        self.advisories.extend(references.advisories)
        self.exploits.extend(references.exploits)
        self.reports.extend(references.reports)
        self.other.extend(references.other)

    def to_list(self) -> List[AnyUrl]:
        return self.product + self.patches + self.advisories + self.exploits + self.reports + self.other

    def __len__(self):
        return len(self.to_list())

    def __iter__(self) -> Iterator[AnyUrl]:
        return iter(self.to_list())

    def __str__(self):
        ref_categories = [
            ("product", self.product),
            ("patches", self.patches),
            ("advisories", self.advisories),
            ("exploits", self.exploits),
            ("reports", self.reports),
            ("other", self.other)
        ]

        ref_details = [f"{len(ref)} {name}" for name, ref in ref_categories if ref]
        ref_str = f"{len(self)} references" + (" (" + ", ".join(ref_details) + ")" if ref_details else "")

        return ref_str

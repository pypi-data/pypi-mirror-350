import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from typing import Any, Callable

class _Column(str): ...
class _Row(dict[_Column, Any]): ...

class Table:
    data: Incomplete
    length: Incomplete
    columns: Incomplete
    def __init__(self, data: list[_Row], columns: list[str]) -> None: ...
    def get(self, row: int, column: str | None = None) -> dict[_Column, Any] | Any | None: ...

class ReturnedSqlType:
    sqlres: Incomplete
    rowcount: Incomplete
    close: Incomplete
    def __init__(self, sqlres: list[_Row], rowcount: int, close: Callable, columns: list[str]) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc) -> None: ...

class ConnectionPoolInterface(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def runsql(self, sql: str): ...
    @abstractmethod
    def select(self, sql: str) -> ReturnedSqlType: ...

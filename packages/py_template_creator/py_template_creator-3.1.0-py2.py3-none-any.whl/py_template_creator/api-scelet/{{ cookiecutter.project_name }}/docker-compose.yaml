networks:
  {{ cookiecutter.project_name }}:
    name: {{ cookiecutter.project_name }}

services:
  rest_api:
    build:
      context: rest_api
      target: ${BUILD_TARGET:-prod}
      args:
        - APP_VERSION
    image: ${REGISTRY}/rest_api:${APP_VERSION}
    container_name: rest_api_${DOCKER_CONTAINER_SUFFIX}
    env_file:
      - .env
      - .docker.env
    networks:
      {{ cookiecutter.project_name }}:
        aliases:
          - rest_api
    ports:
      - "8080:8080"
    depends_on:
      postgresDB:
        condition: service_healthy
      redisDB:
        condition: service_healthy
      rabbit:
        condition: service_healthy

  postgresDB:
    image: postgres:17.4
    container_name: postgres_${DOCKER_CONTAINER_SUFFIX}
    ports:
      - "5432:5432"
    env_file:
      - .env
      - .docker.env
    volumes:
      - postgresDB:/var/lib/postgresql/data
    networks:
      {{ cookiecutter.project_name }}:
        aliases:
          - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  redisDB:
    image: redis:7.4.2
    container_name: redis_${DOCKER_CONTAINER_SUFFIX}
    command: redis-server --appendonly yes
    volumes:
      - redisDB:/data
    ports:
      - "6379:6379"
    networks:
      {{ cookiecutter.project_name }}:
        aliases:
        - redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  rabbit:
    image: rabbitmq:4.0.7-management
    container_name: rabbit_${DOCKER_CONTAINER_SUFFIX}
    env_file:
      - .env
      - .docker.env
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      {{ cookiecutter.project_name }}:
        aliases:
          - rabbit
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s

  minio:
    image: minio/minio:RELEASE.2025-02-28T09-55-16Z
    platform: linux/amd64
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_store:/data
    environment:
      - MINIO_ROOT_USER=${ASSET_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${ASSET_SECRET_ACCESS_KEY}
    command: server --address ":9000" --console-address ":9001" /data
    networks:
      {{ cookiecutter.project_name }}:
        aliases:
          - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio_create_buckets:
    image: minio/mc:RELEASE.2025-02-21T16-00-46Z
    platform: linux/amd64
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 $ASSET_ACCESS_KEY $ASSET_SECRET_ACCESS_KEY;
      /usr/bin/mc mb myminio/default;
      /usr/bin/mc policy set public myminio/default;
      /usr/bin/mc mb myminio/private;
      exit 0;
      "
    networks:
      {{ cookiecutter.project_name }}:
        aliases:
          - minio_create

  mail:
    platform: linux/amd64
    image: mailhog/mailhog:v1.0.1
    container_name: mail_${DOCKER_CONTAINER_SUFFIX}
    user: root
    tty: true
    privileged: true
    ports:
      - "127.0.0.1:1025:1025"
      - "127.0.0.1:8025:8025"
    command: ["-storage=maildir", "-maildir-path=/maildir"]
    volumes:
      - mail_data:/maildir
    networks:
      {{ cookiecutter.project_name }}:
        aliases:
          - mail

volumes:
  postgresDB:
    driver: local
  redisDB:
    driver: local
  mail_data:
    driver: local
  minio_store:
    driver: local
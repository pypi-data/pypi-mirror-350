"""Tests for simple sign.

Creating new test signatures:

```sh
cardano-cli address key-gen \
 --verification-key-file /tmp/payment.vkey \
 --signing-key-file /tmp/payment.skey
```

```sh
cardano-cli address build \
 --payment-verification-key-file /tmp/payment.vkey \
 --out-file /tmp/payment1.addr \
 --testnet-magic 1
```

"""


from src.simple_sign.sign import sign_with_key, verify_signature


def test_sign():
    """Ensure the signing function works as anticipated.

    NB. parameterize these tests once this library has greater use within
    the stack.
    """

    skey = """
    {
        "type": "PaymentSigningKeyShelley_ed25519",
        "description": "Payment Signing Key",
        "cborHex": "5820d22cabb9787df7bdf223b71d7be8cfc1e1f89a1154e635259530264d7be1263e"
    }
    """
    m1 = "123"
    m2 = "plain-text-string"
    m3 = "{'test': 'data'}"
    s1 = sign_with_key(data=m1, signing_key=skey)
    s2 = sign_with_key(data=m2, signing_key=skey)
    s3 = sign_with_key(data=m3, signing_key=skey)
    assert verify_signature(s1).get("message") == m1
    assert verify_signature(s2).get("message") == m2
    assert verify_signature(s3).get("message") == m3


def test_verify():
    """Ensure that the verify function works as anticipated."""

    unsigned_cbor_data = "a46c626c6f636b5f6865696768741a068a119a66736f75726365674d696e537761706761646472657373786761646472317a38736e7a376334393734767a647078753635727570686c337a6a64767478773873747266326332746d716e787a6636673838326e3673613267786e6b34326865617675377564646c356a646c30656b746635663230346d6d63377333796b75663965666565647382a36466656564684144412d46414354647574786f784230303463343461643766323930616237653464326533363933306434373262316563613162393761366535393830353265393831323738383364333433613638233067616d6f756e7473a2686c6f76656c6163651b0000004d295541ce784f61333933313639316635633465363564303163343239653437336430646432346335316166646236646166383865363332613663316535312e366637323633363636313738373436663662363536651b000008520f46ea48a36466656564674144412d574d54647574786f784235393734333531313064333431383364626665623862663133623432333234363239346663313266633139396362316539383135393764303366616666326434233067616d6f756e7473a2686c6f76656c6163651b000002dc088bd67a785931643766333362643233643835653161323564383764383666616334663139396333313937613266376166656236363261306633346531652e37373666373236633634366436663632363936633635373436663662363536651b000008bba11bb36f"
    assert verify_signature(unsigned_cbor_data) == {
        "verified": False,
        "message": None,
        "signing_address": None,
    }

    cbor_data = "84584da301276761646472657373581d61458df11b6eeb14e3ee18bdc0d3fb8e2c2c5fd355e149d3a21d3a0627045820f9d8454265d02f54c7f658972189f6278a81c87762e911665603834bee9d31b6a166686173686564f45902957b22626c6f636b5f686569676874223a203130393731313737302c2022736f75726365223a20224d696e53776170222c202261646472657373223a202261646472317a38736e7a376334393734767a647078753635727570686c337a6a64767478773873747266326332746d716e787a6636673838326e3673613267786e6b34326865617675377564646c356a646c30656b746635663230346d6d63377333796b756639222c20226665656473223a205b7b2266656564223a20224144412d46414354222c20227574786f223a2022303034633434616437663239306162376534643265333639333064343732623165636131623937613665353938303532653938313237383833643334336136382330222c2022616d6f756e7473223a207b226c6f76656c616365223a203333313430353933353035342c202261333933313639316635633465363564303163343239653437336430646432346335316166646236646166383865363332613663316535312e36663732363336363631373837343666366236353665223a20393134383533363634363231367d7d2c207b2266656564223a20224144412d574d54222c20227574786f223a2022353937343335313130643334313833646266656238626631336234323332343632393466633132666331393963623165393831353937643033666166663264342330222c2022616d6f756e7473223a207b226c6f76656c616365223a20333134343035393434323831302c202231643766333362643233643835653161323564383764383666616334663139396333313937613266376166656236363261306633346531652e3737366637323663363436643666363236393663363537343666366236353665223a20393630313935343835333734337d7d5d7d58407c04f01d0cabe082eba26b5755e3d5dc6f815676fea67b4747c3ee572d7235cc3f2813fde7358af7f8b7588e81454070372d31b6609e30666ef602fa96d41e09"
    assert verify_signature(cbor_data) == {
        "verified": True,
        "message": '{"block_height": 109711770, "source": "MinSwap", "address": "addr1z8snz7c4974vzdpxu65ruphl3zjdvtxw8strf2c2tmqnxzf6g882n6sa2gxnk42heavu7uddl5jdl0ektf5f204mmc7s3ykuf9", "feeds": [{"feed": "ADA-FACT", "utxo": "004c44ad7f290ab7e4d2e36930d472b1eca1b97a6e598052e98127883d343a68#0", "amounts": {"lovelace": 331405935054, "a3931691f5c4e65d01c429e473d0dd24c51afdb6daf88e632a6c1e51.6f7263666178746f6b656e": 9148536646216}}, {"feed": "ADA-WMT", "utxo": "597435110d34183dbfeb8bf13b423246294fc12fc199cb1e981597d03faff2d4#0", "amounts": {"lovelace": 3144059442810, "1d7f33bd23d85e1a25d87d86fac4f199c3197a2f7afeb662a0f34e1e.776f726c646d6f62696c65746f6b656e": 9601954853743}}]}',
        "signing_address": "addr1v9zcmugmdm43fclwrz7up5lm3ckzch7n2hs5n5azr5aqvfcxmstta",
    }

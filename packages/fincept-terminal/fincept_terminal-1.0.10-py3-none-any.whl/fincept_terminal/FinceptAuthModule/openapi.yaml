openapi: 3.0.0
info:
  title: Fincept API
  description: |
    This is the documentation for the Fincept API, which provides secure and public endpoints for user management, data subscriptions, and database querying.
    - **Private Endpoints**: Require API keys and subscription verification.
    - **Public Endpoints**: Freely accessible without API keys or rate limits.
  version: 1.0.0
  contact:
    name: Fincept Team
    email: support@fincept.in
servers:
  - url: https://finceptapi.share.zrok.io
    description: Production server
tags:
  - name: Authentication
    description: User authentication and email verification.
  - name: Subscription
    description: Managing database subscriptions.
  - name: Public Endpoints
    description: Publicly accessible data endpoints.
  - name: Private Endpoints
    description: Endpoints requiring API keys and subscriptions.

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: Successful registration with API key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
                  api_key:
                    type: string
                    example: "7b186f32-d353-4754-a30f-d382e4188684"
        '400':
          description: Registration failed due to duplicate username or email.
        '500':
          description: Internal server error.

  /verify-otp:
    post:
      tags:
        - Authentication
      summary: Verify user email with OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOTP'
      responses:
        '200':
          description: Email verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully!
        '400':
          description: Invalid or expired OTP.
        '404':
          description: User not found.
        '500':
          description: Internal server error.

  /databases:
    get:
      tags:
        - Private Endpoints
      summary: Get a list of available databases
      responses:
        '200':
          description: A list of databases the user can access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  databases:
                    type: array
                    items:
                      type: string
                      example: FinanceDB
        '403':
          description: Unauthorized access. API key is required.
        '500':
          description: Internal server error.

  /{database_name}/tables:
    get:
      tags:
        - Private Endpoints
      summary: Get tables from a database
      parameters:
        - name: database_name
          in: path
          required: true
          description: The name of the database.
          schema:
            type: string
            example: FinanceDB
      responses:
        '200':
          description: A list of tables in the specified database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tables:
                    type: array
                    items:
                      type: string
                      example: equities
        '403':
          description: Unauthorized access or subscription required.
        '500':
          description: Internal server error.

  /public/{dbname}/{table}/{column}/filter:
    get:
      tags:
        - Public Endpoints
      summary: Filter rows in a table by column value
      parameters:
        - name: dbname
          in: path
          required: true
          description: The name of the database.
          schema:
            type: string
            example: FinanceDB
        - name: table
          in: path
          required: true
          description: The name of the table.
          schema:
            type: string
            example: equities
        - name: column
          in: path
          required: true
          description: The column to filter by.
          schema:
            type: string
            example: sector
        - name: value
          in: query
          required: true
          description: The value to filter the column by.
          schema:
            type: string
            example: Technology
      responses:
        '200':
          description: Filtered rows as an array of objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          description: Column does not exist in the table.
        '500':
          description: Internal server error.

components:
  schemas:
    UserCreate:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: "mypassword123"

    VerifyOTP:
      type: object
      properties:
        email:
          type: string
          format: email
          example: johndoe@example.com
        otp:
          type: integer
          example: 123456

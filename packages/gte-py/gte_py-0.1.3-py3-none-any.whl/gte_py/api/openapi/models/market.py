"""
GTE API

API for GTE trading and historical data

The version of the OpenAPI document: 0.1.0
Contact: support@liquidlabs.inc
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re
from typing import Annotated, Any, ClassVar
from typing_extensions import Self

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, field_validator

from gte_py.api.openapi.models.market_type import MarketType
from gte_py.api.openapi.models.token import Token


class Market(BaseModel):
    """
    Market
    """

    market_type: MarketType = Field(alias="marketType")
    address: Annotated[str, Field(strict=True)] = Field(description="EVM address")
    base_token: Token = Field(alias="baseToken")
    quote_token: Token = Field(alias="quoteToken")
    price: StrictFloat | StrictInt = Field(description="Price of the base token in quote tokens.")
    price_usd: StrictFloat | StrictInt = Field(
        description="Price of the base token in USD.", alias="priceUsd"
    )
    volume24_hr_usd: StrictFloat | StrictInt | None = Field(
        default=None,
        description="Volume of the market in the last 24 hours in USD",
        alias="volume24HrUsd",
    )
    volume1_hr_usd: StrictFloat | StrictInt = Field(
        description="Volume of the market in the last 1 hour in USD", alias="volume1HrUsd"
    )
    market_cap_usd: StrictFloat | StrictInt = Field(
        description="Market cap of the market in USD", alias="marketCapUsd"
    )
    created_at: StrictInt = Field(
        description="Timestamp of when the market was deployed in UTC millis", alias="createdAt"
    )
    tvl_usd: StrictFloat | StrictInt | None = Field(
        description="TVL of the market in Usd. Null if not applicable.", alias="tvlUsd"
    )
    __properties: ClassVar[list[str]] = [
        "marketType",
        "address",
        "baseToken",
        "quoteToken",
        "price",
        "priceUsd",
        "volume24HrUsd",
        "volume1HrUsd",
        "marketCapUsd",
        "createdAt",
        "tvlUsd",
    ]

    @field_validator("address")
    def address_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[a-fA-F0-9]{40}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{40}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Market from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_token
        if self.base_token:
            _dict["baseToken"] = self.base_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_token
        if self.quote_token:
            _dict["quoteToken"] = self.quote_token.to_dict()
        # set to None if tvl_usd (nullable) is None
        # and model_fields_set contains the field
        if self.tvl_usd is None and "tvl_usd" in self.model_fields_set:
            _dict["tvlUsd"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Market from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "marketType": obj.get("marketType"),
                "address": obj.get("address"),
                "baseToken": Token.from_dict(obj["baseToken"])
                if obj.get("baseToken") is not None
                else None,
                "quoteToken": Token.from_dict(obj["quoteToken"])
                if obj.get("quoteToken") is not None
                else None,
                "price": obj.get("price"),
                "priceUsd": obj.get("priceUsd"),
                "volume24HrUsd": obj.get("volume24HrUsd"),
                "volume1HrUsd": obj.get("volume1HrUsd"),
                "marketCapUsd": obj.get("marketCapUsd"),
                "createdAt": obj.get("createdAt"),
                "tvlUsd": obj.get("tvlUsd"),
            }
        )
        return _obj

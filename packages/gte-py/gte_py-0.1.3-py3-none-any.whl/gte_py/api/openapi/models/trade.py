"""
GTE API

API for GTE trading and historical data

The version of the OpenAPI document: 0.1.0
Contact: support@liquidlabs.inc
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re
from typing import Annotated, Any, ClassVar
from typing_extensions import Self

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, field_validator

from gte_py.api.openapi.models.trade_side import TradeSide


class Trade(BaseModel):
    """
    Trades in Launchpad and AMM markets.
    """

    timestamp: StrictInt = Field(description="Timestamp of the trade in milliseconds")
    txn_hash: Annotated[str, Field(strict=True)] = Field(
        description="EVM transaction hash", alias="txnHash"
    )
    maker: Annotated[str, Field(strict=True)] = Field(description="EVM address")
    taker: Annotated[str, Field(strict=True)] = Field(description="EVM address")
    price: StrictFloat | StrictInt = Field(description="Price of the trade in quote tokens")
    size: StrictFloat | StrictInt = Field(description="Size of the trade in base tokens")
    side: TradeSide
    __properties: ClassVar[list[str]] = [
        "timestamp",
        "txnHash",
        "maker",
        "taker",
        "price",
        "size",
        "side",
    ]

    @field_validator("txn_hash")
    def txn_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[a-fA-F0-9]{64}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{64}$/")
        return value

    @field_validator("maker")
    def maker_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[a-fA-F0-9]{40}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{40}$/")
        return value

    @field_validator("taker")
    def taker_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[a-fA-F0-9]{40}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{40}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Trade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Trade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "timestamp": obj.get("timestamp"),
                "txnHash": obj.get("txnHash"),
                "maker": obj.get("maker"),
                "taker": obj.get("taker"),
                "price": obj.get("price"),
                "size": obj.get("size"),
                "side": obj.get("side"),
            }
        )
        return _obj

"""
GTE API

API for GTE trading and historical data

The version of the OpenAPI document: 0.1.0
Contact: support@liquidlabs.inc
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar
from typing_extensions import Self

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr

from gte_py.api.openapi.models.market import Market


class LpPosition(BaseModel):
    """
    LpPosition
    """

    market: Market
    balance: StrictFloat | StrictInt = Field(description="Amount of LP tokens a user holds")
    share_of_pool: StrictFloat | StrictInt = Field(
        description="Percentage of the pool of the position", alias="shareOfPool"
    )
    apr: StrictFloat | StrictInt = Field(description="APR of the liquidity pool")
    token0_amount: StrictStr = Field(description="Amount of token0 in LP", alias="token0Amount")
    token1_amount: StrictStr = Field(description="Amount of token1 in Lp", alias="token1Amount")
    __properties: ClassVar[list[str]] = [
        "market",
        "balance",
        "shareOfPool",
        "apr",
        "token0Amount",
        "token1Amount",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of LpPosition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of market
        if self.market:
            _dict["market"] = self.market.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of LpPosition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "market": Market.from_dict(obj["market"])
                if obj.get("market") is not None
                else None,
                "balance": obj.get("balance"),
                "shareOfPool": obj.get("shareOfPool"),
                "apr": obj.get("apr"),
                "token0Amount": obj.get("token0Amount"),
                "token1Amount": obj.get("token1Amount"),
            }
        )
        return _obj

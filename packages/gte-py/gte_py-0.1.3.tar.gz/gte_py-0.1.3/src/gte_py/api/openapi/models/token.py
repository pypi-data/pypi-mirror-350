"""
GTE API

API for GTE trading and historical data

The version of the OpenAPI document: 0.1.0
Contact: support@liquidlabs.inc
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re
from typing import Annotated, Any, ClassVar
from typing_extensions import Self

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)


class Token(BaseModel):
    """
    Token
    """

    address: Annotated[str, Field(strict=True)] = Field(description="EVM address")
    decimals: StrictInt = Field(description="Number of decimals for the token")
    name: StrictStr = Field(description="Name of the token")
    symbol: StrictStr = Field(description="Symbol of the token")
    total_supply: StrictFloat | StrictInt = Field(
        description="Total supply of the token", alias="totalSupply"
    )
    logo_uri: StrictStr | None = Field(description="URI of the token's logo", alias="logoUri")
    price_usd: StrictFloat | StrictInt = Field(
        description="Price of token in USD", alias="priceUsd"
    )
    volume1_hr_usd: StrictFloat | StrictInt = Field(
        description="1 hour volume in USD", alias="volume1HrUsd"
    )
    volume24_hr_usd: StrictFloat | StrictInt = Field(
        description="24 hour volume in USD", alias="volume24HrUsd"
    )
    market_cap_usd: StrictFloat | StrictInt = Field(
        description="Token market cap in USD", alias="marketCapUsd"
    )
    __properties: ClassVar[list[str]] = [
        "address",
        "decimals",
        "name",
        "symbol",
        "totalSupply",
        "logoUri",
        "priceUsd",
        "volume1HrUsd",
        "volume24HrUsd",
        "marketCapUsd",
    ]

    @field_validator("address")
    def address_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^0x[a-fA-F0-9]{40}$", value):
            raise ValueError(r"must validate the regular expression /^0x[a-fA-F0-9]{40}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Token from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if logo_uri (nullable) is None
        # and model_fields_set contains the field
        if self.logo_uri is None and "logo_uri" in self.model_fields_set:
            _dict["logoUri"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Token from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "address": obj.get("address"),
                "decimals": obj.get("decimals"),
                "name": obj.get("name"),
                "symbol": obj.get("symbol"),
                "totalSupply": obj.get("totalSupply"),
                "logoUri": obj.get("logoUri"),
                "priceUsd": obj.get("priceUsd"),
                "volume1HrUsd": obj.get("volume1HrUsd"),
                "volume24HrUsd": obj.get("volume24HrUsd"),
                "marketCapUsd": obj.get("marketCapUsd"),
            }
        )
        return _obj

import functools
import hashlib
import inspect
from types import FunctionType
from typing import Callable, Coroutine, Any, TypeVar, cast

from cachetools import TTLCache

F = TypeVar("F", bound=Callable[..., Coroutine[Any, Any, Any]])

cache: TTLCache = TTLCache(maxsize=10_000, ttl=60 * 60 * 24)


def normalize_arguments(func: Callable[..., Any], *args, **kwargs) -> dict:
    """
    Normalize function arguments into a consistent kwargs dictionary.

    This ensures that calls with the same logical arguments but different
    positional/keyword formats produce the same result.
    Additionally, removes common instance/context arguments like 'self', 'cls', or 'client'.
    """
    sig = inspect.signature(func)
    bound = sig.bind(*args, **kwargs)
    bound.apply_defaults()

    skip_names = {"self", "cls", "client"}
    return {k: v for k, v in bound.arguments.items() if k not in skip_names}


def make_args_key(func: Callable[..., Any], *args, **kwargs) -> str:
    """
    Create a stable cache key based on the function's fully qualified name and normalized arguments.

    The key includes:
    - The function's module.
    - The function's qualified name.
    - Normalized and sorted arguments.
    """
    real_func = cast(FunctionType, func)
    normalized = normalize_arguments(real_func, *args, **kwargs)
    key_string = f"{real_func.__module__}.{real_func.__qualname__}:{sorted(normalized.items())}"
    return hashlib.sha256(key_string.encode()).hexdigest()


def async_cache() -> Callable[[F], F]:
    """
    Decorator for caching asynchronous functions using a TTL cache.

    The cache key is generated by normalizing the function's arguments
    (regardless of whether they are passed positionally or as keywords)
    and including the function's fully qualified name.
    """

    def decorator(func: F) -> F:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            key = make_args_key(func, *args, **kwargs)

            if key in cache:
                return cache[key]

            result = await func(*args, **kwargs)
            cache[key] = result
            return result

        return cast(F, wrapper)

    return decorator

import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import datetime
from decimal import Decimal
from dojo import money as money
from dojo.network import BaseBackend as BaseBackend, ForkedBackend as ForkedBackend, LocalBackend as LocalBackend, constants as constants
from dojo.observations import BaseObservation as BaseObservation
from typing import Any, Generic, TypeVar
from web3.types import PendingTx as PendingTx

@dataclass
class _MonitoringAccount:
    address: str
    def __init__(self, address) -> None: ...

logger: Incomplete
Observation = TypeVar('Observation', bound=BaseObservation)

class BaseAgent(ABC, Generic[Observation], metaclass=abc.ABCMeta):
    id: int
    DEFAULT_ETH: Incomplete
    policy: Incomplete
    unit_token: Incomplete
    name: Incomplete
    initial_portfolio: Incomplete
    write_results: Incomplete
    account: Incomplete
    original_address: Incomplete
    def __init__(self, initial_portfolio: dict[str, Decimal], policy: Any, name: str | None = None, write_results: bool = True, unit_token: str = 'USDC') -> None: ...
    backend: Incomplete
    def set_backend(self, backend: BaseBackend) -> None: ...
    def set_id(self, id: int) -> None: ...
    def cache(self, token_data: dict[str, dict[datetime, Decimal]]) -> None: ...
    def add_asset(self, asset: str) -> None: ...
    def add_nft(self, token: str, token_id: int) -> None: ...
    def impersonate_web3_account(self, impersonate_address: str) -> None: ...
    def create_web3_account(self) -> None: ...
    def quantity(self, token: str) -> Decimal: ...
    def portfolio(self) -> dict[str, Decimal]: ...
    def erc20_portfolio(self) -> dict[str, Decimal]: ...
    def erc721_portfolio(self) -> dict[str, list[int]]: ...
    def wealth(self, date: datetime) -> Decimal: ...
    def erc20_wealth(self, date: datetime) -> Decimal: ...
    def fund_erc20(self, token: str, source: str, quantity: Decimal | int) -> None: ...
    def fund_erc721(self, token: str, token_id: int, source: str) -> None: ...
    def fund_eth(self, quantity: Decimal) -> None: ...
    def setup(self) -> None: ...
    def setup_live(self) -> None: ...
    def approve(self, grantee: str, token: str) -> PendingTx: ...
    @abstractmethod
    def reward(self, obs: Observation) -> float: ...

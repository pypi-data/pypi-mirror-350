import websockets.legacy.server
from _typeshed import Incomplete
from dojo.external_data_providers.protobuf.dashboard.v1.data_pb2 import AgentParams as AgentParams, Block as Block, BlockData as BlockData, ClientData as ClientData, FileChunk as FileChunk, Params as Params, Pool as Pool, ServerData as ServerData
from pathlib import Path
from typing import Any

logger: Incomplete
SEND_EVERY: int

class _DashboardDriver:
    start_block: Incomplete
    end_block: Incomplete
    db_path: Incomplete
    port: Incomplete
    connected_clients: Incomplete
    clients_waiting_to_save: Incomplete
    stop_event: Incomplete
    stop_confirmed_event: Incomplete
    start_time: Incomplete
    auto_close: Incomplete
    def __init__(self, start_block: int, end_block: int, db_path: Path, port: int, auto_close: bool = True) -> None: ...
    process: Incomplete
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def start_websocket_server(self) -> None: ...
    async def websocket_handler(self, websocket: websockets.legacy.server.WebSocketServerProtocol) -> None: ...
    async def run_data_sender_loop(self, last_block_id: int | None) -> None: ...
    async def send_database_file_to_client(self, client: Any, title: Any, description: Any, bookmarks: Any) -> None: ...
    async def onboard_client(self, websocket: websockets.legacy.server.WebSocketServerProtocol, last_block_id: int | None) -> None: ...
    def format_data(self, block_data: list[tuple[Any]], last_block_id: int | None = None, params: Any | None = None, agents: list[tuple[Any]] | None = None, pools: list[tuple[Any]] | None = None) -> tuple[ServerData, int | None]: ...
    def get_params(self) -> Any: ...
    def get_agents(self) -> list[tuple[Any]]: ...
    def get_pools(self) -> list[tuple[Any]]: ...
    def get_block_data(self, last_block_id: int | None) -> list[tuple[Any]]: ...
    def get_progress(self, block: int) -> float: ...
    def get_estimated_seconds_remaining(self, progress: int) -> int | None: ...

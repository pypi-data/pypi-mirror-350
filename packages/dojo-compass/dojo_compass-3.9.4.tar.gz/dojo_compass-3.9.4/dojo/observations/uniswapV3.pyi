from _typeshed import Incomplete
from decimal import Decimal
from dojo import money as money
from dojo.common import utils as utils
from dojo.network.base_backend import BaseBackend as BaseBackend
from dojo.network.constants import MAX_UINT128 as MAX_UINT128
from dojo.observations.base_observation import BaseObservation as BaseObservation
from typing import Any, TypedDict

def get_pool_fee(backend: BaseBackend, pool: str) -> int: ...
def tick_to_sqrt_priceX96(tick: int) -> int: ...
def sqrt_priceX96_to_price(sqrt_priceX96: int, decimals: tuple[int, int]) -> Decimal: ...
def price_to_sqrt_priceX96(price: Decimal) -> int: ...
def sqrt_priceX96_to_tick_range(sqrt_priceX96: int, tick_spacing: int) -> tuple[int, int]: ...
def sqrt_priceX96_to_tick(sqrt_priceX96: int) -> int: ...
def price_to_tick_range(price: Decimal, tick_spacing: int, decimals: tuple[int, int]) -> tuple[int, int]: ...
def price_to_tick(price: Decimal, decimals: tuple[int, int]) -> int: ...
def price_to_active_tick(price: Decimal, tick_spacing: int, decimals: tuple[int, int]) -> int: ...
def price_wrt_range(sqrt_priceX96: int, tick_lower: int, tick_upper: int) -> int: ...
def get_real_quantity0(liquidity: int, lower_sqrt_priceX96: int, upper_sqrt_priceX96: int, round_up: bool) -> int: ...
def get_real_quantity1(liquidity: int, lower_sqrt_priceX96: int, upper_sqrt_priceX96: int, round_up: bool) -> int: ...
def get_real_quantities(sqrt_priceX96: int, liquidity: int, tick_lower: int, tick_upper: int, round_up: bool = True) -> tuple[int, int]: ...
def batch_get_real_quantities(sqrt_priceX96: int, liquidities: list[int], lower_ticks: list[int]) -> list[tuple[int, int]]: ...
def get_virtual_quantities(real_quantities: tuple[int, int], liquidity: int, lower_tick: int, upper_tick: int) -> tuple[int, int]: ...
def get_liquidity0(lower_sqrt_priceX96: int, uppper_sqrt_priceX96: int, real_quantity0: int) -> int: ...
def get_liquidity1(lower_sqrt_priceX96: int, uppper_sqrt_priceX96: int, real_quantity1: int) -> int: ...
def get_liquidity(sqrt_priceX96: int, real_quantities: tuple[int, int], tick_lower: int, tick_upper: int) -> int: ...
def get_quantity0_delta(lower_sqrt_priceX96: int, upper_sqrt_priceX96: int, liquidity_change: int) -> int: ...
def get_quantity1_delta(lower_sqrt_priceX96: int, upper_sqrt_priceX96: int, liquidity_change: int) -> int: ...

class UniswapV3Observation(BaseObservation):
    POOL_SIZE: int
    pools: Incomplete
    trading_volumes: Incomplete
    def __init__(self, pools: list[str], backend: BaseBackend) -> None: ...
    def pool_token_addresses(self, pool: str) -> tuple[str, str]: ...
    def pool_tokens(self, pool: str) -> tuple[str, str]: ...
    def tick_spacing(self, pool: str) -> int: ...
    def active_tick_range(self, pool: str) -> tuple[int, int]: ...
    def slot0(self, pool: str) -> list[Any]: ...
    def liquidity(self, pool: str) -> int: ...
    def ticks(self, pool: str, tick: int) -> tuple[int, int, int, int, int, int, int, bool]: ...
    def pool_positions(self, pool: str, owner: str, tick_lower: int, tick_upper: int) -> dict[str, Any]: ...
    class _PositionInfo(TypedDict):
        nonce: int
        operator: str
        token0: str
        token1: str
        fee: int
        tick_lower: int
        tick_upper: int
        liquidity: int
        fee_growth_inside0_lastX128: int
        fee_growth_inside1_lastX128: int
        tokens_owed_0: Decimal
        tokens_owed_1: Decimal
    def nft_position_info(self, token_id: int) -> _PositionInfo: ...
    def nft_positions(self, token_id: int) -> dict[str, Any]: ...
    def lp_fees(self, token_ids: list[int]) -> dict[str, Decimal]: ...
    def lp_quantities(self, token_ids: list[int]) -> dict[str, Decimal]: ...
    def lp_portfolio(self, token_ids: list[int]) -> dict[str, Decimal]: ...
    def tokens(self) -> list[str]: ...
    def market_agent_tokens(self) -> list[str]: ...
    def token_addresses(self) -> list[str]: ...
    def tick_liquidities(self, pool: str, from_tick: int, to_tick: int) -> dict[str, Any]: ...
    def pool_fee(self, pool: str) -> Decimal: ...
    def protocol_fees(self, pool: str) -> tuple[Decimal, Decimal]: ...
    def price(self, token: str, unit: str, pool: str) -> Decimal: ...

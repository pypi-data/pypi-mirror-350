from _typeshed import Incomplete
from collections import defaultdict
from decimal import Decimal
from dojo.models.gmxV2.market import Market as Market, MarketVenue as MarketVenue
from dojo.models.gmxV2.market_info import MarketInfo as MarketInfo
from dojo.models.gmxV2.market_token import MarketPoolValueInfo as MarketPoolValueInfo
from dojo.models.gmxV2.position import Position as Position, PositionPnl as PositionPnl
from dojo.network.base_backend import BaseBackend as BaseBackend
from dojo.network.constants import GMX_ORACLE_PRECISION as GMX_ORACLE_PRECISION, ZERO_ADDRESS as ZERO_ADDRESS
from dojo.observations.base_observation import BaseObservation as BaseObservation
from dojo.utils.gmxV2.keys import MAX_PNL_FACTOR_FOR_DEPOSITS as MAX_PNL_FACTOR_FOR_DEPOSITS, MAX_PNL_FACTOR_FOR_TRADERS as MAX_PNL_FACTOR_FOR_TRADERS, MAX_PNL_FACTOR_FOR_WITHDRAWALS as MAX_PNL_FACTOR_FOR_WITHDRAWALS
from enum import Enum
from hexbytes import HexBytes as HexBytes
from typing import Any

class PriceType(Enum):
    MIN = 'MIN'
    MAX = 'MAX'
    MEAN = 'MEAN'

class GmxV2Observation(BaseObservation):
    market_venues: Incomplete
    market_tokens: Incomplete
    market_dict: Incomplete
    market_token_address_to_market: Incomplete
    def __init__(self, market_venues: list[MarketVenue], backend: BaseBackend) -> None: ...
    def total_trader_pnl(self, address: str) -> Decimal: ...
    def tokens(self) -> list[str]: ...
    def market_agent_tokens(self) -> list[str]: ...
    oracle_prices: Incomplete
    def set_oracle_prices(self, oracle_prices: defaultdict[int, dict[str, Any]]) -> None: ...
    def get_market(self, market_key: str) -> Market: ...
    def get_account_positions(self, account: str) -> list[Position]: ...
    def get_token_price_by_token_symbol(self, token_symbol: str) -> Decimal: ...
    def get_token_price_by_token_address(self, token_address: str, price_type: PriceType = ...) -> Decimal: ...
    def index_token_price(self, market_key: str) -> Decimal: ...
    def index_token_price_min(self, market_key: str) -> Decimal: ...
    def index_token_price_max(self, market_key: str) -> Decimal: ...
    def long_token_price(self, market_key: str) -> Decimal: ...
    def short_token_price(self, market_key: str) -> Decimal: ...
    def get_position(self, position_key: HexBytes) -> Position: ...
    def get_market_token_price_for_traders(self, market_key: str, maximize: bool) -> tuple[Decimal, MarketPoolValueInfo]: ...
    def get_market_token_price_for_deposit(self, market_key: str, maximize: bool) -> tuple[Decimal, MarketPoolValueInfo]: ...
    def get_market_token_price_for_withdraw(self, market_key: str, maximize: bool) -> tuple[Decimal, MarketPoolValueInfo]: ...
    def get_position_pnl_usd(self, position: Position) -> PositionPnl: ...
    def get_net_pnl(self, market_key: str, maximize: bool) -> Decimal: ...
    def get_pnl(self, market_key: str, is_long: bool, maximize: bool) -> Decimal: ...
    def get_open_interest_with_pnl(self, market_key: str, is_long: bool, maximize: bool) -> Decimal: ...
    def get_market_info(self, market_key: str) -> MarketInfo: ...
    def get_deposit_amount_out(self, market_key: str, long_token_amount: int, short_token_amount: int, include_virtual_inventory_impact: bool) -> Any: ...

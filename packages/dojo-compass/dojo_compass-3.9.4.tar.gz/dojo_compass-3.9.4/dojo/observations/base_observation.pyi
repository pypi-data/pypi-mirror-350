import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from decimal import Decimal
from dojo import money as money
from dojo.network import BaseBackend as BaseBackend

class BaseObservation(ABC, metaclass=abc.ABCMeta):
    backend: Incomplete
    chain: Incomplete
    date: Incomplete
    block: Incomplete
    def __init__(self, backend: BaseBackend) -> None: ...
    @property
    def signals(self) -> dict[str, float]: ...
    def add_signal(self, name: str, value: float | int | Decimal) -> None: ...
    def add_block_fees(self, fees: list[int | None]) -> None: ...
    @abstractmethod
    def tokens(self) -> list[str]: ...
    @abstractmethod
    def market_agent_tokens(self) -> list[str]: ...
    def token_decimals(self, token: str) -> int: ...
    def token_symbol(self, address: str) -> str: ...
    def fee_history(self, block_count: int = 1) -> list[list[int | None]]: ...

from _typeshed import Incomplete
from dataclasses import dataclass
from dojo.common.constants import Chain as Chain
from typing import Any

DATA_DIR: Incomplete
DEBUG_ENV_VAR: str

@dataclass
class NetworkConfig:
    arbitrum_rpc_url: str | None
    ethereum_rpc_url: str | None
    gnosis_rpc_url: str | None
    database_address: str
    deployments: dict[str, dict[str, dict[str, dict[str, Any]]]]
    runtime_bytecodes: dict[str, str]
    abis: dict[str, list[dict[Any, Any]]]
    bytecodes: dict[str, str]
    creation_codes: dict[str, str]
    allow_bad_archive_node: bool = ...
    def rpc_url(self, chain: Chain) -> str: ...
    __annotations__ = ...
    def __init__(self, arbitrum_rpc_url, ethereum_rpc_url, gnosis_rpc_url, database_address, deployments, runtime_bytecodes, abis, bytecodes, creation_codes, allow_bad_archive_node=...) -> None: ...

@dataclass
class AuthConfig:
    license_key: str
    __annotations__ = ...
    def __init__(self, license_key) -> None: ...

@dataclass
class Config:
    network: NetworkConfig
    auth: AuthConfig
    debug: bool
    __annotations__ = ...
    def __init__(self, network, auth, debug) -> None: ...

def load_abis() -> dict[str, list[dict[Any, Any]]]: ...
def load_bytecodes() -> dict[str, str]: ...
def load_runtime_bytecodes() -> dict[str, str]: ...
def load_creation_codes() -> dict[str, str]: ...
def load_network_cfg() -> NetworkConfig: ...
def load_auth_cfg() -> AuthConfig: ...
def load_debug() -> bool: ...
def load_cfg() -> Config: ...

?repl_input: chunk | exp

chunk: block

block: stat* [retstat]

?stat: ";" -> stat_empty
     | varlist "=" explist -> stat_assignment
     | functioncall
     | label
     | BREAK -> stat_break
     | GOTO NAME -> stat_goto
     | DO block END -> stat_do
     | WHILE exp DO block END -> stat_while
     | REPEAT block UNTIL exp -> stat_repeat
     | stat_if
     | FOR NAME "=" exp "," exp ["," exp] DO block END -> stat_for
     | FOR namelist IN explist DO block END -> stat_forin
     | FUNCTION funcname funcbody -> stat_function
     | LOCAL FUNCTION NAME funcbody -> stat_localfunction
     | LOCAL attnamelist ["=" explist] -> stat_localassignment

stat_if: "if" exp "then" block elseif* [else] "end"
elseif: "elseif" exp "then" block
?else: "else" block

attnamelist: attname ("," attname)*
attname: NAME attrib
attrib: ["<" NAME ">"]

retstat: RETURN [explist] [";"]

label: DOUBLECOLON NAME DOUBLECOLON
DOUBLECOLON: "::"

funcname: NAME ("." NAME)* [":" NAME]

varlist: var ("," var)*
var: NAME -> var_name
   | prefixexp "[" exp "]" -> var_index
   | prefixexp "." NAME -> var_index

namelist: NAME ("," NAME)*

explist: explist_entry ("," explist_entry)*
?explist_entry: var | functioncall | exp

?exp: NIL -> exp_nil
    | FALSE -> exp_false
    | TRUE -> exp_true
    | numeral
    | LITERALSTRING -> literalstring
    | ELLIPSIS -> exp_vararg
    | "function" funcbody -> exp_functiondef
    | tableconstructor
    | exp "or" exp -> exp_logical_or
    | exp "and" exp -> exp_logical_and
    | exp cmp_op exp -> exp_cmp
    | exp "|" exp -> exp_bit_or
    | exp "~" exp -> exp_bit_xor
    | exp "&" exp -> exp_bit_and
    | exp shift_op exp -> exp_bit_shift
    | exp DOUBLEDOT exp -> exp_concat
    | exp sumop exp -> exp_sum
    | exp productop exp -> exp_product
    | unop exp -> exp_unop
    | exp "^" exp -> exp_pow
    | prefixexp
?prefixexp: var
          | functioncall
          | "(" exp ")" -> exp_parenthesized

functioncall: prefixexp args -> functioncall_regular
            | prefixexp ":" NAME args -> functioncall_method
args: "(" [explist] ")" -> args_list
    | tableconstructor -> args_value
    | LITERALSTRING -> args_value

funcbody: "(" [parlist] ")" block END
parlist: namelist
       | namelist "," ELLIPSIS -> parlist_vararg
       | ELLIPSIS -> parlist_vararg_only
ELLIPSIS: "..."

tableconstructor: "{" [fieldlist] "}"
fieldlist: field (fieldsep field)* [fieldsep]
field: "[" exp "]" "=" exp -> field_with_key
     | NAME "=" exp -> field_with_key
     | exp -> field_counter_key
fieldsep: "," | ";"

!cmp_op: "<" | "<=" | ">" | ">=" | "==" | "~="
LT: "<"
LE: "<="
GT: ">"
GE: ">="
EQ: "=="
NE: "~="
!shift_op: SR | SL
SR: ">>"
SL: "<<"
!sumop: "+" | "-"
!productop: "*" | "/" | DOUBLESLASH | "%"
DOUBLESLASH: "//"
!unop: "-" | "not" | "#" | "~"

NAME.-1: /(?!and$|break$|do$|else$|elseif$|end$|false$|for$|function$|goto$|if$|in$|local$|nil$|not$|or$|repeat$|return$|then$|true$|until$|while$)[a-zA-Z_][a-zA-Z_0-9]*/
LITERALSTRING: /"([^"\\]|\\.)*"|'([^'\\]|\\.)*'|(\[(=*)\[(.|\n)*?\]\4\])/
?numeral: numeral_hex | numeral_dec

!sign: "+" | "-"
numeral_hex: ZERO X HEXDIGITS ["." HEXDIGITS] [P [sign] HEXDIGITS]
ZERO: "0"
X: "x" | "X"
P: "p" | "P"
numeral_dec: DIGITS ["." DIGITS] [E [sign] DIGITS]
E: "e" | "E"
HEXDIGITS: /[0-9a-fA-F]+/
DIGITS: /[0-9]+/
DOUBLEDOT: ".."

AND: "and"
BREAK: "break"
DO: "do"
ELSE: "else"
ELSEIF: "elseif"
END: "end"
FALSE: "false"
FOR: "for"
FUNCTION: "function"
GOTO: "goto"
IF: "if"
IN: "in"
LOCAL: "local"
NIL: "nil"
NOT: "not"
OR: "or"
REPEAT: "repeat"
RETURN: "return"
THEN: "then"
TRUE: "true"
UNTIL: "until"
WHILE: "while"

%import common.WS
%ignore WS

# A comment starts with a double hyphen (--) anywhere outside a string.
# If the text immediately after -- is not an opening long bracket,
# the comment is a short comment, which runs until the end of the line.
%ignore /--[^\n]*\n/

# Otherwise, it is a long comment, which runs until the corresponding closing
# long bracket.
%ignore /--\[(=*)\[[\s\S]*?\]\1\]/

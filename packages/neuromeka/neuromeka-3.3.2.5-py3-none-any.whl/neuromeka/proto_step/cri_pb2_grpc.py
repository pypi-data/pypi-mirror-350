# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_msgs_pb2 as common__msgs__pb2
import cri_pb2 as cri__pb2


class CRIStub(object):
    """////////////////////////CRI/////////////////////////
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetActivate = channel.unary_unary(
                '/Nrmk.IndyFramework.CRI/SetActivate',
                request_serializer=common__msgs__pb2.State.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.IsActivate = channel.unary_unary(
                '/Nrmk.IndyFramework.CRI/IsActivate',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=common__msgs__pb2.State.FromString,
                )
        self.Login = channel.unary_unary(
                '/Nrmk.IndyFramework.CRI/Login',
                request_serializer=cri__pb2.Account.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.IsLogin = channel.unary_unary(
                '/Nrmk.IndyFramework.CRI/IsLogin',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=common__msgs__pb2.State.FromString,
                )
        self.SetTarget = channel.unary_unary(
                '/Nrmk.IndyFramework.CRI/SetTarget',
                request_serializer=cri__pb2.CriTarget.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.SetOption = channel.unary_unary(
                '/Nrmk.IndyFramework.CRI/SetOption',
                request_serializer=common__msgs__pb2.State.SerializeToString,
                response_deserializer=common__msgs__pb2.Response.FromString,
                )
        self.GetProjList = channel.unary_unary(
                '/Nrmk.IndyFramework.CRI/GetProjList',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=cri__pb2.ProjectList.FromString,
                )
        self.GetCRI = channel.unary_unary(
                '/Nrmk.IndyFramework.CRI/GetCRI',
                request_serializer=common__msgs__pb2.Empty.SerializeToString,
                response_deserializer=cri__pb2.CriData.FromString,
                )


class CRIServicer(object):
    """////////////////////////CRI/////////////////////////
    """

    def SetActivate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsActivate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTarget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProjList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCRI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CRIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetActivate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActivate,
                    request_deserializer=common__msgs__pb2.State.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'IsActivate': grpc.unary_unary_rpc_method_handler(
                    servicer.IsActivate,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=common__msgs__pb2.State.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=cri__pb2.Account.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'IsLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.IsLogin,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=common__msgs__pb2.State.SerializeToString,
            ),
            'SetTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTarget,
                    request_deserializer=cri__pb2.CriTarget.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'SetOption': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOption,
                    request_deserializer=common__msgs__pb2.State.FromString,
                    response_serializer=common__msgs__pb2.Response.SerializeToString,
            ),
            'GetProjList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProjList,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=cri__pb2.ProjectList.SerializeToString,
            ),
            'GetCRI': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCRI,
                    request_deserializer=common__msgs__pb2.Empty.FromString,
                    response_serializer=cri__pb2.CriData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Nrmk.IndyFramework.CRI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CRI(object):
    """////////////////////////CRI/////////////////////////
    """

    @staticmethod
    def SetActivate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.CRI/SetActivate',
            common__msgs__pb2.State.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsActivate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.CRI/IsActivate',
            common__msgs__pb2.Empty.SerializeToString,
            common__msgs__pb2.State.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.CRI/Login',
            cri__pb2.Account.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.CRI/IsLogin',
            common__msgs__pb2.Empty.SerializeToString,
            common__msgs__pb2.State.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.CRI/SetTarget',
            cri__pb2.CriTarget.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.CRI/SetOption',
            common__msgs__pb2.State.SerializeToString,
            common__msgs__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProjList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.CRI/GetProjList',
            common__msgs__pb2.Empty.SerializeToString,
            cri__pb2.ProjectList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCRI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nrmk.IndyFramework.CRI/GetCRI',
            common__msgs__pb2.Empty.SerializeToString,
            cri__pb2.CriData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

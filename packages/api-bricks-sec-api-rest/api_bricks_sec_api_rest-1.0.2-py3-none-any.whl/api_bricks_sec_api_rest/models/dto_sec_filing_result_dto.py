# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DTOSecFilingResultDto(BaseModel):
    """
    DTOSecFilingResultDto
    """ # noqa: E501
    accession_number: Optional[StrictStr] = None
    form_type: Optional[StrictStr] = None
    filing_date: Optional[date] = None
    company_name: Optional[StrictStr] = None
    cik: Optional[StrictInt] = None
    document_filename: Optional[StrictStr] = None
    document_description: Optional[StrictStr] = None
    source_file: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accession_number", "form_type", "filing_date", "company_name", "cik", "document_filename", "document_description", "source_file"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DTOSecFilingResultDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if accession_number (nullable) is None
        # and model_fields_set contains the field
        if self.accession_number is None and "accession_number" in self.model_fields_set:
            _dict['accession_number'] = None

        # set to None if form_type (nullable) is None
        # and model_fields_set contains the field
        if self.form_type is None and "form_type" in self.model_fields_set:
            _dict['form_type'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['company_name'] = None

        # set to None if document_filename (nullable) is None
        # and model_fields_set contains the field
        if self.document_filename is None and "document_filename" in self.model_fields_set:
            _dict['document_filename'] = None

        # set to None if document_description (nullable) is None
        # and model_fields_set contains the field
        if self.document_description is None and "document_description" in self.model_fields_set:
            _dict['document_description'] = None

        # set to None if source_file (nullable) is None
        # and model_fields_set contains the field
        if self.source_file is None and "source_file" in self.model_fields_set:
            _dict['source_file'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DTOSecFilingResultDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accession_number": obj.get("accession_number"),
            "form_type": obj.get("form_type"),
            "filing_date": obj.get("filing_date"),
            "company_name": obj.get("company_name"),
            "cik": obj.get("cik"),
            "document_filename": obj.get("document_filename"),
            "document_description": obj.get("document_description"),
            "source_file": obj.get("source_file")
        })
        return _obj



[build-system]
requires = ["setuptools>=62.3.0", "setuptools-git-versioning>=2.0,<3"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = { "real_robot" = "real_robot" }
package-data = { "real_robot" = ["assets/**"] }
exclude-package-data = { "*" = ["*.convex.stl"] }

[project]
name = "real_robot"
dynamic = ["version"]
dependencies = ["numpy", "loguru>=0.7.3"]
requires-python = ">=3.9"
authors = [{ name = "Kolin Guo", email = "guokolin@gmail.com" }]
description = "Real robot interface and utilities for asynchronous real-time deployment."
readme = "README.md"
license = "MIT"
keywords = ["robotics", "sensor", "visualization", "control"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Operating System :: POSIX :: Linux",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Other Audience",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Framework :: Robot Framework :: Library",
  "Framework :: Robot Framework :: Tool",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Education",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering",
  "Topic :: Utilities",
]

[project.optional-dependencies]
vis = [
  "opencv-python",
  "Pillow",
  "scipy>=1.10.0",
  "open3d>=0.17.0", # for visualization
  "pynput",         # monitor keyboard event
]
vis_all = ["real_robot[vis]", "urchin"]
all = [
  "real_robot[vis_all]",
  "pyrealsense2==2.54.2.5684", # L515 support
  "gymnasium",
  "transforms3d",
  "opencv-contrib-python",     # cv2.rgbd.registerDepth()
  "sapien~=3.0.0.dev",         # for sapien.Pose and simsense
]

[project.urls]
Repository = "https://github.com/KolinGuo/RealRobot"

[tool.setuptools-git-versioning]
enabled = true
version_file = "VERSION"
count_commits_from_version_file = true
dev_template = "{tag}.dev{timestamp:%Y%m%d}+git.{sha}"
dirty_template = "{tag}"
tag_filter = "v.*"

[tool.ruff]
line-length = 88
preview = true                                   # for certain rules and black preview behavior
exclude = ["3rd_party", "pyrealsense2_examples"]

[tool.ruff.lint]
select = [
  "F",       # Flake8
  "E",       # pycodestyle
  "W",       # pycodestyle
  "I",       # isort
  "UP",      # pyupgrade
  "B",       # flake8-bugbear
  "C4",      # flake8-comprehensions
  "EXE",     # flake8-executable
  "G",       # flake8-logging-format
  "SIM",     # flake8-simplify
  "NPY",     # NumPy
  "PERF",    # Perflint
  "PGH004",  # no bare noqa
  "PIE794",
  "PIE800",
  "PIE804",
  "PIE807",
  "PIE810",
  "PLC0131", # type bivariance
  "PLC0132", # type param mismatch
  "PLC0205", # string as __slots__
  "PLE",
  "PLR0133", # constant comparison
  "PLR0206", # property with params
  "PLR1722", # use sys exit
  "PLW0129", # assert on string literal
  "PLW0406", # import self
  "PLW0711", # binary op exception
  "PLW1509", # preexec_fn not safe with threads
  "PLW3301", # nested min max
  "PT006",   # flake8-pytest-style
  "PT022",
  "PT023",
  "PT024",
  "PT025",
  "PT026",
  "PYI",     # flake8-pyi
  "TRY302",
  "RUF008",  # mutable dataclass default
  "RUF013",  # implicit typing.Optional is disallowed
  "RUF015",  # access first ele in constant time
  "RUF016",  # type error non-integer index
  "RUF017",  # avoid quadratic list summation
]
ignore = [
  "B007",   # unused-loop-control-variable
  "B008",   # function-call-in-default-argument
  "UP045",  # allow typing.Optional[int], instead of forcing int | None
  "EXE002", # ntfs has no executable bit
  "SIM105", # allow try-except-pass blocks
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "F401", # unused import
  "E402", # Module level import not at top of file
]
"*.pyi" = [
  "F821",   # allow undefined name
  "E501",   # line too long
  "PYI001", # allow TypeVar name without '_' prefix
  "PYI021", # allow docstrings in stub files
  "PYI029", # allow __str__ and __repr__ in stubs
  "PYI032", # allow typing.Any annotations for __eq__ and __ne__
  "PYI054", # allow long numeric literals
]

[tool.ruff.format]
docstring-code-format = true

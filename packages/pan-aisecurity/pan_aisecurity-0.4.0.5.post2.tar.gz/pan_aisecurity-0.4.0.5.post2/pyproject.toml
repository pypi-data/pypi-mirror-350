####################
# Project Metadata #
####################
[project]
name = "pan-aisecurity"
description = "Palo Alto Networks AI Runtime Security: API Intercept Python SDK"
requires-python = ">= 3.9"
authors = [
  { name = "Palo Alto Networks AI Runtime Security SDK Team", email = "dl-airs-api-sdk@paloaltonetworks.com" },
]
License-Expression = "LicenseRef-PolyForm-Internal-Use-License-1.0.0"
License-File = [
  "LICENSE"
]
readme = "README.md"
keywords = [
  "PaloAltoNetworks",
  "Palo Alto Networks",
  "AI Security",
  "AI Runtime Security",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: Other/Proprietary License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Typing :: Typed",
]
include = [
  "asyncio_openapi_client/py.typed",
  "openapi_client/py.typed",
]

dynamic = [
  "version",
]

dependencies = [
  "aiodns>=1.1",
  "aiohttp ~= 3.11",
  "aiohttp-retry ~= 2.9",
  "arrow ~= 1.3",
  "pydantic >= 2",
  "python-dateutil~=2.8",
  "singleton-decorator ~= 1.0",
  "typing-extensions ~= 4.7",
  "urllib3 ~= 2.2",
]

[dependency-groups]
dev = [
  "coverage[toml]",
  "mypy >= 1.5",
  "pytest >= 8.3",
  "pytest-cov >= 6.0",
  "types-python-dateutil >= 2.8",
  "rich",
  "readme-renderer[md]",
  "httpx[http2]",
  "google-auth",
  "requests",
  "truststore; python_full_version >= '3.10'",
  "packaging",
  "versioningit",
  "python-dotenv",
  "pytest-asyncio",
  "fastmcp; python_full_version >= '3.10'",
  "mcp; python_full_version >= '3.10'",
]

[project.urls]
Homepage = "https://www.paloaltonetworks.com/prisma/prisma-ai-runtime-security"
Documentation = "https://pan.dev/ai-runtime-security/scan/api/"

###########################
# Build System: Hatchling #
###########################
[build-system]
requires = [
  "hatchling",
  "versioningit",
]
build-backend = "hatchling.build"

# Define sdist package includes/excludes
[tool.hatch.build.targets.sdist]
ignore-vcs = true
only-include = [
  "aisecurity/",
  "README.md",
  "CHANGELOG.md",
  "py.typed",
]
exclude = [
  ".openapi-generator",
]

# Define wheel package includes/excludes
[tool.hatch.build.targets.wheel]
packages = [
  "aisecurity",
]
exclude = [
  ".openapi-generator",
  "aisecurity/generated_openapi_client/docs",
]

# Hatch/versioningit dynamically reads build version from git tags
[tool.hatch.version]
source = "versioningit"

# Use UV with Hatch for dependency management (instead of virtualenv/pip) in all environments
[tool.hatch.envs.default]
installer = "uv"
# Use optional dependencies in test environments
features = []

#
# Automatic Versioning using Git Tags
# https://versioningit.readthedocs.io/en/stable/index.html
#
[tool.versioningit.next-version]
method = "smallest-release"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}+{rev}"
# Example formatted version: 1.2.4.dev42+ge174a1f

dirty = "{base_version}+d{build_date:%Y%m%d}"
# Example formatted version: 1.2.3+d20230922

distance-dirty = "{base_version}.dev{distance}+{rev}.d{build_date:%Y%m%d}"
# Example formatted version: 1.2.4.dev42+ge174a1f.d20230922

[tool.versioningit.write]
file = "aisecurity/_version.py"

[tool.hatch.build.hooks.versioningit-onbuild]
source-file = "aisecurity/_version.py"
build-file = "aisecurity/_version.py"
require-match = false
append-line = "__version__ = \"{version}\""

#########################
# Code Testing Coverage #
#########################

# Quick Test
# $ hatch test
[tool.hatch.envs.hatch-test]
extra-args = ["-vv"]
randomize = true
parallel = true
features = []
# Defaults
# https://hatch.pypa.io/latest/config/internal/testing/#scripts
[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} --ignore=tests/aisecurity/functional {args}"
cov-combine = "coverage combine"
cov-report = "coverage report"

[[tool.hatch.envs.hatch-test.matrix]]
# https://devguide.python.org/versions/
python = [
  "3.9",
  "3.10",
  "3.11",
  "3.12",
  "3.13",
]

[tool.hatch.envs.full-test.scripts]
coverage = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=aisecurity --cov=tests --ignore=tests/aisecurity/functional'

[tool.coverage.run]
source_pkgs = ["aisecurity", "tests"]
branch = true
parallel = true
omit = [
  "aisecurity/_version.py",
  "aisecurity/generated_openapi_client/models/*",
  "aisecurity/generated_openapi_client/asyncio/*.py",
  "aisecurity/generated_openapi_client/urllib3/*.py",
  "tests/aisecurity/generated_openapi_client/models/*",
  "tests/aisecurity/functional/*"
]

[tool.coverage.paths]
aisecurity = ["aisecurity"]
tests = [
  "tests",
]
omit = [
  "tests/aisecurity/functional/",
  "tests/aisecurity/performance/",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

########################
# MyPy - Type Checking #
########################
[tool.hatch.envs.mypy]
# Use dev dependencies in mypy environment
features = []
[tool.hatch.envs.mypy.scripts]
check = "mypy --no-install-types aisecurity tests"

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
packages = [
  "aisecurity",
  "tests",
]
strict = true

# List from: https://mypy.readthedocs.io/en/stable/existing_code.html#introduce-stricter-options
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

## Getting these passing should be easy
strict_equality = true
# strict_concatenate = true # deprecated

## Strongly recommend enabling this one as soon as you can
check_untyped_defs = true

## These shouldn't be too much additional work, but may be tricky to
## get passing if you use a lot of untyped libraries
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true

### These next few are various gradations of forcing use of type annotations
#disallow_untyped_calls = true
#disallow_incomplete_defs = true
#disallow_untyped_defs = true
#
### This one isn't too hard to get passing, but return on investment is lower
#no_implicit_reexport = true
#
### This one can be tricky to get passing if you use a lot of untyped libraries
#warn_return_any = true

#############################
# Bandit - Security Linting #
#############################
[tool.bandit]
exclude_dirs = [
  ".cache",
  ".venv",
  "bin",
  "dist",
  "reports",
  "tests",
  "venv",
]
skips = [
  "B104",
]

[[tool.uv.index]]
url = "https://pypi.org/simple"
default = true

import socket
from app.models import Application
from sqlalchemy.orm import Session
from contextlib import closing
import sys
import os
import subprocess
import json
from fastapi import WebSocket, WebSocketDisconnect
import datetime
import asyncio


def get_local_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # No importa si realmente se conecta
        s.connect(('10.255.255.255', 1))
        local_ip = s.getsockname()[0]
    except Exception:
        local_ip = '127.0.0.1'
    finally:
        s.close()
    return local_ip

def check_port_available(port):
    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:
        return sock.connect_ex(('localhost', port)) != 0

def is_port_assigned_in_db(db: Session, port: int, exclude_app_id: int = None):
    """
    Verifica si un puerto ya est√° asignado a alguna aplicaci√≥n en la base de datos,
    excluyendo opcionalmente una aplicaci√≥n espec√≠fica.
    """
    query = db.query(Application).filter(Application.port == port)
    
    if exclude_app_id is not None:
        query = query.filter(Application.id != exclude_app_id)
    
    return query.count() > 0

def find_available_port(db: Session, start_port=8000, end_port=9000, exclude_app_id: int = None):
    """
    Encuentra un puerto disponible que no est√© en uso en el sistema
    y que no est√© asignado a ninguna otra aplicaci√≥n en la base de datos.
    """
    for port in range(start_port, end_port):
        # Verificar si el puerto est√° disponible a nivel del sistema
        if check_port_available(port):
            # Verificar si el puerto ya est√° asignado en la base de datos
            if not is_port_assigned_in_db(db, port, exclude_app_id):
                return port
    return None

def detect_environments(project_directory=None):
    """
    Detecta entornos virtuales disponibles en el sistema y en el directorio del proyecto.
    
    Args:
        project_directory: Directorio del proyecto donde buscar entornos locales
    """
    environments = {
        "system": {
            "name": "Sistema (Global)",
            "path": sys.executable,
            "type": "system"
        }
    }
    
    # Primero, buscar entornos dentro del directorio del proyecto (prioridad alta)
    if project_directory and os.path.exists(project_directory):
        # Nombres comunes de carpetas de entorno virtual
        env_folders = ["venv", ".venv", "env", ".env", "virtualenv", "pyenv"]
        
        for folder in env_folders:
            env_path = os.path.join(project_directory, folder)
            
            # Verificar si existe el entorno
            if os.path.exists(env_path):
                # Determinar la ruta al ejecutable de Python
                if os.name == 'nt':  # Windows
                    python_bin = os.path.join(env_path, "Scripts", "python.exe")
                else:  # Unix/Mac
                    python_bin = os.path.join(env_path, "bin", "python")
                
                if os.path.exists(python_bin) and os.access(python_bin, os.X_OK):
                    env_id = f"local:{folder}"
                    environments[env_id] = {
                        "name": f"Entorno del proyecto ({folder})",
                        "path": env_path,
                        "type": "virtualenv",
                        "local": True,
                        "python_bin": python_bin
                    }
                    # Marcar este como preferido
                    environments[env_id]["preferred"] = True
    
    # Detectar entornos virtualenv
    # Buscar en ubicaciones comunes
    venv_paths = [
        os.path.expanduser("~/.virtualenvs"),  # virtualenvwrapper
        os.path.expanduser("~/venvs"),         # ubicaci√≥n com√∫n
        os.path.expanduser("~/virtualenvs"),   # otra ubicaci√≥n com√∫n
    ]
    
    for base_path in venv_paths:
        if os.path.exists(base_path):
            for env_name in os.listdir(base_path):
                env_path = os.path.join(base_path, env_name)
                python_bin = os.path.join(env_path, "bin", "python")
                if os.path.exists(python_bin) and os.access(python_bin, os.X_OK):
                    environments[f"virtualenv:{env_name}"] = {
                        "name": f"Virtualenv: {env_name}",
                        "path": env_path,
                        "type": "virtualenv"
                    }
    
    # Detectar entornos conda si conda est√° instalado
    try:
        conda_output = subprocess.check_output(["conda", "env", "list", "--json"], universal_newlines=True)
        conda_envs = json.loads(conda_output)
        
        for env_path in conda_envs.get("envs", []):
            env_name = os.path.basename(env_path)
            environments[f"conda:{env_name}"] = {
                "name": f"Conda: {env_name}",
                "path": env_path,
                "type": "conda"
            }
    except (subprocess.SubprocessError, FileNotFoundError):
        pass  # Conda no est√° instalado o no se encuentra
        
    return environments

async def tail_file(websocket: WebSocket, file_path: str, interval: float = 0.5):
    """
    Lee continuamente las nuevas l√≠neas del archivo y las env√≠a por WebSocket.
    Versi√≥n mejorada con depuraci√≥n.
    """
    print(f"‚è≥ Iniciando tail_file para {file_path}")
    position = 0
    
    try:
        # Enviar mensaje inicial para confirmar conexi√≥n
        await websocket.send_json({
            "timestamp": datetime.datetime.utcnow().isoformat(),
            "line": "‚úì Conexi√≥n establecida, monitoreando logs..."
        })
        
        # Verificar si el archivo existe y establecer posici√≥n inicial
        if os.path.exists(file_path):
            position = os.path.getsize(file_path)
            print(f"üìÑ Archivo encontrado, tama√±o inicial: {position} bytes")
            
            # Enviar algunas l√≠neas iniciales para verificar que funciona
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    # Leer las √∫ltimas 10 l√≠neas aproximadamente
                    last_pos = max(0, position - 2000)  # Leer ~2KB del final
                    f.seek(last_pos)
                    # Descartar la primera l√≠nea que podr√≠a estar incompleta
                    if last_pos > 0:
                        f.readline()
                    # Obtener las √∫ltimas l√≠neas
                    last_lines = f.readlines()[-10:]
                    
                    for line in last_lines:
                        line = line.rstrip('\n')
                        if line:
                            await websocket.send_json({
                                "timestamp": datetime.datetime.utcnow().isoformat(),
                                "line": f"[Hist√≥rico] {line}"
                            })
                    
                    # Actualizar posici√≥n despu√©s de leer hist√≥rico
                    position = os.path.getsize(file_path)
            except Exception as e:
                print(f"‚ö†Ô∏è Error al leer l√≠neas hist√≥ricas: {e}")
        else:
            print(f"‚ö†Ô∏è Archivo no existe: {file_path}")
            await websocket.send_json({
                "timestamp": datetime.datetime.utcnow().isoformat(),
                "line": f"‚ö†Ô∏è El archivo de log no existe todav√≠a: {os.path.basename(file_path)}"
            })
        
        # Bucle principal de monitoreo
        while True:
            if os.path.exists(file_path):
                try:
                    current_size = os.path.getsize(file_path)
                    
                    # Si el archivo fue truncado
                    if current_size < position:
                        position = 0
                        print(f"üîÑ Archivo truncado, reiniciando desde el principio")
                        await websocket.send_json({
                            "timestamp": datetime.datetime.utcnow().isoformat(),
                            "line": "üîÑ Archivo de log truncado, reiniciando lectura..."
                        })
                    
                    # Si hay nuevos datos
                    if current_size > position:
                        print(f"üìù Nuevos datos detectados: {current_size - position} bytes")
                        
                        # Leer usando open() est√°ndar para evitar problemas con aiofiles
                        with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                            f.seek(position)
                            new_content = f.read(current_size - position)
                        
                        # Actualizar posici√≥n
                        position = current_size
                        
                        # Procesar y enviar l√≠neas
                        lines = new_content.splitlines()
                        if lines:
                            print(f"üì§ Enviando {len(lines)} l√≠neas")
                            
                            for line in lines:
                                if line.strip():
                                    try:
                                        await websocket.send_json({
                                            "timestamp": datetime.datetime.utcnow().isoformat(),
                                            "line": line
                                        })
                                    except Exception as e:
                                        print(f"‚ùå Error al enviar: {str(e)}")
                                        raise
                except Exception as e:
                    print(f"‚ùå Error procesando archivo: {str(e)}")
                    import traceback
                    traceback.print_exc()
                    
                    await websocket.send_json({
                        "timestamp": datetime.datetime.utcnow().isoformat(),
                        "line": f"‚ùå Error al leer el log: {str(e)}"
                    })
            
            # Esperar antes de la siguiente verificaci√≥n
            await asyncio.sleep(interval)
            
    except WebSocketDisconnect:
        print("üëã Cliente WebSocket desconectado")
    except Exception as e:
        print(f"üí• Error fatal en tail_file: {str(e)}")
        import traceback
        traceback.print_exc()
        
        try:
            await websocket.close(code=1011, reason=str(e))
        except:
            pass
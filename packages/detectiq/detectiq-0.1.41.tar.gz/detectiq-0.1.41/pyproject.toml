[tool.poetry]
name = "detectiq"
version = "0.1.41"
description = "A detection engineering workbench with LLM capabilities, including SigmaIQ features"
authors = ["AttackIQ <rajesh.sharma@attackiq.com>"]
readme = "README.md"
packages = [
    { include = "detectiq" }
]
license = "LGPL-2.1"
repository = "https://github.com/AttackIQ/DetectIQ"
keywords = ["security", "detection", "sigma", "yara", "snort", "llm"]
# Package configuration: Core-only by default (no webapp components)
# Explicitly exclude .env files and webapp components from package
exclude = [
    ".env", "**/.env", ".env.*", "**/.env.*",
    "**/node_modules", "**/node_modules/**/*",
    "dist", "build"
]
# Include documentation and images
include = [
    "docs/images/*.png",
    "docs/*.md"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Developers",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]


[tool.poetry.dependencies]
python = ">=3.9, <=3.12"
six = "*"
pysigma = "^0.11.14"
# certifi is usually transitive, can be added if direct import errors occur
pysigma-backend-carbonblack = "^0.1.8"
pysigma-backend-cortexxdr = "^0.1.4"
pysigma-backend-crowdstrike = "^2.0.0"
pysigma-backend-elasticsearch = "^1.1.2"
pysigma-backend-insightidr = "^0.2.4" # Add, but ensure code in sigmaiq supports it
pysigma-backend-kusto = "^0.4.0"
pysigma-backend-loki = "^0.12.0"
pysigma-backend-netwitness = "^0.1.3"
pysigma-backend-opensearch = "^1.0.2"
pysigma-backend-qradar-aql = "^0.3.2"
pysigma-backend-sentinelone = "^0.1.3"
pysigma-backend-splunk = "^1.1.0"
pysigma-backend-stix2 = "^0.2.0"
pysigma-backend-secops = "0.1.4"
pysigma-pipeline-sysmon = "^1.0.4"
pysigma-pipeline-windows = "^1.2.0"
importlib-resources = {version = "*", python = "<3.10"} # importlib.resources is stdlib 3.10+
# For python >=3.10, importlib_resources might not be strictly needed if code uses importlib.resources
# but adding it with a condition is safer for broader compatibility if older SigmAIQ code used it explicitly.

langchain = "^0.3.7"
langchain-community = "^0.3.7"
langchain-openai = "^0.2.8"
langchain-core = "^0.3.17"
openai = "^1.54.4"
tiktoken = "^0.8.0"
faiss-cpu = "^1.9.0"
yara-python = "^4.5.1"
dpkt = "^1.9.8"
scapy = "^2.6.1"
cryptography = "^42.0.5"
python-dotenv = "^1.0.1"
plyara = "^2.1.1"
requests = "^2.32.3"
aiofiles = "^24.1.0"
idstools = "^0.6.5"
pefile = "^2024.8.26"
pyyaml = "^6.0"

# Splunk extras
splunk-sdk = {version = "^2.1.0", optional = true}

# Elasticsearch extras
elasticsearch = {version = "^8.0.0", optional = true}

# Microsoft extras
msal = {version = "^1.31.1", optional = true}
ruamel-yaml = "^0.18.6"
pydantic = ">=2.0.0"
keyring = "^25.5.0"
python-magic = "^0.4.27"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
black = "^24.8.0"
ruff = "^0.7.2"
pytest-asyncio = "^0.24.0"
python-dotenv = "^1.0.1"
toml = "^0.10.2"
# Required for keyring operations (especially for token management)
"keyrings.alt" = "^5.0.0"
build = "^1.2.0"
twine = "^5.0.0"

[tool.poetry.extras]
splunk = ["splunk-sdk"]
elastic = ["elasticsearch"]
microsoft = ["msal"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py311']

[tool.ruff]
line-length = 120  # Same as Black
# Assume Python 3.11
target-version = "py311"
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".venv"
]

# Sort imports
[tool.ruff.lint.isort]
known-first-party = ["detectiq"]
combine-as-imports = true
case-sensitive = false


[tool.coverage.run]
omit = [
    # omit anything in a tests directory
    "tests/*",
    ]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
addopts = "--cov=detectiq --cov-report=term-missing"
asyncio_mode = "auto"

[tool.poetry.scripts]

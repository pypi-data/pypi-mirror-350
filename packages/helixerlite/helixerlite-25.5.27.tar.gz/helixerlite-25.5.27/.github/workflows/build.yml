name: Build and Test

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  wheel-linux-x86_64:
    name: Build Linux wheel (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin gxx_linux-64
      - name: Build wheel
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc
          export RUSTFLAGS="-C linker=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc"
          maturin build --release --target x86_64-unknown-linux-gnu
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  wheel-macos-x86_64:
    name: Build MacOS wheel (Python ${{ matrix.python-version }})
    runs-on: macOS-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin
      - name: Build wheel
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          maturin build --release
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-x86_64-py${{ matrix.python-version }}
          path: target/wheels/*.whl

  sdist:
    runs-on: ubuntu-latest
    name: Build source distribution
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin gxx_linux-64
          pip install build
      - name: Build source distribution
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc
          export RUSTFLAGS="-C linker=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc"
          maturin sdist -v
          echo "Listing target directory:"
          find target -type f -name "*.tar.gz" | sort
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/sdist/*.tar.gz

  test-artifacts:
    needs: [wheel-linux-x86_64, wheel-macos-x86_64, sdist]
    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheel for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux-x86_64-py${{ matrix.python-version }}
          path: dist/

      - name: Download wheel for macOS
        if: matrix.os == 'macos-latest'
        uses: actions/download-artifact@v4
        with:
          name: wheels-macos-x86_64-py${{ matrix.python-version }}
          path: dist/

      - name: Install package from wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          # Debug information
          echo "Python version: $(python --version)"
          echo "Python path: $(which python)"
          echo "Contents of dist directory:"
          ls -la dist/

          # Run the debug script
          python $GITHUB_WORKSPACE/debug_wheel.py

      - name: Run tests
        run: |
          # Install the wheel directly with force-reinstall
          cd $GITHUB_WORKSPACE
          python -m pip install --force-reinstall dist/*.whl

          # Get the site-packages directory
          SITE_PACKAGES=$(python -c "import site; print(site.getsitepackages()[0])")
          echo "Site-packages directory: $SITE_PACKAGES"

          # List the contents of site-packages
          echo "Contents of site-packages:"
          ls -la $SITE_PACKAGES | grep helixer

          # Run the test directly
          python tests/test_import.py

          # Also try to run with pytest
          echo "\nRunning with pytest:"
          python -m pytest tests/test_import.py -v || echo "Pytest failed but direct test passed"
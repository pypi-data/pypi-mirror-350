from __future__ import annotations
import phoenix5._ctre
import typing
__all__ = ['Animation', 'BaseStandardAnimation', 'BaseTwoSizeAnimation', 'CANdle', 'CANdleConfiguration', 'CANdleControlFrame', 'CANdleFaults', 'CANdleStatusFrame', 'CANdleStickyFaults', 'ColorFlowAnimation', 'FireAnimation', 'LEDStripType', 'LarsonAnimation', 'RainbowAnimation', 'RgbFadeAnimation', 'SingleFadeAnimation', 'StrobeAnimation', 'TwinkleAnimation', 'TwinkleOffAnimation', 'VBatOutputMode']
class Animation:
    def __init__(self, idx: typing.SupportsInt, speed: typing.SupportsFloat, numLed: typing.SupportsInt, ledOffset: typing.SupportsInt) -> None:
        ...
    def getAnimationIdx(self) -> int:
        ...
    def getBaseStandardAnimation(self) -> BaseStandardAnimation:
        ...
    def getBaseTwoSizeAnimation(self) -> BaseTwoSizeAnimation:
        ...
    def getLedOffset(self) -> int:
        ...
    def getNumLed(self) -> int:
        ...
    def getSpeed(self) -> float:
        ...
    def setLedOffset(self, ledOffset: typing.SupportsInt) -> None:
        ...
    def setNumLed(self, numLed: typing.SupportsInt) -> None:
        ...
    def setSpeed(self, speed: typing.SupportsFloat) -> None:
        ...
class BaseStandardAnimation(Animation):
    def __init__(self, idx: typing.SupportsInt, brightness: typing.SupportsFloat, speed: typing.SupportsFloat, numLed: typing.SupportsInt, param4: typing.SupportsFloat, param5: typing.SupportsFloat, reverseDirection: bool, ledOffset: typing.SupportsInt) -> None:
        ...
    def getBaseStandardAnimation(self) -> BaseStandardAnimation:
        ...
    def getBaseTwoSizeAnimation(self) -> BaseTwoSizeAnimation:
        ...
    def getBrightness(self) -> float:
        ...
    def getParam4(self) -> float:
        ...
    def getParam5(self) -> float:
        ...
    def getReverseDirection(self) -> bool:
        ...
    def setBrightness(self, brightness: typing.SupportsFloat) -> None:
        ...
    def setParam4(self, param4: typing.SupportsFloat) -> None:
        ...
    def setParam5(self, param5: typing.SupportsFloat) -> None:
        ...
    def setReverseDirection(self, reverseDirection: bool) -> None:
        ...
class BaseTwoSizeAnimation(Animation):
    def __init__(self, idx: typing.SupportsInt, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, w: typing.SupportsInt, speed: typing.SupportsFloat, numLed: typing.SupportsInt, direction: typing.SupportsInt, size: typing.SupportsInt, ledOffset: typing.SupportsInt) -> None:
        ...
    def getB(self) -> int:
        ...
    def getBaseStandardAnimation(self) -> BaseStandardAnimation:
        ...
    def getBaseTwoSizeAnimation(self) -> BaseTwoSizeAnimation:
        ...
    def getDirection(self) -> int:
        ...
    def getG(self) -> int:
        ...
    def getR(self) -> int:
        ...
    def getSize(self) -> int:
        ...
    def getW(self) -> int:
        ...
    def setB(self, b: typing.SupportsInt) -> None:
        ...
    def setDirection(self, direction: typing.SupportsInt) -> None:
        ...
    def setG(self, g: typing.SupportsInt) -> None:
        ...
    def setR(self, r: typing.SupportsInt) -> None:
        ...
    def setSize(self, size: typing.SupportsInt) -> None:
        ...
    def setW(self, w: typing.SupportsInt) -> None:
        ...
class CANdle:
    def __init__(self, deviceId: typing.SupportsInt, canbus: str = '') -> None:
        ...
    def animate(self, animation: Animation, animSlot: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def clearStickyFaults(self, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def configAllSettings(self, allConfigs: CANdleConfiguration, timeoutMs: typing.SupportsInt = 50) -> phoenix5._ctre.ErrorCode:
        ...
    def configBrightnessScalar(self, brightness: typing.SupportsFloat, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def configFactoryDefault(self, timeoutMs: typing.SupportsInt = 50) -> phoenix5._ctre.ErrorCode:
        ...
    def configGetCustomParam(self, paramIndex: typing.SupportsInt, timeoutMs: typing.SupportsInt = 0) -> int:
        ...
    def configGetParameter(self, param: phoenix5._ctre.ParamEnum, ordinal: typing.SupportsInt, timeoutMs: typing.SupportsInt = 0) -> float:
        ...
    def configLEDType(self, type: LEDStripType, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def configLOSBehavior(self, disableWhenLOS: bool, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def configSetCustomParam(self, paramIndex: typing.SupportsInt, value: typing.SupportsInt, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def configSetParameter(self, param: phoenix5._ctre.ParamEnum, value: typing.SupportsFloat, subValue: typing.SupportsInt = 0, ordinal: typing.SupportsInt = 0, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def configStatusLedState(self, disableWhenRunning: bool, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def configV5Enabled(self, v5Enabled: bool, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def configVBatOutput(self, mode: VBatOutputMode, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
    def get5VRailVoltage(self) -> float:
        ...
    def getAllConfigs(self, allConfigs: CANdleConfiguration, timeoutMs: typing.SupportsInt = 50) -> None:
        ...
    def getBusVoltage(self) -> float:
        ...
    def getCurrent(self) -> float:
        ...
    def getFaults(self, toFill: CANdleFaults) -> phoenix5._ctre.ErrorCode:
        ...
    def getLastError(self) -> phoenix5._ctre.ErrorCode:
        ...
    def getMaxSimultaneousAnimationCount(self) -> int:
        ...
    def getStatusFramePeriod(self, frame: CANdleStatusFrame, timeoutMs: typing.SupportsInt = 0) -> int:
        ...
    def getStickyFaults(self, toFill: CANdleStickyFaults) -> phoenix5._ctre.ErrorCode:
        ...
    def getTemperature(self) -> float:
        ...
    def getVBatModulation(self) -> float:
        ...
    def hasResetOccurred(self) -> bool:
        ...
    def modulateVBatOutput(self, dutyCyclePrcnt: typing.SupportsFloat) -> phoenix5._ctre.ErrorCode:
        ...
    def setControlFramePeriod(self, frame: CANdleControlFrame, periodMs: typing.SupportsInt) -> phoenix5._ctre.ErrorCode:
        ...
    def setLEDs(self, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, w: typing.SupportsInt = 0, startIdx: typing.SupportsInt = 0, count: typing.SupportsInt = 512) -> phoenix5._ctre.ErrorCode:
        ...
    def setStatusFramePeriod(self, frame: CANdleStatusFrame, periodMs: typing.SupportsInt, timeoutMs: typing.SupportsInt = 0) -> phoenix5._ctre.ErrorCode:
        ...
class CANdleConfiguration(phoenix5._ctre.CustomParamConfiguration):
    disableWhenLOS: bool
    statusLedOffWhenActive: bool
    stripType: LEDStripType
    v5Enabled: bool
    vBatOutputMode: VBatOutputMode
    def __init__(self) -> None:
        ...
    def __str__(self, prependString: str = '') -> str:
        ...
    @property
    def brightnessScalar(self) -> float:
        ...
    @brightnessScalar.setter
    def brightnessScalar(self, arg0: typing.SupportsFloat) -> None:
        ...
class CANdleControlFrame:
    """
    Enumerated type for status frame types.
    
    Members:
    
      CANdle_Control_1_General
    
      CANdle_Control_2_ModulatedVBatOutput
    """
    CANdle_Control_1_General: typing.ClassVar[CANdleControlFrame]  # value = <CANdleControlFrame.CANdle_Control_1_General: 262144>
    CANdle_Control_2_ModulatedVBatOutput: typing.ClassVar[CANdleControlFrame]  # value = <CANdleControlFrame.CANdle_Control_2_ModulatedVBatOutput: 262208>
    __members__: typing.ClassVar[dict[str, CANdleControlFrame]]  # value = {'CANdle_Control_1_General': <CANdleControlFrame.CANdle_Control_1_General: 262144>, 'CANdle_Control_2_ModulatedVBatOutput': <CANdleControlFrame.CANdle_Control_2_ModulatedVBatOutput: 262208>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class CANdleFaults:
    APIError: bool
    BootDuringEnable: bool
    HardwareFault: bool
    ShortCircuit: bool
    SoftwareFuse: bool
    ThermalFault: bool
    V5TooHigh: bool
    V5TooLow: bool
    VBatTooHigh: bool
    VBatTooLow: bool
    @typing.overload
    def __init__(self, bits: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    def hasAnyFault(self) -> bool:
        ...
    def toBitfield(self) -> int:
        ...
    def update(self, bits: typing.SupportsInt) -> None:
        ...
class CANdleStatusFrame:
    """
    Enumerated type for status frame types.
    
    Members:
    
      Status_1_General
    
      Status_2_Startup
    
      Status_3_FirmwareApiStatus
    
      Status_4_ControlTelem
    
      Status_5_PixelPulseTrain
    
      Status_6_BottomPixels
    
      Status_7_TopPixels
    """
    Status_1_General: typing.ClassVar[CANdleStatusFrame]  # value = <CANdleStatusFrame.Status_1_General: 267264>
    Status_2_Startup: typing.ClassVar[CANdleStatusFrame]  # value = <CANdleStatusFrame.Status_2_Startup: 267328>
    Status_3_FirmwareApiStatus: typing.ClassVar[CANdleStatusFrame]  # value = <CANdleStatusFrame.Status_3_FirmwareApiStatus: 267392>
    Status_4_ControlTelem: typing.ClassVar[CANdleStatusFrame]  # value = <CANdleStatusFrame.Status_4_ControlTelem: 267456>
    Status_5_PixelPulseTrain: typing.ClassVar[CANdleStatusFrame]  # value = <CANdleStatusFrame.Status_5_PixelPulseTrain: 267520>
    Status_6_BottomPixels: typing.ClassVar[CANdleStatusFrame]  # value = <CANdleStatusFrame.Status_6_BottomPixels: 267584>
    Status_7_TopPixels: typing.ClassVar[CANdleStatusFrame]  # value = <CANdleStatusFrame.Status_7_TopPixels: 267648>
    __members__: typing.ClassVar[dict[str, CANdleStatusFrame]]  # value = {'Status_1_General': <CANdleStatusFrame.Status_1_General: 267264>, 'Status_2_Startup': <CANdleStatusFrame.Status_2_Startup: 267328>, 'Status_3_FirmwareApiStatus': <CANdleStatusFrame.Status_3_FirmwareApiStatus: 267392>, 'Status_4_ControlTelem': <CANdleStatusFrame.Status_4_ControlTelem: 267456>, 'Status_5_PixelPulseTrain': <CANdleStatusFrame.Status_5_PixelPulseTrain: 267520>, 'Status_6_BottomPixels': <CANdleStatusFrame.Status_6_BottomPixels: 267584>, 'Status_7_TopPixels': <CANdleStatusFrame.Status_7_TopPixels: 267648>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class CANdleStickyFaults:
    APIError: bool
    BootDuringEnable: bool
    HardwareFault: bool
    ShortCircuit: bool
    SoftwareFuse: bool
    ThermalFault: bool
    V5TooHigh: bool
    V5TooLow: bool
    VBatTooHigh: bool
    VBatTooLow: bool
    @typing.overload
    def __init__(self, bits: typing.SupportsInt) -> None:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    def hasAnyFault(self) -> bool:
        ...
    def toBitfield(self) -> int:
        ...
    def update(self, bits: typing.SupportsInt) -> None:
        ...
class ColorFlowAnimation(BaseTwoSizeAnimation):
    class Direction:
        """
        Members:
        
          Forward
        
          Backward
        """
        Backward: typing.ClassVar[ColorFlowAnimation.Direction]  # value = <Direction.Backward: 1>
        Forward: typing.ClassVar[ColorFlowAnimation.Direction]  # value = <Direction.Forward: 0>
        __members__: typing.ClassVar[dict[str, ColorFlowAnimation.Direction]]  # value = {'Forward': <Direction.Forward: 0>, 'Backward': <Direction.Backward: 1>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: typing.SupportsInt) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: typing.SupportsInt) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def __init__(self, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, w: typing.SupportsInt, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, direction: ColorFlowAnimation.Direction = ..., ledOffset: typing.SupportsInt = 0) -> None:
        ...
    def setDirection(self, direction: ColorFlowAnimation.Direction) -> None:
        ...
class FireAnimation(BaseStandardAnimation):
    def __init__(self, brightness: typing.SupportsFloat = 1, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, sparking: typing.SupportsFloat = 1, cooling: typing.SupportsFloat = 1, reverseDirection: bool = False, ledOffset: typing.SupportsInt = 0) -> None:
        ...
    def setCooling(self, cooling: typing.SupportsFloat) -> None:
        ...
    def setSparking(self, sparking: typing.SupportsFloat) -> None:
        ...
class LEDStripType:
    """
    The various LED types that the CANdle can support
    
    Members:
    
      GRB : LEDs that are controlled by Green-Red-Blue values
    
      RGB : LEDs that are controlled by Red-Green-Blue values
    
      BRG : LEDs that are controlled by Blue-Red-Green values
    
      GRBW : LEDs that are controlled by Green-Red-Blue-White values
    
      RGBW : LEDs that are controlled by Red-Green-Blue-White values
    
      BRGW : LEDs that are controlled by Blue-Red-Green-White values
    """
    BRG: typing.ClassVar[LEDStripType]  # value = <LEDStripType.BRG: 2>
    BRGW: typing.ClassVar[LEDStripType]  # value = <LEDStripType.BRGW: 8>
    GRB: typing.ClassVar[LEDStripType]  # value = <LEDStripType.GRB: 0>
    GRBW: typing.ClassVar[LEDStripType]  # value = <LEDStripType.GRBW: 6>
    RGB: typing.ClassVar[LEDStripType]  # value = <LEDStripType.RGB: 1>
    RGBW: typing.ClassVar[LEDStripType]  # value = <LEDStripType.RGBW: 7>
    __members__: typing.ClassVar[dict[str, LEDStripType]]  # value = {'GRB': <LEDStripType.GRB: 0>, 'RGB': <LEDStripType.RGB: 1>, 'BRG': <LEDStripType.BRG: 2>, 'GRBW': <LEDStripType.GRBW: 6>, 'RGBW': <LEDStripType.RGBW: 7>, 'BRGW': <LEDStripType.BRGW: 8>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class LarsonAnimation(BaseTwoSizeAnimation):
    class BounceMode:
        """
        Members:
        
          Front
        
          Center
        
          Back
        """
        Back: typing.ClassVar[LarsonAnimation.BounceMode]  # value = <BounceMode.Back: 2>
        Center: typing.ClassVar[LarsonAnimation.BounceMode]  # value = <BounceMode.Center: 1>
        Front: typing.ClassVar[LarsonAnimation.BounceMode]  # value = <BounceMode.Front: 0>
        __members__: typing.ClassVar[dict[str, LarsonAnimation.BounceMode]]  # value = {'Front': <BounceMode.Front: 0>, 'Center': <BounceMode.Center: 1>, 'Back': <BounceMode.Back: 2>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: typing.SupportsInt) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: typing.SupportsInt) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def __init__(self, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, w: typing.SupportsInt = 0, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, mode: LarsonAnimation.BounceMode = ..., size: typing.SupportsInt = 2, ledOffset: typing.SupportsInt = 0) -> None:
        ...
    def setBounceMode(self, mode: LarsonAnimation.BounceMode) -> None:
        ...
    def setSize(self, size: typing.SupportsInt) -> None:
        ...
class RainbowAnimation(BaseStandardAnimation):
    def __init__(self, brightness: typing.SupportsFloat = 1, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, reverseDirection: bool = False, ledOffset: typing.SupportsInt = 0) -> None:
        ...
class RgbFadeAnimation(BaseStandardAnimation):
    def __init__(self, brightness: typing.SupportsFloat = 1, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, ledOffset: typing.SupportsInt = 0) -> None:
        ...
class SingleFadeAnimation(BaseTwoSizeAnimation):
    def __init__(self, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, w: typing.SupportsInt = 0, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, ledOffset: typing.SupportsInt = 0) -> None:
        ...
class StrobeAnimation(BaseTwoSizeAnimation):
    def __init__(self, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, w: typing.SupportsInt = 0, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, ledOffset: typing.SupportsInt = 0) -> None:
        ...
class TwinkleAnimation(BaseTwoSizeAnimation):
    class TwinklePercent:
        """
        Members:
        
          Percent100
        
          Percent88
        
          Percent76
        
          Percent64
        
          Percent42
        
          Percent30
        
          Percent18
        
          Percent6
        """
        Percent100: typing.ClassVar[TwinkleAnimation.TwinklePercent]  # value = <TwinklePercent.Percent100: 0>
        Percent18: typing.ClassVar[TwinkleAnimation.TwinklePercent]  # value = <TwinklePercent.Percent18: 6>
        Percent30: typing.ClassVar[TwinkleAnimation.TwinklePercent]  # value = <TwinklePercent.Percent30: 5>
        Percent42: typing.ClassVar[TwinkleAnimation.TwinklePercent]  # value = <TwinklePercent.Percent42: 4>
        Percent6: typing.ClassVar[TwinkleAnimation.TwinklePercent]  # value = <TwinklePercent.Percent6: 7>
        Percent64: typing.ClassVar[TwinkleAnimation.TwinklePercent]  # value = <TwinklePercent.Percent64: 3>
        Percent76: typing.ClassVar[TwinkleAnimation.TwinklePercent]  # value = <TwinklePercent.Percent76: 2>
        Percent88: typing.ClassVar[TwinkleAnimation.TwinklePercent]  # value = <TwinklePercent.Percent88: 1>
        __members__: typing.ClassVar[dict[str, TwinkleAnimation.TwinklePercent]]  # value = {'Percent100': <TwinklePercent.Percent100: 0>, 'Percent88': <TwinklePercent.Percent88: 1>, 'Percent76': <TwinklePercent.Percent76: 2>, 'Percent64': <TwinklePercent.Percent64: 3>, 'Percent42': <TwinklePercent.Percent42: 4>, 'Percent30': <TwinklePercent.Percent30: 5>, 'Percent18': <TwinklePercent.Percent18: 6>, 'Percent6': <TwinklePercent.Percent6: 7>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: typing.SupportsInt) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: typing.SupportsInt) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def __init__(self, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, w: typing.SupportsInt = 0, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, divider: TwinkleAnimation.TwinklePercent = ..., ledOffset: typing.SupportsInt = 0) -> None:
        ...
    def setDivider(self, divider: TwinkleAnimation.TwinklePercent) -> None:
        ...
class TwinkleOffAnimation(BaseTwoSizeAnimation):
    class TwinkleOffPercent:
        """
        Members:
        
          Percent100
        
          Percent88
        
          Percent76
        
          Percent64
        
          Percent42
        
          Percent30
        
          Percent18
        
          Percent6
        """
        Percent100: typing.ClassVar[TwinkleOffAnimation.TwinkleOffPercent]  # value = <TwinkleOffPercent.Percent100: 0>
        Percent18: typing.ClassVar[TwinkleOffAnimation.TwinkleOffPercent]  # value = <TwinkleOffPercent.Percent18: 6>
        Percent30: typing.ClassVar[TwinkleOffAnimation.TwinkleOffPercent]  # value = <TwinkleOffPercent.Percent30: 5>
        Percent42: typing.ClassVar[TwinkleOffAnimation.TwinkleOffPercent]  # value = <TwinkleOffPercent.Percent42: 4>
        Percent6: typing.ClassVar[TwinkleOffAnimation.TwinkleOffPercent]  # value = <TwinkleOffPercent.Percent6: 7>
        Percent64: typing.ClassVar[TwinkleOffAnimation.TwinkleOffPercent]  # value = <TwinkleOffPercent.Percent64: 3>
        Percent76: typing.ClassVar[TwinkleOffAnimation.TwinkleOffPercent]  # value = <TwinkleOffPercent.Percent76: 2>
        Percent88: typing.ClassVar[TwinkleOffAnimation.TwinkleOffPercent]  # value = <TwinkleOffPercent.Percent88: 1>
        __members__: typing.ClassVar[dict[str, TwinkleOffAnimation.TwinkleOffPercent]]  # value = {'Percent100': <TwinkleOffPercent.Percent100: 0>, 'Percent88': <TwinkleOffPercent.Percent88: 1>, 'Percent76': <TwinkleOffPercent.Percent76: 2>, 'Percent64': <TwinkleOffPercent.Percent64: 3>, 'Percent42': <TwinkleOffPercent.Percent42: 4>, 'Percent30': <TwinkleOffPercent.Percent30: 5>, 'Percent18': <TwinkleOffPercent.Percent18: 6>, 'Percent6': <TwinkleOffPercent.Percent6: 7>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: typing.SupportsInt) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: typing.SupportsInt) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    def __init__(self, r: typing.SupportsInt, g: typing.SupportsInt, b: typing.SupportsInt, w: typing.SupportsInt = 0, speed: typing.SupportsFloat = 1, numLed: typing.SupportsInt = -1, divider: TwinkleOffAnimation.TwinkleOffPercent = ..., ledOffset: typing.SupportsInt = 0) -> None:
        ...
    def setDivider(self, divider: TwinkleOffAnimation.TwinkleOffPercent) -> None:
        ...
class VBatOutputMode:
    """
    The various methods of managing the VBat output behavior
    
    Members:
    
      On : VBat output is on at full power, no modulation
    
      Off : VBat output is off, no modulation
    
      Modulated : VBat output is on at the specified modulation
    """
    Modulated: typing.ClassVar[VBatOutputMode]  # value = <VBatOutputMode.Modulated: 2>
    Off: typing.ClassVar[VBatOutputMode]  # value = <VBatOutputMode.Off: 1>
    On: typing.ClassVar[VBatOutputMode]  # value = <VBatOutputMode.On: 0>
    __members__: typing.ClassVar[dict[str, VBatOutputMode]]  # value = {'On': <VBatOutputMode.On: 0>, 'Off': <VBatOutputMode.Off: 1>, 'Modulated': <VBatOutputMode.Modulated: 2>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: typing.SupportsInt) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: typing.SupportsInt) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...

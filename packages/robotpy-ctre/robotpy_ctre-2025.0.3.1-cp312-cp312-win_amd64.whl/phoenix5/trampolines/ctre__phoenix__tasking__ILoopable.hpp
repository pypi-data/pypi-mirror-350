// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <ctre/phoenix/tasking/ILoopable.h>

namespace ctre::phoenix::tasking {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_ILoopable : CfgBase
{
  using Base = ctre::phoenix::tasking::ILoopable;
  using override_base_OnStart_v = ctre::phoenix::tasking::ILoopable;
  using override_base_OnLoop_v = ctre::phoenix::tasking::ILoopable;
  using override_base_IsDone_v = ctre::phoenix::tasking::ILoopable;
  using override_base_OnStop_v = ctre::phoenix::tasking::ILoopable;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_ILoopable : PyTrampolineBase {
  using PyTrampolineBase::PyTrampolineBase;

  #ifndef SWGEN_DISABLE_OnStart_v
    void OnStart() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(ILoopable, PYBIND11_TYPE(void), LookupBase,
        "onStart", OnStart, );
    }
  #endif

  #ifndef SWGEN_DISABLE_OnLoop_v
    void OnLoop() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(ILoopable, PYBIND11_TYPE(void), LookupBase,
        "onLoop", OnLoop, );
    }
  #endif

  #ifndef SWGEN_DISABLE_IsDone_v
    bool IsDone() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(ILoopable, PYBIND11_TYPE(bool), LookupBase,
        "isDone", IsDone, );
    }
  #endif

  #ifndef SWGEN_DISABLE_OnStop_v
    void OnStop() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(ILoopable, PYBIND11_TYPE(void), LookupBase,
        "onStop", OnStop, );
    }
  #endif
};

}; // namespace ctre::phoenix::tasking

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <ctre/phoenix/signals/IInvertable.h>

namespace ctre::phoenix::signals {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_IInvertable : CfgBase
{
  using Base = ctre::phoenix::signals::IInvertable;
  using override_base_SetInverted_b = ctre::phoenix::signals::IInvertable;
  using override_base_KGetInverted_v = ctre::phoenix::signals::IInvertable;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_IInvertable : PyTrampolineBase {
  using PyTrampolineBase::PyTrampolineBase;

  #ifndef SWGEN_DISABLE_SetInverted_b
    void SetInverted(bool invert) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(IInvertable, PYBIND11_TYPE(void), LookupBase,
        "setInverted", SetInverted, invert);
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      SEMIWRAP_OVERRIDE_PURE_NAME(IInvertable, PYBIND11_TYPE(bool), LookupBase,
        "getInverted", GetInverted, );
    }
  #endif
};

}; // namespace ctre::phoenix::signals

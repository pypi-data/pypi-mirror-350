# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from kos_protos import common_pb2 as kos_dot_common__pb2
from kos_protos import inference_pb2 as kos_dot_inference__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in kos/inference_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class InferenceServiceStub(object):
    """The InferenceService allows uploading models and running inference.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadModel = channel.unary_unary(
                '/kos.inference.InferenceService/UploadModel',
                request_serializer=kos_dot_inference__pb2.UploadModelRequest.SerializeToString,
                response_deserializer=kos_dot_inference__pb2.UploadModelResponse.FromString,
                _registered_method=True)
        self.LoadModels = channel.unary_unary(
                '/kos.inference.InferenceService/LoadModels',
                request_serializer=kos_dot_inference__pb2.ModelUids.SerializeToString,
                response_deserializer=kos_dot_inference__pb2.LoadModelsResponse.FromString,
                _registered_method=True)
        self.UnloadModels = channel.unary_unary(
                '/kos.inference.InferenceService/UnloadModels',
                request_serializer=kos_dot_inference__pb2.ModelUids.SerializeToString,
                response_deserializer=kos_dot_common__pb2.ActionResponse.FromString,
                _registered_method=True)
        self.GetModelsInfo = channel.unary_unary(
                '/kos.inference.InferenceService/GetModelsInfo',
                request_serializer=kos_dot_inference__pb2.GetModelsInfoRequest.SerializeToString,
                response_deserializer=kos_dot_inference__pb2.GetModelsInfoResponse.FromString,
                _registered_method=True)
        self.Forward = channel.unary_unary(
                '/kos.inference.InferenceService/Forward',
                request_serializer=kos_dot_inference__pb2.ForwardRequest.SerializeToString,
                response_deserializer=kos_dot_inference__pb2.ForwardResponse.FromString,
                _registered_method=True)


class InferenceServiceServicer(object):
    """The InferenceService allows uploading models and running inference.
    """

    def UploadModel(self, request, context):
        """Uploads a model to the robot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadModels(self, request, context):
        """Loads models from the robot's filesystem.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnloadModels(self, request, context):
        """Unloads models from the robot's filesystem.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelsInfo(self, request, context):
        """Get available models
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Forward(self, request, context):
        """Runs inference using a specified model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadModel,
                    request_deserializer=kos_dot_inference__pb2.UploadModelRequest.FromString,
                    response_serializer=kos_dot_inference__pb2.UploadModelResponse.SerializeToString,
            ),
            'LoadModels': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadModels,
                    request_deserializer=kos_dot_inference__pb2.ModelUids.FromString,
                    response_serializer=kos_dot_inference__pb2.LoadModelsResponse.SerializeToString,
            ),
            'UnloadModels': grpc.unary_unary_rpc_method_handler(
                    servicer.UnloadModels,
                    request_deserializer=kos_dot_inference__pb2.ModelUids.FromString,
                    response_serializer=kos_dot_common__pb2.ActionResponse.SerializeToString,
            ),
            'GetModelsInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelsInfo,
                    request_deserializer=kos_dot_inference__pb2.GetModelsInfoRequest.FromString,
                    response_serializer=kos_dot_inference__pb2.GetModelsInfoResponse.SerializeToString,
            ),
            'Forward': grpc.unary_unary_rpc_method_handler(
                    servicer.Forward,
                    request_deserializer=kos_dot_inference__pb2.ForwardRequest.FromString,
                    response_serializer=kos_dot_inference__pb2.ForwardResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kos.inference.InferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('kos.inference.InferenceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InferenceService(object):
    """The InferenceService allows uploading models and running inference.
    """

    @staticmethod
    def UploadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.inference.InferenceService/UploadModel',
            kos_dot_inference__pb2.UploadModelRequest.SerializeToString,
            kos_dot_inference__pb2.UploadModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.inference.InferenceService/LoadModels',
            kos_dot_inference__pb2.ModelUids.SerializeToString,
            kos_dot_inference__pb2.LoadModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnloadModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.inference.InferenceService/UnloadModels',
            kos_dot_inference__pb2.ModelUids.SerializeToString,
            kos_dot_common__pb2.ActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.inference.InferenceService/GetModelsInfo',
            kos_dot_inference__pb2.GetModelsInfoRequest.SerializeToString,
            kos_dot_inference__pb2.GetModelsInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.inference.InferenceService/Forward',
            kos_dot_inference__pb2.ForwardRequest.SerializeToString,
            kos_dot_inference__pb2.ForwardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import kos.common_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ActuatorCommand(google.protobuf.message.Message):
    """Message representing a command to an actuator."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_ID_FIELD_NUMBER: builtins.int
    POSITION_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    TORQUE_FIELD_NUMBER: builtins.int
    actuator_id: builtins.int
    """Actuator ID"""
    position: builtins.float
    """Desired position in degrees"""
    velocity: builtins.float
    """Desired velocity in degrees/second"""
    torque: builtins.float
    """Desired torque in Nm"""
    def __init__(
        self,
        *,
        actuator_id: builtins.int = ...,
        position: builtins.float | None = ...,
        velocity: builtins.float | None = ...,
        torque: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_position", b"_position", "_torque", b"_torque", "_velocity", b"_velocity", "position", b"position", "torque", b"torque", "velocity", b"velocity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_position", b"_position", "_torque", b"_torque", "_velocity", b"_velocity", "actuator_id", b"actuator_id", "position", b"position", "torque", b"torque", "velocity", b"velocity"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_position", b"_position"]) -> typing.Literal["position"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_torque", b"_torque"]) -> typing.Literal["torque"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_velocity", b"_velocity"]) -> typing.Literal["velocity"] | None: ...

global___ActuatorCommand = ActuatorCommand

@typing.final
class CommandActuatorsRequest(google.protobuf.message.Message):
    """Request message for CommandActuators."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COMMANDS_FIELD_NUMBER: builtins.int
    @property
    def commands(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ActuatorCommand]:
        """List of actuator commands"""

    def __init__(
        self,
        *,
        commands: collections.abc.Iterable[global___ActuatorCommand] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["commands", b"commands"]) -> None: ...

global___CommandActuatorsRequest = CommandActuatorsRequest

@typing.final
class CommandActuatorsResponse(google.protobuf.message.Message):
    """Response message for CommandActuators."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULTS_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[kos.common_pb2.ActionResult]:
        """Results per actuator"""

    def __init__(
        self,
        *,
        results: collections.abc.Iterable[kos.common_pb2.ActionResult] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["results", b"results"]) -> None: ...

global___CommandActuatorsResponse = CommandActuatorsResponse

@typing.final
class ConfigureActuatorRequest(google.protobuf.message.Message):
    """Request message for ConfigureActuator."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_ID_FIELD_NUMBER: builtins.int
    KP_FIELD_NUMBER: builtins.int
    KD_FIELD_NUMBER: builtins.int
    KI_FIELD_NUMBER: builtins.int
    MAX_TORQUE_FIELD_NUMBER: builtins.int
    PROTECTIVE_TORQUE_FIELD_NUMBER: builtins.int
    PROTECTION_TIME_FIELD_NUMBER: builtins.int
    TORQUE_ENABLED_FIELD_NUMBER: builtins.int
    NEW_ACTUATOR_ID_FIELD_NUMBER: builtins.int
    ZERO_POSITION_FIELD_NUMBER: builtins.int
    ACCELERATION_FIELD_NUMBER: builtins.int
    actuator_id: builtins.int
    """Actuator ID"""
    kp: builtins.float
    """Proportional gain"""
    kd: builtins.float
    """Derivative gain"""
    ki: builtins.float
    """Integral gain"""
    max_torque: builtins.float
    """Max torque (%)"""
    protective_torque: builtins.float
    """Protective torque (%)"""
    protection_time: builtins.float
    """Protection time in seconds"""
    torque_enabled: builtins.bool
    """Torque enabled flag"""
    new_actuator_id: builtins.int
    """New actuator ID"""
    zero_position: builtins.bool
    """Instant zero position"""
    acceleration: builtins.float
    """Acceleration (deg/sec^2)"""
    def __init__(
        self,
        *,
        actuator_id: builtins.int = ...,
        kp: builtins.float | None = ...,
        kd: builtins.float | None = ...,
        ki: builtins.float | None = ...,
        max_torque: builtins.float | None = ...,
        protective_torque: builtins.float | None = ...,
        protection_time: builtins.float | None = ...,
        torque_enabled: builtins.bool | None = ...,
        new_actuator_id: builtins.int | None = ...,
        zero_position: builtins.bool | None = ...,
        acceleration: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_acceleration", b"_acceleration", "_kd", b"_kd", "_ki", b"_ki", "_kp", b"_kp", "_max_torque", b"_max_torque", "_new_actuator_id", b"_new_actuator_id", "_protection_time", b"_protection_time", "_protective_torque", b"_protective_torque", "_torque_enabled", b"_torque_enabled", "_zero_position", b"_zero_position", "acceleration", b"acceleration", "kd", b"kd", "ki", b"ki", "kp", b"kp", "max_torque", b"max_torque", "new_actuator_id", b"new_actuator_id", "protection_time", b"protection_time", "protective_torque", b"protective_torque", "torque_enabled", b"torque_enabled", "zero_position", b"zero_position"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_acceleration", b"_acceleration", "_kd", b"_kd", "_ki", b"_ki", "_kp", b"_kp", "_max_torque", b"_max_torque", "_new_actuator_id", b"_new_actuator_id", "_protection_time", b"_protection_time", "_protective_torque", b"_protective_torque", "_torque_enabled", b"_torque_enabled", "_zero_position", b"_zero_position", "acceleration", b"acceleration", "actuator_id", b"actuator_id", "kd", b"kd", "ki", b"ki", "kp", b"kp", "max_torque", b"max_torque", "new_actuator_id", b"new_actuator_id", "protection_time", b"protection_time", "protective_torque", b"protective_torque", "torque_enabled", b"torque_enabled", "zero_position", b"zero_position"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_acceleration", b"_acceleration"]) -> typing.Literal["acceleration"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_kd", b"_kd"]) -> typing.Literal["kd"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_ki", b"_ki"]) -> typing.Literal["ki"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_kp", b"_kp"]) -> typing.Literal["kp"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_torque", b"_max_torque"]) -> typing.Literal["max_torque"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_new_actuator_id", b"_new_actuator_id"]) -> typing.Literal["new_actuator_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_protection_time", b"_protection_time"]) -> typing.Literal["protection_time"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_protective_torque", b"_protective_torque"]) -> typing.Literal["protective_torque"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_torque_enabled", b"_torque_enabled"]) -> typing.Literal["torque_enabled"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_zero_position", b"_zero_position"]) -> typing.Literal["zero_position"] | None: ...

global___ConfigureActuatorRequest = ConfigureActuatorRequest

@typing.final
class CalibrateActuatorRequest(google.protobuf.message.Message):
    """Request message for CalibrateActuator."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_ID_FIELD_NUMBER: builtins.int
    CALIBRATION_SPEED_FIELD_NUMBER: builtins.int
    THRESHOLD_CURRENT_FIELD_NUMBER: builtins.int
    actuator_id: builtins.int
    """Actuator ID"""
    calibration_speed: builtins.float
    """Calibration speed in degrees/second"""
    threshold_current: builtins.float
    """Threshold current in amperes"""
    def __init__(
        self,
        *,
        actuator_id: builtins.int = ...,
        calibration_speed: builtins.float | None = ...,
        threshold_current: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_calibration_speed", b"_calibration_speed", "_threshold_current", b"_threshold_current", "calibration_speed", b"calibration_speed", "threshold_current", b"threshold_current"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_calibration_speed", b"_calibration_speed", "_threshold_current", b"_threshold_current", "actuator_id", b"actuator_id", "calibration_speed", b"calibration_speed", "threshold_current", b"threshold_current"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_calibration_speed", b"_calibration_speed"]) -> typing.Literal["calibration_speed"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_threshold_current", b"_threshold_current"]) -> typing.Literal["threshold_current"] | None: ...

global___CalibrateActuatorRequest = CalibrateActuatorRequest

@typing.final
class CalibrateActuatorResponse(google.protobuf.message.Message):
    """Response message for CalibrateActuator operation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_ID_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    actuator_id: builtins.int
    """Actuator ID"""
    @property
    def error(self) -> kos.common_pb2.Error:
        """Error details if calibration failed"""

    def __init__(
        self,
        *,
        actuator_id: builtins.int = ...,
        error: kos.common_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["actuator_id", b"actuator_id", "error", b"error"]) -> None: ...

global___CalibrateActuatorResponse = CalibrateActuatorResponse

@typing.final
class CalibrateActuatorMetadata(google.protobuf.message.Message):
    """Metadata for CalibrateActuator operation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_ID_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    actuator_id: builtins.int
    """Actuator ID"""
    status: builtins.str
    """Status ("IN_PROGRESS", "SUCCEEDED", "FAILED")"""
    def __init__(
        self,
        *,
        actuator_id: builtins.int = ...,
        status: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["actuator_id", b"actuator_id", "status", b"status"]) -> None: ...

global___CalibrateActuatorMetadata = CalibrateActuatorMetadata

@typing.final
class GetActuatorsStateRequest(google.protobuf.message.Message):
    """Request message for GetActuatorsState."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_IDS_FIELD_NUMBER: builtins.int
    @property
    def actuator_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Actuator IDs to query"""

    def __init__(
        self,
        *,
        actuator_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["actuator_ids", b"actuator_ids"]) -> None: ...

global___GetActuatorsStateRequest = GetActuatorsStateRequest

@typing.final
class GetActuatorsStateResponse(google.protobuf.message.Message):
    """Response message containing actuator states."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATES_FIELD_NUMBER: builtins.int
    @property
    def states(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ActuatorStateResponse]:
        """List of actuator states"""

    def __init__(
        self,
        *,
        states: collections.abc.Iterable[global___ActuatorStateResponse] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["states", b"states"]) -> None: ...

global___GetActuatorsStateResponse = GetActuatorsStateResponse

@typing.final
class ActuatorStateResponse(google.protobuf.message.Message):
    """State information for a single actuator."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_ID_FIELD_NUMBER: builtins.int
    ONLINE_FIELD_NUMBER: builtins.int
    POSITION_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    TORQUE_FIELD_NUMBER: builtins.int
    TEMPERATURE_FIELD_NUMBER: builtins.int
    VOLTAGE_FIELD_NUMBER: builtins.int
    CURRENT_FIELD_NUMBER: builtins.int
    FAULTS_FIELD_NUMBER: builtins.int
    TORQUE_ENABLED_FIELD_NUMBER: builtins.int
    MIN_POSITION_FIELD_NUMBER: builtins.int
    MAX_POSITION_FIELD_NUMBER: builtins.int
    KP_FIELD_NUMBER: builtins.int
    KD_FIELD_NUMBER: builtins.int
    KI_FIELD_NUMBER: builtins.int
    MAX_TORQUE_FIELD_NUMBER: builtins.int
    actuator_id: builtins.int
    """Actuator ID"""
    online: builtins.bool
    """Online status"""
    position: builtins.float
    """Position in degrees"""
    velocity: builtins.float
    """Velocity in degrees/second"""
    torque: builtins.float
    """Torque in Nm"""
    temperature: builtins.float
    """Temperature in Celsius"""
    voltage: builtins.float
    """Voltage in volts"""
    current: builtins.float
    """Current in amperes"""
    torque_enabled: builtins.bool
    """Torque Enabled"""
    min_position: builtins.float
    """Minimum position limit in degrees"""
    max_position: builtins.float
    """Maximum position limit in degrees"""
    kp: builtins.float
    """Proportional gain"""
    kd: builtins.float
    """Derivative gain"""
    ki: builtins.float
    """Integral gain"""
    max_torque: builtins.float
    """Maximum torque limit in Nm"""
    @property
    def faults(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Faults"""

    def __init__(
        self,
        *,
        actuator_id: builtins.int = ...,
        online: builtins.bool = ...,
        position: builtins.float | None = ...,
        velocity: builtins.float | None = ...,
        torque: builtins.float | None = ...,
        temperature: builtins.float | None = ...,
        voltage: builtins.float | None = ...,
        current: builtins.float | None = ...,
        faults: collections.abc.Iterable[builtins.str] | None = ...,
        torque_enabled: builtins.bool | None = ...,
        min_position: builtins.float | None = ...,
        max_position: builtins.float | None = ...,
        kp: builtins.float | None = ...,
        kd: builtins.float | None = ...,
        ki: builtins.float | None = ...,
        max_torque: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_current", b"_current", "_kd", b"_kd", "_ki", b"_ki", "_kp", b"_kp", "_max_position", b"_max_position", "_max_torque", b"_max_torque", "_min_position", b"_min_position", "_position", b"_position", "_temperature", b"_temperature", "_torque", b"_torque", "_torque_enabled", b"_torque_enabled", "_velocity", b"_velocity", "_voltage", b"_voltage", "current", b"current", "kd", b"kd", "ki", b"ki", "kp", b"kp", "max_position", b"max_position", "max_torque", b"max_torque", "min_position", b"min_position", "position", b"position", "temperature", b"temperature", "torque", b"torque", "torque_enabled", b"torque_enabled", "velocity", b"velocity", "voltage", b"voltage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_current", b"_current", "_kd", b"_kd", "_ki", b"_ki", "_kp", b"_kp", "_max_position", b"_max_position", "_max_torque", b"_max_torque", "_min_position", b"_min_position", "_position", b"_position", "_temperature", b"_temperature", "_torque", b"_torque", "_torque_enabled", b"_torque_enabled", "_velocity", b"_velocity", "_voltage", b"_voltage", "actuator_id", b"actuator_id", "current", b"current", "faults", b"faults", "kd", b"kd", "ki", b"ki", "kp", b"kp", "max_position", b"max_position", "max_torque", b"max_torque", "min_position", b"min_position", "online", b"online", "position", b"position", "temperature", b"temperature", "torque", b"torque", "torque_enabled", b"torque_enabled", "velocity", b"velocity", "voltage", b"voltage"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_current", b"_current"]) -> typing.Literal["current"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_kd", b"_kd"]) -> typing.Literal["kd"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_ki", b"_ki"]) -> typing.Literal["ki"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_kp", b"_kp"]) -> typing.Literal["kp"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_position", b"_max_position"]) -> typing.Literal["max_position"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_torque", b"_max_torque"]) -> typing.Literal["max_torque"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_min_position", b"_min_position"]) -> typing.Literal["min_position"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_position", b"_position"]) -> typing.Literal["position"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_temperature", b"_temperature"]) -> typing.Literal["temperature"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_torque", b"_torque"]) -> typing.Literal["torque"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_torque_enabled", b"_torque_enabled"]) -> typing.Literal["torque_enabled"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_velocity", b"_velocity"]) -> typing.Literal["velocity"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_voltage", b"_voltage"]) -> typing.Literal["voltage"] | None: ...

global___ActuatorStateResponse = ActuatorStateResponse

@typing.final
class ParameterDumpRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_IDS_FIELD_NUMBER: builtins.int
    @property
    def actuator_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Actuators to query"""

    def __init__(
        self,
        *,
        actuator_ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["actuator_ids", b"actuator_ids"]) -> None: ...

global___ParameterDumpRequest = ParameterDumpRequest

@typing.final
class ParameterDumpResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ParameterDumpEntry]:
        """One entry per actuator"""

    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___ParameterDumpEntry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___ParameterDumpResponse = ParameterDumpResponse

@typing.final
class ParameterDumpEntry(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACTUATOR_ID_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    actuator_id: builtins.int
    """Actuator ID"""
    @property
    def parameters(self) -> google.protobuf.struct_pb2.Struct:
        """Generic parameter dump (key-value map)"""

    def __init__(
        self,
        *,
        actuator_id: builtins.int = ...,
        parameters: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["parameters", b"parameters"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["actuator_id", b"actuator_id", "parameters", b"parameters"]) -> None: ...

global___ParameterDumpEntry = ParameterDumpEntry

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import kos.common_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class IMUValuesResponse(google.protobuf.message.Message):
    """Response message containing IMU values."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ACCEL_X_FIELD_NUMBER: builtins.int
    ACCEL_Y_FIELD_NUMBER: builtins.int
    ACCEL_Z_FIELD_NUMBER: builtins.int
    GYRO_X_FIELD_NUMBER: builtins.int
    GYRO_Y_FIELD_NUMBER: builtins.int
    GYRO_Z_FIELD_NUMBER: builtins.int
    MAG_X_FIELD_NUMBER: builtins.int
    MAG_Y_FIELD_NUMBER: builtins.int
    MAG_Z_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    accel_x: builtins.float
    """Acceleration X-axis in m/s^2"""
    accel_y: builtins.float
    """Acceleration Y-axis in m/s^2"""
    accel_z: builtins.float
    """Acceleration Z-axis in m/s^2"""
    gyro_x: builtins.float
    """Gyroscope X-axis in deg/s"""
    gyro_y: builtins.float
    """Gyroscope Y-axis in deg/s"""
    gyro_z: builtins.float
    """Gyroscope Z-axis in deg/s"""
    mag_x: builtins.float
    """Magnetometer X-axis in uT"""
    mag_y: builtins.float
    """Magnetometer Y-axis in uT"""
    mag_z: builtins.float
    """Magnetometer Z-axis in uT"""
    @property
    def error(self) -> kos.common_pb2.Error:
        """Error details if any"""

    def __init__(
        self,
        *,
        accel_x: builtins.float = ...,
        accel_y: builtins.float = ...,
        accel_z: builtins.float = ...,
        gyro_x: builtins.float = ...,
        gyro_y: builtins.float = ...,
        gyro_z: builtins.float = ...,
        mag_x: builtins.float | None = ...,
        mag_y: builtins.float | None = ...,
        mag_z: builtins.float | None = ...,
        error: kos.common_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_mag_x", b"_mag_x", "_mag_y", b"_mag_y", "_mag_z", b"_mag_z", "error", b"error", "mag_x", b"mag_x", "mag_y", b"mag_y", "mag_z", b"mag_z"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_mag_x", b"_mag_x", "_mag_y", b"_mag_y", "_mag_z", b"_mag_z", "accel_x", b"accel_x", "accel_y", b"accel_y", "accel_z", b"accel_z", "error", b"error", "gyro_x", b"gyro_x", "gyro_y", b"gyro_y", "gyro_z", b"gyro_z", "mag_x", b"mag_x", "mag_y", b"mag_y", "mag_z", b"mag_z"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_mag_x", b"_mag_x"]) -> typing.Literal["mag_x"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_mag_y", b"_mag_y"]) -> typing.Literal["mag_y"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_mag_z", b"_mag_z"]) -> typing.Literal["mag_z"] | None: ...

global___IMUValuesResponse = IMUValuesResponse

@typing.final
class CalibrateIMUResponse(google.protobuf.message.Message):
    """Response message for Calibrate IMU operation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ERROR_FIELD_NUMBER: builtins.int
    @property
    def error(self) -> kos.common_pb2.Error:
        """Error details if calibration failed"""

    def __init__(
        self,
        *,
        error: kos.common_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error"]) -> None: ...

global___CalibrateIMUResponse = CalibrateIMUResponse

@typing.final
class CalibrateIMUMetadata(google.protobuf.message.Message):
    """Metadata for Calibrate IMU operation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATUS_FIELD_NUMBER: builtins.int
    status: builtins.str
    """Status ("IN_PROGRESS", "SUCCEEDED", "FAILED")"""
    def __init__(
        self,
        *,
        status: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["status", b"status"]) -> None: ...

global___CalibrateIMUMetadata = CalibrateIMUMetadata

@typing.final
class ZeroIMURequest(google.protobuf.message.Message):
    """Request message for Zero IMU."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATION_FIELD_NUMBER: builtins.int
    MAX_RETRIES_FIELD_NUMBER: builtins.int
    MAX_ANGULAR_ERROR_FIELD_NUMBER: builtins.int
    MAX_VELOCITY_FIELD_NUMBER: builtins.int
    MAX_ACCELERATION_FIELD_NUMBER: builtins.int
    max_retries: builtins.int
    """Maximum number of retries"""
    max_angular_error: builtins.float
    """Maximum angular error during zeroing"""
    max_velocity: builtins.float
    """Maximum velocity during zeroing"""
    max_acceleration: builtins.float
    """Maximum acceleration during zeroing"""
    @property
    def duration(self) -> google.protobuf.duration_pb2.Duration:
        """Duration for zeroing"""

    def __init__(
        self,
        *,
        duration: google.protobuf.duration_pb2.Duration | None = ...,
        max_retries: builtins.int | None = ...,
        max_angular_error: builtins.float | None = ...,
        max_velocity: builtins.float | None = ...,
        max_acceleration: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_max_acceleration", b"_max_acceleration", "_max_angular_error", b"_max_angular_error", "_max_retries", b"_max_retries", "_max_velocity", b"_max_velocity", "duration", b"duration", "max_acceleration", b"max_acceleration", "max_angular_error", b"max_angular_error", "max_retries", b"max_retries", "max_velocity", b"max_velocity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_max_acceleration", b"_max_acceleration", "_max_angular_error", b"_max_angular_error", "_max_retries", b"_max_retries", "_max_velocity", b"_max_velocity", "duration", b"duration", "max_acceleration", b"max_acceleration", "max_angular_error", b"max_angular_error", "max_retries", b"max_retries", "max_velocity", b"max_velocity"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_acceleration", b"_max_acceleration"]) -> typing.Literal["max_acceleration"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_angular_error", b"_max_angular_error"]) -> typing.Literal["max_angular_error"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_retries", b"_max_retries"]) -> typing.Literal["max_retries"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_max_velocity", b"_max_velocity"]) -> typing.Literal["max_velocity"] | None: ...

global___ZeroIMURequest = ZeroIMURequest

@typing.final
class EulerAnglesResponse(google.protobuf.message.Message):
    """Response message containing Euler angles."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ROLL_FIELD_NUMBER: builtins.int
    PITCH_FIELD_NUMBER: builtins.int
    YAW_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    roll: builtins.float
    """Roll angle in degrees"""
    pitch: builtins.float
    """Pitch angle in degrees"""
    yaw: builtins.float
    """Yaw angle in degrees"""
    @property
    def error(self) -> kos.common_pb2.Error:
        """Error details if any"""

    def __init__(
        self,
        *,
        roll: builtins.float = ...,
        pitch: builtins.float = ...,
        yaw: builtins.float = ...,
        error: kos.common_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "pitch", b"pitch", "roll", b"roll", "yaw", b"yaw"]) -> None: ...

global___EulerAnglesResponse = EulerAnglesResponse

@typing.final
class QuaternionResponse(google.protobuf.message.Message):
    """Response message containing a normalized quaternion."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    W_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    x: builtins.float
    """Quaternion X component"""
    y: builtins.float
    """Quaternion Y component"""
    z: builtins.float
    """Quaternion Z component"""
    w: builtins.float
    """Quaternion W component"""
    @property
    def error(self) -> kos.common_pb2.Error:
        """Error details if any"""

    def __init__(
        self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
        z: builtins.float = ...,
        w: builtins.float = ...,
        error: kos.common_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "w", b"w", "x", b"x", "y", b"y", "z", b"z"]) -> None: ...

global___QuaternionResponse = QuaternionResponse

@typing.final
class IMUAdvancedValuesResponse(google.protobuf.message.Message):
    """Response message containing advanced/extended IMU values that may not be
    supported by all hardware implementations.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIN_ACC_X_FIELD_NUMBER: builtins.int
    LIN_ACC_Y_FIELD_NUMBER: builtins.int
    LIN_ACC_Z_FIELD_NUMBER: builtins.int
    GRAV_X_FIELD_NUMBER: builtins.int
    GRAV_Y_FIELD_NUMBER: builtins.int
    GRAV_Z_FIELD_NUMBER: builtins.int
    TEMP_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    lin_acc_x: builtins.float
    """Linear acceleration with gravity compensation
    Linear acceleration X-axis in m/s^2
    """
    lin_acc_y: builtins.float
    """Linear acceleration Y-axis in m/s^2"""
    lin_acc_z: builtins.float
    """Linear acceleration Z-axis in m/s^2"""
    grav_x: builtins.float
    """Projected gravity vector
    Projected gravity X-axis in m/s^2
    """
    grav_y: builtins.float
    """Projected gravity Y-axis in m/s^2"""
    grav_z: builtins.float
    """Projected gravity Z-axis in m/s^2"""
    temp: builtins.float
    """Temperature
    Temperature in degrees Celsius
    """
    @property
    def error(self) -> kos.common_pb2.Error:
        """Error details if any"""

    def __init__(
        self,
        *,
        lin_acc_x: builtins.float | None = ...,
        lin_acc_y: builtins.float | None = ...,
        lin_acc_z: builtins.float | None = ...,
        grav_x: builtins.float | None = ...,
        grav_y: builtins.float | None = ...,
        grav_z: builtins.float | None = ...,
        temp: builtins.float | None = ...,
        error: kos.common_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_grav_x", b"_grav_x", "_grav_y", b"_grav_y", "_grav_z", b"_grav_z", "_lin_acc_x", b"_lin_acc_x", "_lin_acc_y", b"_lin_acc_y", "_lin_acc_z", b"_lin_acc_z", "_temp", b"_temp", "error", b"error", "grav_x", b"grav_x", "grav_y", b"grav_y", "grav_z", b"grav_z", "lin_acc_x", b"lin_acc_x", "lin_acc_y", b"lin_acc_y", "lin_acc_z", b"lin_acc_z", "temp", b"temp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_grav_x", b"_grav_x", "_grav_y", b"_grav_y", "_grav_z", b"_grav_z", "_lin_acc_x", b"_lin_acc_x", "_lin_acc_y", b"_lin_acc_y", "_lin_acc_z", b"_lin_acc_z", "_temp", b"_temp", "error", b"error", "grav_x", b"grav_x", "grav_y", b"grav_y", "grav_z", b"grav_z", "lin_acc_x", b"lin_acc_x", "lin_acc_y", b"lin_acc_y", "lin_acc_z", b"lin_acc_z", "temp", b"temp"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_grav_x", b"_grav_x"]) -> typing.Literal["grav_x"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_grav_y", b"_grav_y"]) -> typing.Literal["grav_y"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_grav_z", b"_grav_z"]) -> typing.Literal["grav_z"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_lin_acc_x", b"_lin_acc_x"]) -> typing.Literal["lin_acc_x"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_lin_acc_y", b"_lin_acc_y"]) -> typing.Literal["lin_acc_y"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_lin_acc_z", b"_lin_acc_z"]) -> typing.Literal["lin_acc_z"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_temp", b"_temp"]) -> typing.Literal["temp"] | None: ...

global___IMUAdvancedValuesResponse = IMUAdvancedValuesResponse

@typing.final
class GetCalibrationStateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___GetCalibrationStateRequest = GetCalibrationStateRequest

@typing.final
class GetCalibrationStateResponse(google.protobuf.message.Message):
    """Response message for calibration state (generic / device agnostic)"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class StateEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.int
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    STATE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    @property
    def state(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.int]:
        """General-purpose key-value map for calibration state"""

    @property
    def error(self) -> kos.common_pb2.Error: ...
    def __init__(
        self,
        *,
        state: collections.abc.Mapping[builtins.str, builtins.int] | None = ...,
        error: kos.common_pb2.Error | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "state", b"state"]) -> None: ...

global___GetCalibrationStateResponse = GetCalibrationStateResponse

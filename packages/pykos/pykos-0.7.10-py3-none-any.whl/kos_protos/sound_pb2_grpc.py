# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from kos_protos import common_pb2 as kos_dot_common__pb2
from kos_protos import sound_pb2 as kos_dot_sound__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in kos/sound_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SoundServiceStub(object):
    """The SoundService provides methods to play audio through speakers and record from microphones
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAudioInfo = channel.unary_unary(
                '/kos.sound.SoundService/GetAudioInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=kos_dot_sound__pb2.GetAudioInfoResponse.FromString,
                _registered_method=True)
        self.PlayAudio = channel.stream_unary(
                '/kos.sound.SoundService/PlayAudio',
                request_serializer=kos_dot_sound__pb2.PlayAudioRequest.SerializeToString,
                response_deserializer=kos_dot_common__pb2.ActionResponse.FromString,
                _registered_method=True)
        self.RecordAudio = channel.unary_stream(
                '/kos.sound.SoundService/RecordAudio',
                request_serializer=kos_dot_sound__pb2.RecordAudioRequest.SerializeToString,
                response_deserializer=kos_dot_sound__pb2.RecordAudioResponse.FromString,
                _registered_method=True)
        self.StopRecording = channel.unary_unary(
                '/kos.sound.SoundService/StopRecording',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=kos_dot_common__pb2.ActionResponse.FromString,
                _registered_method=True)


class SoundServiceServicer(object):
    """The SoundService provides methods to play audio through speakers and record from microphones
    """

    def GetAudioInfo(self, request, context):
        """Gets information about audio capabilities
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayAudio(self, request_iterator, context):
        """Streams PCM audio data to the speaker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordAudio(self, request, context):
        """Records PCM audio data from the microphone
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopRecording(self, request, context):
        """Stops an ongoing recording session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SoundServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAudioInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudioInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=kos_dot_sound__pb2.GetAudioInfoResponse.SerializeToString,
            ),
            'PlayAudio': grpc.stream_unary_rpc_method_handler(
                    servicer.PlayAudio,
                    request_deserializer=kos_dot_sound__pb2.PlayAudioRequest.FromString,
                    response_serializer=kos_dot_common__pb2.ActionResponse.SerializeToString,
            ),
            'RecordAudio': grpc.unary_stream_rpc_method_handler(
                    servicer.RecordAudio,
                    request_deserializer=kos_dot_sound__pb2.RecordAudioRequest.FromString,
                    response_serializer=kos_dot_sound__pb2.RecordAudioResponse.SerializeToString,
            ),
            'StopRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.StopRecording,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=kos_dot_common__pb2.ActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kos.sound.SoundService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('kos.sound.SoundService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SoundService(object):
    """The SoundService provides methods to play audio through speakers and record from microphones
    """

    @staticmethod
    def GetAudioInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.sound.SoundService/GetAudioInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            kos_dot_sound__pb2.GetAudioInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlayAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/kos.sound.SoundService/PlayAudio',
            kos_dot_sound__pb2.PlayAudioRequest.SerializeToString,
            kos_dot_common__pb2.ActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordAudio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/kos.sound.SoundService/RecordAudio',
            kos_dot_sound__pb2.RecordAudioRequest.SerializeToString,
            kos_dot_sound__pb2.RecordAudioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.sound.SoundService/StopRecording',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            kos_dot_common__pb2.ActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

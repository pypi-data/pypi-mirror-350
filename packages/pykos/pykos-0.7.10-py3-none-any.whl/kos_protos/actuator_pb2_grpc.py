# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.longrunning import operations_pb2 as google_dot_longrunning_dot_operations__pb2
from kos_protos import actuator_pb2 as kos_dot_actuator__pb2
from kos_protos import common_pb2 as kos_dot_common__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in kos/actuator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ActuatorServiceStub(object):
    """The ActuatorService provides methods to control and monitor actuators.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CommandActuators = channel.unary_unary(
                '/kos.actuator.ActuatorService/CommandActuators',
                request_serializer=kos_dot_actuator__pb2.CommandActuatorsRequest.SerializeToString,
                response_deserializer=kos_dot_actuator__pb2.CommandActuatorsResponse.FromString,
                _registered_method=True)
        self.ConfigureActuator = channel.unary_unary(
                '/kos.actuator.ActuatorService/ConfigureActuator',
                request_serializer=kos_dot_actuator__pb2.ConfigureActuatorRequest.SerializeToString,
                response_deserializer=kos_dot_common__pb2.ActionResponse.FromString,
                _registered_method=True)
        self.CalibrateActuator = channel.unary_unary(
                '/kos.actuator.ActuatorService/CalibrateActuator',
                request_serializer=kos_dot_actuator__pb2.CalibrateActuatorRequest.SerializeToString,
                response_deserializer=google_dot_longrunning_dot_operations__pb2.Operation.FromString,
                _registered_method=True)
        self.GetActuatorsState = channel.unary_unary(
                '/kos.actuator.ActuatorService/GetActuatorsState',
                request_serializer=kos_dot_actuator__pb2.GetActuatorsStateRequest.SerializeToString,
                response_deserializer=kos_dot_actuator__pb2.GetActuatorsStateResponse.FromString,
                _registered_method=True)
        self.ParameterDump = channel.unary_unary(
                '/kos.actuator.ActuatorService/ParameterDump',
                request_serializer=kos_dot_actuator__pb2.ParameterDumpRequest.SerializeToString,
                response_deserializer=kos_dot_actuator__pb2.ParameterDumpResponse.FromString,
                _registered_method=True)


class ActuatorServiceServicer(object):
    """The ActuatorService provides methods to control and monitor actuators.
    """

    def CommandActuators(self, request, context):
        """Commands multiple actuators at once.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureActuator(self, request, context):
        """Configures an actuator's parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalibrateActuator(self, request, context):
        """Calibrates an actuator (long-running operation).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActuatorsState(self, request, context):
        """Retrieves the state of multiple actuators.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParameterDump(self, request, context):
        """Retrieves all available parameters for specified actuators.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActuatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CommandActuators': grpc.unary_unary_rpc_method_handler(
                    servicer.CommandActuators,
                    request_deserializer=kos_dot_actuator__pb2.CommandActuatorsRequest.FromString,
                    response_serializer=kos_dot_actuator__pb2.CommandActuatorsResponse.SerializeToString,
            ),
            'ConfigureActuator': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureActuator,
                    request_deserializer=kos_dot_actuator__pb2.ConfigureActuatorRequest.FromString,
                    response_serializer=kos_dot_common__pb2.ActionResponse.SerializeToString,
            ),
            'CalibrateActuator': grpc.unary_unary_rpc_method_handler(
                    servicer.CalibrateActuator,
                    request_deserializer=kos_dot_actuator__pb2.CalibrateActuatorRequest.FromString,
                    response_serializer=google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
            ),
            'GetActuatorsState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActuatorsState,
                    request_deserializer=kos_dot_actuator__pb2.GetActuatorsStateRequest.FromString,
                    response_serializer=kos_dot_actuator__pb2.GetActuatorsStateResponse.SerializeToString,
            ),
            'ParameterDump': grpc.unary_unary_rpc_method_handler(
                    servicer.ParameterDump,
                    request_deserializer=kos_dot_actuator__pb2.ParameterDumpRequest.FromString,
                    response_serializer=kos_dot_actuator__pb2.ParameterDumpResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kos.actuator.ActuatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('kos.actuator.ActuatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ActuatorService(object):
    """The ActuatorService provides methods to control and monitor actuators.
    """

    @staticmethod
    def CommandActuators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.actuator.ActuatorService/CommandActuators',
            kos_dot_actuator__pb2.CommandActuatorsRequest.SerializeToString,
            kos_dot_actuator__pb2.CommandActuatorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureActuator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.actuator.ActuatorService/ConfigureActuator',
            kos_dot_actuator__pb2.ConfigureActuatorRequest.SerializeToString,
            kos_dot_common__pb2.ActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CalibrateActuator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.actuator.ActuatorService/CalibrateActuator',
            kos_dot_actuator__pb2.CalibrateActuatorRequest.SerializeToString,
            google_dot_longrunning_dot_operations__pb2.Operation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActuatorsState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.actuator.ActuatorService/GetActuatorsState',
            kos_dot_actuator__pb2.GetActuatorsStateRequest.SerializeToString,
            kos_dot_actuator__pb2.GetActuatorsStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ParameterDump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kos.actuator.ActuatorService/ParameterDump',
            kos_dot_actuator__pb2.ParameterDumpRequest.SerializeToString,
            kos_dot_actuator__pb2.ParameterDumpResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

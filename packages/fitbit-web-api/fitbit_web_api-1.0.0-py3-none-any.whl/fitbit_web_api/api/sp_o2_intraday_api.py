# coding: utf-8

"""
Fitbit Web API Explorer

Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.  # noqa: E501

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from fitbit_web_api.api_client import ApiClient


class SpO2IntradayApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_sp_o2_intraday_by_date(self, _date, **kwargs):  # noqa: E501
        """Get SpO2 Intraday by Date  # noqa: E501

        This endpoint returns the SpO2 intraday data for a single date. SpO2 applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sp_o2_intraday_by_date(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: The date in the format of yyyy-MM-dd or today. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_sp_o2_intraday_by_date_with_http_info(
                _date, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_sp_o2_intraday_by_date_with_http_info(
                _date, **kwargs
            )  # noqa: E501
            return data

    def get_sp_o2_intraday_by_date_with_http_info(self, _date, **kwargs):  # noqa: E501
        """Get SpO2 Intraday by Date  # noqa: E501

        This endpoint returns the SpO2 intraday data for a single date. SpO2 applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sp_o2_intraday_by_date_with_http_info(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: The date in the format of yyyy-MM-dd or today. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sp_o2_intraday_by_date" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter '_date' is set
        if "_date" not in params or params["_date"] is None:
            raise ValueError(
                "Missing the required parameter `_date` when calling `get_sp_o2_intraday_by_date`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "_date" in params:
            path_params["date"] = params["_date"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/1/user/-/spo2/date/{date}/all.json",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_sp_o2_intraday_by_interval(
        self, start_date, end_date, **kwargs
    ):  # noqa: E501
        """Get SpO2 Intraday by Interval  # noqa: E501

        This endpoint returns the SpO2 intraday data for a specified date range. SpO2 applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sp_o2_intraday_by_interval(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: The date in the format of yyyy-MM-dd or today. (required)
        :param date end_date: The date in the format of yyyy-MM-dd or today. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_sp_o2_intraday_by_interval_with_http_info(
                start_date, end_date, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_sp_o2_intraday_by_interval_with_http_info(
                start_date, end_date, **kwargs
            )  # noqa: E501
            return data

    def get_sp_o2_intraday_by_interval_with_http_info(
        self, start_date, end_date, **kwargs
    ):  # noqa: E501
        """Get SpO2 Intraday by Interval  # noqa: E501

        This endpoint returns the SpO2 intraday data for a specified date range. SpO2 applies specifically to a user’s “main sleep”, which is the longest single period of time asleep on a given date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sp_o2_intraday_by_interval_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date start_date: The date in the format of yyyy-MM-dd or today. (required)
        :param date end_date: The date in the format of yyyy-MM-dd or today. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["start_date", "end_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sp_o2_intraday_by_interval" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'start_date' is set
        if "start_date" not in params or params["start_date"] is None:
            raise ValueError(
                "Missing the required parameter `start_date` when calling `get_sp_o2_intraday_by_interval`"
            )  # noqa: E501
        # verify the required parameter 'end_date' is set
        if "end_date" not in params or params["end_date"] is None:
            raise ValueError(
                "Missing the required parameter `end_date` when calling `get_sp_o2_intraday_by_interval`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "start_date" in params:
            path_params["startDate"] = params["start_date"]  # noqa: E501
        if "end_date" in params:
            path_params["endDate"] = params["end_date"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/1/user/-/spo2/date/{startDate}/{endDate}/all.json",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

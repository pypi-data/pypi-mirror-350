[tool.poetry]
name = "enochecker_test"
version = "0.10.1"
description = "Library to help testing checker scripts based on enochecker"
authors = ["ldruschk <ldrushk@posteo.de>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/enowars/enochecker_test"
repository = "https://github.com/enowars/enochecker_test"
classifiers = [
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    "Development Status :: 3 - Alpha",
    # Indicate who your project is intended for
    # 'Intended Audience :: Developers',
    "License :: OSI Approved :: MIT License",
    # Specify the Python versions you support here. In particular, ensure
    # that you indicate whether you support Python 2, Python 3 or both.
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[tool.poetry.dependencies]
python = ">=3.8.1,<=4.0"
enochecker-core = "^0.10.0"
jsons = "^1.6.3"
pytest = "^8.2.1"
requests = "^2.32.3"

[tool.poetry.group.test.dependencies]
black = "^24.4.2"
flake8 = "^7.0.0"
isort = "^5.13.2"
mypy = "^1.10.0"

types-requests = "^2.30"

[tool.poetry.scripts]
enochecker_test = "enochecker_test.main:main"

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "pytest"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "enochecker"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "enochecker_core"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "jsons"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "enochecker_test"

[tool.isort]
profile = "black"
multi_line_output=3
include_trailing_comma = true
line_length = 88
force_grid_wrap = 0
use_parentheses = true

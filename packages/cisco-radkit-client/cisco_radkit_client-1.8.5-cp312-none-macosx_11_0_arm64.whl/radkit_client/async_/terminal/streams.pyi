from ..request import AsyncStreamRequest
from ..rpc_translation import AnyOutgoingRPCRequest
from ..state import AsyncServiceState
from _typeshed import Incomplete
from collections.abc import AsyncGenerator, Callable, Coroutine, Generator
from contextlib import AbstractAsyncContextManager
from dataclasses import dataclass, field
from pathlib import Path
from radkit_common.rpc.definition import RPC_Definition
from typing import Any, Generic
from typing_extensions import Self

__all__ = ['StreamRequestWriter', 'StreamRequestReader', 'BinaryStreamRequestHandler', 'AsyncBinaryStreamRequest', 'RotatedSessionLog']

@dataclass
class StreamRequestWriter:
    bytes_written: int = ...
    def __post_init__(self) -> None: ...
    async def write(self, data: bytes) -> None: ...
    async def write_eof(self) -> None: ...
    async def close_with_failure(self, message: str = '') -> None: ...

@dataclass
class StreamRequestReader:
    bytes_read: int = ...
    def __post_init__(self) -> None: ...
    async def read_chunk(self) -> bytes: ...
    def unread(self, data: bytes) -> None: ...
    def at_eof(self) -> bool: ...

class BinaryStreamRequestHandler(Generic[_T_ResponseModel, _T_UploadModel]):
    on_connected: Incomplete
    handle_special_data: Incomplete
    rotated_session_log: RotatedSessionLog | None
    stream_reader: Incomplete
    stream_writer: Incomplete
    connected_future: Incomplete
    def __init__(self, on_connected: Callable[[], Coroutine[Any, Any, None]] | None = None, handle_special_data: Callable[[_T_ResponseModel], Coroutine[Any, Any, None]] | None = None, session_log_filepath: Path | None = None) -> None: ...
    async def call(self, create_rpc_request: Callable[[], AbstractAsyncContextManager[AnyOutgoingRPCRequest[_T_ResponseModel, _T_UploadModel]]]) -> None: ...
    async def write_non_binary(self, data: _T_UploadModel) -> None: ...

class AsyncBinaryStreamRequest(AsyncStreamRequest[_T_RequestModel, _T_ResponseModel, _T_UploadModel], Generic[_T_RequestModel, _T_ResponseModel, _T_UploadModel]):
    __pt_repr__: Incomplete
    binary_stream_request_handler: BinaryStreamRequestHandler[_T_ResponseModel, _T_UploadModel]
    def __init__(self, service_state: AsyncServiceState, rpc_definition: RPC_Definition[_T_RequestModel, _T_ResponseModel, _T_UploadModel], request_object: _T_RequestModel, message: str, on_connected: Callable[[], Coroutine[Any, Any, None]] | None = None, handle_special_data: Callable[[_T_ResponseModel], Coroutine[Any, Any, None]] | None = None, session_log_filepath: Path | None = None) -> None: ...
    @property
    def session_log(self) -> RotatedSessionLog | None: ...
    def bytes_read(self) -> int: ...
    def bytes_written(self) -> int: ...

@dataclass(frozen=True)
class _SessionLogEntry:
    filepath: Path
    id: int = field(default_factory=_session_log_id_generator.next)
    @classmethod
    def create(cls, filepath: Path) -> Generator[Self, None, None]: ...
    def write(self, msg: bytes) -> None: ...

@dataclass
class RotatedSessionLog:
    logs: list[_SessionLogEntry] = field(default_factory=list, init=False)
    @property
    def filepath(self) -> Path: ...
    @classmethod
    async def create(cls, filepath: Path) -> AsyncGenerator[Self, None]: ...
    async def rotate(self, new_filepath: Path) -> None: ...
    def write(self, msg: bytes) -> None: ...

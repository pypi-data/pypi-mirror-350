You are tasked with creating a commit message based on a git diff. The git diff will be provided to you, and you should analyze it to create an informative and structured commit message.

Here are the code diffs to analyse surrounded by <code_diffs> tags:
<code_diffs>
{{CONTEXT}}
</code_diffs>

Your task is to create a commit message following a specific template. The commit message should include several sections, each with its own purpose. Follow these instructions carefully:

1. Title:
Analyze the git diff and write a one-line summary of the changes as a title. Use the Conventional Commits specification in the format: "(feat) TITLE". This title must not exceed 50 characters.

2. Changes:
For each change in the diff, create a new line with a detailed description of the change.

3. Reason for Changes:
Explain the reason for these changes, highlighting what the code used to do and what it does now after the change. This could be to fix a bug, add a new feature, improve performance, etc.

4. Potential Issues:
If there are any potential bugs or issues with the changes, list them here. When showing bugs or issues, make sure to highlight the relevant code if possible. This warning is mainly for the author of the changes so that they may consider refactoring or revising the code. Think of this as a code review.

5. TODOs:
If there are any TODOs in the new code, list them under the title "TODOs:". Include the exact TODOs in the code as well as the file(s) they are in. This is for the reviewer to know what to look for.

6. Code Review:
Perform a code review and look for potential issues, especially code that may crash the app. Add a paragraph containing the results of the code review.

7. Quote of the Day:
Take a breath and look deeply at the code changes you've just analyzed. Come up with a creative quote of the day that is creatively related to the changes in the code. Try to make it as humorous as possible. Before choosing a quote, come up with several options and only select one that you think really seems connected to the code changes somehow.

Additional guidelines:
- Do not include new TODOs in the summary, description, potential bugs, or title.
- Wrap lines longer than 80 characters (word wrap).
- Do not include any tags beginning with __ in the output.
- Do not include closing tags or unnecessary open-and-close tag sections in your response.
- If the version is updated ALWAYS mention it in the title and first in the list of changes.

Your final commit message should follow this structure:

(feat) Title

Changes:
- Change 1
- Change 2

Reason for Changes:
[Explanation]

Potential Issues:
[List of potential issues, if any]

TODOs:
[List of TODOs, if any]

Code Review:
[Code review results]

Quote of the day:
[Your creative and humorous quote]

Remember to analyze the git diff carefully and provide accurate and helpful information in each section.
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import allegoserver_pb2 as allegoserver__pb2
from . import biointerface_pb2 as biointerface__pb2
from . import common_pb2 as common__pb2
from . import datasource_pb2 as datasource__pb2
from . import spikesorter_pb2 as spikesorter__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in allegoserver_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AllegoCoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthcheck = channel.unary_unary(
                '/allego.AllegoCore/Healthcheck',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.Restart = channel.unary_unary(
                '/allego.AllegoCore/Restart',
                request_serializer=allegoserver__pb2.RestartRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.LaunchSummaService = channel.unary_unary(
                '/allego.AllegoCore/LaunchSummaService',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.Close = channel.unary_unary(
                '/allego.AllegoCore/Close',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetRadixEnvironment = channel.unary_unary(
                '/allego.AllegoCore/GetRadixEnvironment',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.RadixEnvironment.FromString,
                _registered_method=True)
        self.WorkspaceControl = channel.unary_unary(
                '/allego.AllegoCore/WorkspaceControl',
                request_serializer=common__pb2.WorkspaceControlRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetRadiensServers = channel.unary_unary(
                '/allego.AllegoCore/GetRadiensServers',
                request_serializer=common__pb2.GetRadiensServersRequest.SerializeToString,
                response_deserializer=common__pb2.RadiensServersReply.FromString,
                _registered_method=True)
        self.GetStatusPollFieldsToUpdate = channel.unary_unary(
                '/allego.AllegoCore/GetStatusPollFieldsToUpdate',
                request_serializer=common__pb2.StatusPollFieldsToUpdateRequest.SerializeToString,
                response_deserializer=common__pb2.StatusPollFieldsToUpdate.FromString,
                _registered_method=True)
        self.GetOfflineLicenseStatus = channel.unary_unary(
                '/allego.AllegoCore/GetOfflineLicenseStatus',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.OfflineLicenseStatus.FromString,
                _registered_method=True)
        self.GetHardwareUUID = channel.unary_unary(
                '/allego.AllegoCore/GetHardwareUUID',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.HardwareUUIDResponse.FromString,
                _registered_method=True)
        self.SetConfigCore = channel.unary_unary(
                '/allego.AllegoCore/SetConfigCore',
                request_serializer=allegoserver__pb2.SetConfigCoreRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetProfileState = channel.unary_unary(
                '/allego.AllegoCore/SetProfileState',
                request_serializer=allegoserver__pb2.SetProfileRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetConfigRecording = channel.unary_unary(
                '/allego.AllegoCore/SetConfigRecording',
                request_serializer=allegoserver__pb2.ConfigRecording.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetStreamState = channel.unary_unary(
                '/allego.AllegoCore/SetStreamState',
                request_serializer=allegoserver__pb2.SetStreamRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetRecordState = channel.unary_unary(
                '/allego.AllegoCore/SetRecordState',
                request_serializer=allegoserver__pb2.SetRecordRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetDIOEvents = channel.unary_unary(
                '/allego.AllegoCore/SetDIOEvents',
                request_serializer=allegoserver__pb2.DIOModeEventsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetDIOManual = channel.unary_unary(
                '/allego.AllegoCore/SetDIOManual',
                request_serializer=allegoserver__pb2.DIOModeManualRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetDIOGated = channel.unary_unary(
                '/allego.AllegoCore/SetDIOGated',
                request_serializer=allegoserver__pb2.DIOModeGatedRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetDACGain = channel.unary_unary(
                '/allego.AllegoCore/SetDACGain',
                request_serializer=allegoserver__pb2.DACGainRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetDACStream = channel.unary_unary(
                '/allego.AllegoCore/SetDACStream',
                request_serializer=common__pb2.DACStreamRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetDACOff = channel.unary_unary(
                '/allego.AllegoCore/SetDACOff',
                request_serializer=common__pb2.DACOffRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetDACHighPass = channel.unary_unary(
                '/allego.AllegoCore/SetDACHighPass',
                request_serializer=allegoserver__pb2.DACHighPassRegister.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetSimPorts = channel.unary_unary(
                '/allego.AllegoCore/SetSimPorts',
                request_serializer=allegoserver__pb2.SetSimPortsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetHasBNCBreakout = channel.unary_unary(
                '/allego.AllegoCore/SetHasBNCBreakout',
                request_serializer=allegoserver__pb2.SetHasBNCBreakoutRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetMuxChannel = channel.unary_unary(
                '/allego.AllegoCore/SetMuxChannel',
                request_serializer=allegoserver__pb2.SetMuxChannelRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetTriggerState = channel.unary_unary(
                '/allego.AllegoCore/SetTriggerState',
                request_serializer=allegoserver__pb2.SetTriggerRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetPotVoltage = channel.unary_unary(
                '/allego.AllegoCore/SetPotVoltage',
                request_serializer=allegoserver__pb2.SetPotVoltageRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetPotRange = channel.unary_unary(
                '/allego.AllegoCore/SetPotRange',
                request_serializer=allegoserver__pb2.SetPotRangeRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetPotMode = channel.unary_unary(
                '/allego.AllegoCore/SetPotMode',
                request_serializer=allegoserver__pb2.SetPotModeRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetPotCellEnable = channel.unary_unary(
                '/allego.AllegoCore/SetPotCellEnable',
                request_serializer=allegoserver__pb2.SetPotCellEnableRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetDSPGroup = channel.unary_unary(
                '/allego.AllegoCore/SetDSPGroup',
                request_serializer=common__pb2.SetDSPGroupRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetStimParams = channel.unary_unary(
                '/allego.AllegoCore/SetStimParams',
                request_serializer=allegoserver__pb2.StimParams.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetStimParams = channel.unary_unary(
                '/allego.AllegoCore/GetStimParams',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.StimParamsReply.FromString,
                _registered_method=True)
        self.SetStimStep = channel.unary_unary(
                '/allego.AllegoCore/SetStimStep',
                request_serializer=allegoserver__pb2.StimStepMessage.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetStimStep = channel.unary_unary(
                '/allego.AllegoCore/GetStimStep',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.StimStepMessage.FromString,
                _registered_method=True)
        self.ManualStimTrigger = channel.unary_unary(
                '/allego.AllegoCore/ManualStimTrigger',
                request_serializer=allegoserver__pb2.ManualStimTriggerRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.ManualStimTriggerToggle = channel.unary_unary(
                '/allego.AllegoCore/ManualStimTriggerToggle',
                request_serializer=allegoserver__pb2.ManualStimTriggerToggleRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetConfig = channel.unary_unary(
                '/allego.AllegoCore/GetConfig',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.ConfigCore.FromString,
                _registered_method=True)
        self.GetWorkspace = channel.unary_unary(
                '/allego.AllegoCore/GetWorkspace',
                request_serializer=common__pb2.GetWorkspaceRequest.SerializeToString,
                response_deserializer=common__pb2.GetWorkspaceReply.FromString,
                _registered_method=True)
        self.GetConfigRecording = channel.unary_unary(
                '/allego.AllegoCore/GetConfigRecording',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.ConfigRecording.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/allego.AllegoCore/GetStatus',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.BackboneStatus.FromString,
                _registered_method=True)
        self.GetConfigAndStatus = channel.unary_unary(
                '/allego.AllegoCore/GetConfigAndStatus',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.ConfigAndStatus.FromString,
                _registered_method=True)
        self.GetDataSourceParams = channel.unary_unary(
                '/allego.AllegoCore/GetDataSourceParams',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceParams.FromString,
                _registered_method=True)
        self.GetIntanImpedance = channel.unary_unary(
                '/allego.AllegoCore/GetIntanImpedance',
                request_serializer=datasource__pb2.ImpedanceRequest.SerializeToString,
                response_deserializer=datasource__pb2.Impedance.FromString,
                _registered_method=True)
        self.GetDSPGroup = channel.unary_unary(
                '/allego.AllegoCore/GetDSPGroup',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.DSPGroup.FromString,
                _registered_method=True)
        self.GetDIOReg = channel.unary_unary(
                '/allego.AllegoCore/GetDIOReg',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.DigitalOutRegister.FromString,
                _registered_method=True)
        self.GetDACReg = channel.unary_unary(
                '/allego.AllegoCore/GetDACReg',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.AnalogOutRegister.FromString,
                _registered_method=True)
        self.GetSerial = channel.unary_unary(
                '/allego.AllegoCore/GetSerial',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.SerialNumber.FromString,
                _registered_method=True)
        self.GetTriggerState = channel.unary_unary(
                '/allego.AllegoCore/GetTriggerState',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.TriggerState.FromString,
                _registered_method=True)
        self.GetADCLevel = channel.unary_unary(
                '/allego.AllegoCore/GetADCLevel',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.GetADCLevelReply.FromString,
                _registered_method=True)
        self.ReadWireOut = channel.unary_unary(
                '/allego.AllegoCore/ReadWireOut',
                request_serializer=allegoserver__pb2.ReadWireOutRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.ReadWireOutReply.FromString,
                _registered_method=True)
        self.ListSensorSpecs = channel.unary_unary(
                '/allego.AllegoCore/ListSensorSpecs',
                request_serializer=common__pb2.ListSensorSpecsRequest.SerializeToString,
                response_deserializer=common__pb2.ListSensorSpecsReply.FromString,
                _registered_method=True)
        self.GetSignalGroupIDs = channel.unary_unary(
                '/allego.AllegoCore/GetSignalGroupIDs',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.GetSignalGroupIDsReply.FromString,
                _registered_method=True)
        self.GetSorterIDMap = channel.unary_unary(
                '/allego.AllegoCore/GetSorterIDMap',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.GetSorterIDMapReply.FromString,
                _registered_method=True)
        self.GetSpikeSorterIDs = channel.unary_unary(
                '/allego.AllegoCore/GetSpikeSorterIDs',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.GetSpikeSorterIDsReply.FromString,
                _registered_method=True)
        self.GetSignalGroup = channel.unary_unary(
                '/allego.AllegoCore/GetSignalGroup',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.SignalGroup.FromString,
                _registered_method=True)
        self.UpdateSignalGroup = channel.unary_unary(
                '/allego.AllegoCore/UpdateSignalGroup',
                request_serializer=common__pb2.UpdateSignalGroupRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.ScanPorts = channel.unary_unary(
                '/allego.AllegoCore/ScanPorts',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.SignalGroup.FromString,
                _registered_method=True)
        self.SetSensor = channel.unary_unary(
                '/allego.AllegoCore/SetSensor',
                request_serializer=common__pb2.SetSensorRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.ImportSensorFromCSV = channel.unary_unary(
                '/allego.AllegoCore/ImportSensorFromCSV',
                request_serializer=common__pb2.ImportSensorRequest.SerializeToString,
                response_deserializer=common__pb2.ImportSensorReply.FromString,
                _registered_method=True)
        self.SetSensorPositionTcs = channel.unary_unary(
                '/allego.AllegoCore/SetSensorPositionTcs',
                request_serializer=common__pb2.SetSensorPositionTcsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetSitePositionsTcs = channel.unary_unary(
                '/allego.AllegoCore/SetSitePositionsTcs',
                request_serializer=common__pb2.SetSitePositionsTcsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetDataSourceStatus = channel.unary_unary(
                '/allego.AllegoCore/GetDataSourceStatus',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.DataSourceStatus.FromString,
                _registered_method=True)
        self.FeatureStart = channel.unary_unary(
                '/allego.AllegoCore/FeatureStart',
                request_serializer=common__pb2.FeatureStartStopRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.FeatureStop = channel.unary_unary(
                '/allego.AllegoCore/FeatureStop',
                request_serializer=common__pb2.FeatureStartStopRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetPrivacy = channel.unary_unary(
                '/allego.AllegoCore/GetPrivacy',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.PrivacyReply.FromString,
                _registered_method=True)
        self.SetPrivacy = channel.unary_unary(
                '/allego.AllegoCore/SetPrivacy',
                request_serializer=common__pb2.SetPrivacyRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.LoadAllMosi = channel.unary_unary(
                '/allego.AllegoCore/LoadAllMosi',
                request_serializer=allegoserver__pb2.LoadAllMosiRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.TransmitMosi = channel.unary_unary(
                '/allego.AllegoCore/TransmitMosi',
                request_serializer=allegoserver__pb2.TransmitMosiRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.DumpMiso = channel.unary_unary(
                '/allego.AllegoCore/DumpMiso',
                request_serializer=allegoserver__pb2.DumpMisoRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetSinapsStatusRegisters = channel.unary_unary(
                '/allego.AllegoCore/GetSinapsStatusRegisters',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.SinapsStatusRegisters.FromString,
                _registered_method=True)
        self.FlashSinaps = channel.unary_unary(
                '/allego.AllegoCore/FlashSinaps',
                request_serializer=allegoserver__pb2.FlashSinapsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetOrCreateEventViewer = channel.unary_unary(
                '/allego.AllegoCore/GetOrCreateEventViewer',
                request_serializer=common__pb2.EventViewerID.SerializeToString,
                response_deserializer=common__pb2.EventViewerConfig.FromString,
                _registered_method=True)
        self.UpdateEventViewer = channel.unary_unary(
                '/allego.AllegoCore/UpdateEventViewer',
                request_serializer=common__pb2.EventViewerConfig.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.ListEventViewerEvents = channel.unary_unary(
                '/allego.AllegoCore/ListEventViewerEvents',
                request_serializer=common__pb2.EventViewerID.SerializeToString,
                response_deserializer=common__pb2.ListEventViewerEventsReply.FromString,
                _registered_method=True)
        self.GetEventViewerEvent = channel.unary_unary(
                '/allego.AllegoCore/GetEventViewerEvent',
                request_serializer=common__pb2.GetEventViewerEventRequest.SerializeToString,
                response_deserializer=common__pb2.EventViewerEvent.FromString,
                _registered_method=True)
        self.ListEventViewers = channel.unary_unary(
                '/allego.AllegoCore/ListEventViewers',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.ListEventViewersReply.FromString,
                _registered_method=True)
        self.GetHALdashboard = channel.unary_unary(
                '/allego.AllegoCore/GetHALdashboard',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=allegoserver__pb2.HALdashboard.FromString,
                _registered_method=True)


class AllegoCoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Healthcheck(self, request, context):
        """Lifecycle
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LaunchSummaService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRadixEnvironment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkspaceControl(self, request, context):
        """rpc LogSystemInfo (LogSystemRequest) returns (StandardReply) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRadiensServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatusPollFieldsToUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOfflineLicenseStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHardwareUUID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConfigCore(self, request, context):
        """Setters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetProfileState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConfigRecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStreamState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRecordState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDIOEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDIOManual(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDIOGated(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDACGain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDACStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDACOff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDACHighPass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSimPorts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetHasBNCBreakout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMuxChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTriggerState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPotVoltage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPotRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPotMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPotCellEnable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDSPGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStimParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStimParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetStimStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStimStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManualStimTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManualStimTriggerToggle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConfig(self, request, context):
        """Getters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConfigRecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConfigAndStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataSourceParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIntanImpedance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDSPGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDIOReg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDACReg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSerial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetADCLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadWireOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSensorSpecs(self, request, context):
        """Selection Groups and Sensors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignalGroupIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSorterIDMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpikeSorterIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignalGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSignalGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScanPorts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportSensorFromCSV(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSensorPositionTcs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSitePositionsTcs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataSourceStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeatureStart(self, request, context):
        """Licensing and analytics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeatureStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrivacy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPrivacy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadAllMosi(self, request, context):
        """MOSI functions for sinaps
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransmitMosi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DumpMiso(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSinapsStatusRegisters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlashSinaps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrCreateEventViewer(self, request, context):
        """EventViewer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEventViewer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEventViewerEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventViewerEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEventViewers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHALdashboard(self, request, context):
        """HAL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AllegoCoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'Restart': grpc.unary_unary_rpc_method_handler(
                    servicer.Restart,
                    request_deserializer=allegoserver__pb2.RestartRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'LaunchSummaService': grpc.unary_unary_rpc_method_handler(
                    servicer.LaunchSummaService,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetRadixEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRadixEnvironment,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.RadixEnvironment.SerializeToString,
            ),
            'WorkspaceControl': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkspaceControl,
                    request_deserializer=common__pb2.WorkspaceControlRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetRadiensServers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRadiensServers,
                    request_deserializer=common__pb2.GetRadiensServersRequest.FromString,
                    response_serializer=common__pb2.RadiensServersReply.SerializeToString,
            ),
            'GetStatusPollFieldsToUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatusPollFieldsToUpdate,
                    request_deserializer=common__pb2.StatusPollFieldsToUpdateRequest.FromString,
                    response_serializer=common__pb2.StatusPollFieldsToUpdate.SerializeToString,
            ),
            'GetOfflineLicenseStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOfflineLicenseStatus,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.OfflineLicenseStatus.SerializeToString,
            ),
            'GetHardwareUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHardwareUUID,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.HardwareUUIDResponse.SerializeToString,
            ),
            'SetConfigCore': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfigCore,
                    request_deserializer=allegoserver__pb2.SetConfigCoreRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetProfileState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetProfileState,
                    request_deserializer=allegoserver__pb2.SetProfileRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetConfigRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfigRecording,
                    request_deserializer=allegoserver__pb2.ConfigRecording.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetStreamState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStreamState,
                    request_deserializer=allegoserver__pb2.SetStreamRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetRecordState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRecordState,
                    request_deserializer=allegoserver__pb2.SetRecordRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetDIOEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDIOEvents,
                    request_deserializer=allegoserver__pb2.DIOModeEventsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetDIOManual': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDIOManual,
                    request_deserializer=allegoserver__pb2.DIOModeManualRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetDIOGated': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDIOGated,
                    request_deserializer=allegoserver__pb2.DIOModeGatedRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetDACGain': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDACGain,
                    request_deserializer=allegoserver__pb2.DACGainRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetDACStream': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDACStream,
                    request_deserializer=common__pb2.DACStreamRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetDACOff': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDACOff,
                    request_deserializer=common__pb2.DACOffRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetDACHighPass': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDACHighPass,
                    request_deserializer=allegoserver__pb2.DACHighPassRegister.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetSimPorts': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSimPorts,
                    request_deserializer=allegoserver__pb2.SetSimPortsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetHasBNCBreakout': grpc.unary_unary_rpc_method_handler(
                    servicer.SetHasBNCBreakout,
                    request_deserializer=allegoserver__pb2.SetHasBNCBreakoutRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetMuxChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMuxChannel,
                    request_deserializer=allegoserver__pb2.SetMuxChannelRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetTriggerState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTriggerState,
                    request_deserializer=allegoserver__pb2.SetTriggerRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetPotVoltage': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPotVoltage,
                    request_deserializer=allegoserver__pb2.SetPotVoltageRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetPotRange': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPotRange,
                    request_deserializer=allegoserver__pb2.SetPotRangeRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetPotMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPotMode,
                    request_deserializer=allegoserver__pb2.SetPotModeRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetPotCellEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPotCellEnable,
                    request_deserializer=allegoserver__pb2.SetPotCellEnableRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetDSPGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDSPGroup,
                    request_deserializer=common__pb2.SetDSPGroupRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetStimParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStimParams,
                    request_deserializer=allegoserver__pb2.StimParams.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetStimParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStimParams,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.StimParamsReply.SerializeToString,
            ),
            'SetStimStep': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStimStep,
                    request_deserializer=allegoserver__pb2.StimStepMessage.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetStimStep': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStimStep,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.StimStepMessage.SerializeToString,
            ),
            'ManualStimTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ManualStimTrigger,
                    request_deserializer=allegoserver__pb2.ManualStimTriggerRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'ManualStimTriggerToggle': grpc.unary_unary_rpc_method_handler(
                    servicer.ManualStimTriggerToggle,
                    request_deserializer=allegoserver__pb2.ManualStimTriggerToggleRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.ConfigCore.SerializeToString,
            ),
            'GetWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkspace,
                    request_deserializer=common__pb2.GetWorkspaceRequest.FromString,
                    response_serializer=common__pb2.GetWorkspaceReply.SerializeToString,
            ),
            'GetConfigRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfigRecording,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.ConfigRecording.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.BackboneStatus.SerializeToString,
            ),
            'GetConfigAndStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfigAndStatus,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.ConfigAndStatus.SerializeToString,
            ),
            'GetDataSourceParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataSourceParams,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceParams.SerializeToString,
            ),
            'GetIntanImpedance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIntanImpedance,
                    request_deserializer=datasource__pb2.ImpedanceRequest.FromString,
                    response_serializer=datasource__pb2.Impedance.SerializeToString,
            ),
            'GetDSPGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDSPGroup,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.DSPGroup.SerializeToString,
            ),
            'GetDIOReg': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDIOReg,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.DigitalOutRegister.SerializeToString,
            ),
            'GetDACReg': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDACReg,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.AnalogOutRegister.SerializeToString,
            ),
            'GetSerial': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSerial,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.SerialNumber.SerializeToString,
            ),
            'GetTriggerState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerState,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.TriggerState.SerializeToString,
            ),
            'GetADCLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetADCLevel,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.GetADCLevelReply.SerializeToString,
            ),
            'ReadWireOut': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadWireOut,
                    request_deserializer=allegoserver__pb2.ReadWireOutRequest.FromString,
                    response_serializer=allegoserver__pb2.ReadWireOutReply.SerializeToString,
            ),
            'ListSensorSpecs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSensorSpecs,
                    request_deserializer=common__pb2.ListSensorSpecsRequest.FromString,
                    response_serializer=common__pb2.ListSensorSpecsReply.SerializeToString,
            ),
            'GetSignalGroupIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignalGroupIDs,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.GetSignalGroupIDsReply.SerializeToString,
            ),
            'GetSorterIDMap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSorterIDMap,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.GetSorterIDMapReply.SerializeToString,
            ),
            'GetSpikeSorterIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpikeSorterIDs,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=spikesorter__pb2.GetSpikeSorterIDsReply.SerializeToString,
            ),
            'GetSignalGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignalGroup,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.SignalGroup.SerializeToString,
            ),
            'UpdateSignalGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSignalGroup,
                    request_deserializer=common__pb2.UpdateSignalGroupRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'ScanPorts': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanPorts,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.SignalGroup.SerializeToString,
            ),
            'SetSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSensor,
                    request_deserializer=common__pb2.SetSensorRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'ImportSensorFromCSV': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportSensorFromCSV,
                    request_deserializer=common__pb2.ImportSensorRequest.FromString,
                    response_serializer=common__pb2.ImportSensorReply.SerializeToString,
            ),
            'SetSensorPositionTcs': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSensorPositionTcs,
                    request_deserializer=common__pb2.SetSensorPositionTcsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetSitePositionsTcs': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSitePositionsTcs,
                    request_deserializer=common__pb2.SetSitePositionsTcsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetDataSourceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataSourceStatus,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.DataSourceStatus.SerializeToString,
            ),
            'FeatureStart': grpc.unary_unary_rpc_method_handler(
                    servicer.FeatureStart,
                    request_deserializer=common__pb2.FeatureStartStopRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'FeatureStop': grpc.unary_unary_rpc_method_handler(
                    servicer.FeatureStop,
                    request_deserializer=common__pb2.FeatureStartStopRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetPrivacy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrivacy,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.PrivacyReply.SerializeToString,
            ),
            'SetPrivacy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPrivacy,
                    request_deserializer=common__pb2.SetPrivacyRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'LoadAllMosi': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadAllMosi,
                    request_deserializer=allegoserver__pb2.LoadAllMosiRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'TransmitMosi': grpc.unary_unary_rpc_method_handler(
                    servicer.TransmitMosi,
                    request_deserializer=allegoserver__pb2.TransmitMosiRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'DumpMiso': grpc.unary_unary_rpc_method_handler(
                    servicer.DumpMiso,
                    request_deserializer=allegoserver__pb2.DumpMisoRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetSinapsStatusRegisters': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSinapsStatusRegisters,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.SinapsStatusRegisters.SerializeToString,
            ),
            'FlashSinaps': grpc.unary_unary_rpc_method_handler(
                    servicer.FlashSinaps,
                    request_deserializer=allegoserver__pb2.FlashSinapsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetOrCreateEventViewer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrCreateEventViewer,
                    request_deserializer=common__pb2.EventViewerID.FromString,
                    response_serializer=common__pb2.EventViewerConfig.SerializeToString,
            ),
            'UpdateEventViewer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEventViewer,
                    request_deserializer=common__pb2.EventViewerConfig.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'ListEventViewerEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEventViewerEvents,
                    request_deserializer=common__pb2.EventViewerID.FromString,
                    response_serializer=common__pb2.ListEventViewerEventsReply.SerializeToString,
            ),
            'GetEventViewerEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventViewerEvent,
                    request_deserializer=common__pb2.GetEventViewerEventRequest.FromString,
                    response_serializer=common__pb2.EventViewerEvent.SerializeToString,
            ),
            'ListEventViewers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEventViewers,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.ListEventViewersReply.SerializeToString,
            ),
            'GetHALdashboard': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHALdashboard,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=allegoserver__pb2.HALdashboard.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allego.AllegoCore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('allego.AllegoCore', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AllegoCore(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/Healthcheck',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/Restart',
            allegoserver__pb2.RestartRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LaunchSummaService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/LaunchSummaService',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/Close',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRadixEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetRadixEnvironment',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.RadixEnvironment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WorkspaceControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/WorkspaceControl',
            common__pb2.WorkspaceControlRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRadiensServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetRadiensServers',
            common__pb2.GetRadiensServersRequest.SerializeToString,
            common__pb2.RadiensServersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatusPollFieldsToUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetStatusPollFieldsToUpdate',
            common__pb2.StatusPollFieldsToUpdateRequest.SerializeToString,
            common__pb2.StatusPollFieldsToUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOfflineLicenseStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetOfflineLicenseStatus',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.OfflineLicenseStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHardwareUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetHardwareUUID',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.HardwareUUIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetConfigCore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetConfigCore',
            allegoserver__pb2.SetConfigCoreRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetProfileState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetProfileState',
            allegoserver__pb2.SetProfileRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetConfigRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetConfigRecording',
            allegoserver__pb2.ConfigRecording.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetStreamState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetStreamState',
            allegoserver__pb2.SetStreamRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetRecordState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetRecordState',
            allegoserver__pb2.SetRecordRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDIOEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetDIOEvents',
            allegoserver__pb2.DIOModeEventsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDIOManual(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetDIOManual',
            allegoserver__pb2.DIOModeManualRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDIOGated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetDIOGated',
            allegoserver__pb2.DIOModeGatedRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDACGain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetDACGain',
            allegoserver__pb2.DACGainRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDACStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetDACStream',
            common__pb2.DACStreamRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDACOff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetDACOff',
            common__pb2.DACOffRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDACHighPass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetDACHighPass',
            allegoserver__pb2.DACHighPassRegister.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSimPorts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetSimPorts',
            allegoserver__pb2.SetSimPortsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetHasBNCBreakout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetHasBNCBreakout',
            allegoserver__pb2.SetHasBNCBreakoutRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetMuxChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetMuxChannel',
            allegoserver__pb2.SetMuxChannelRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTriggerState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetTriggerState',
            allegoserver__pb2.SetTriggerRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPotVoltage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetPotVoltage',
            allegoserver__pb2.SetPotVoltageRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPotRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetPotRange',
            allegoserver__pb2.SetPotRangeRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPotMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetPotMode',
            allegoserver__pb2.SetPotModeRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPotCellEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetPotCellEnable',
            allegoserver__pb2.SetPotCellEnableRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetDSPGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetDSPGroup',
            common__pb2.SetDSPGroupRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetStimParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetStimParams',
            allegoserver__pb2.StimParams.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStimParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetStimParams',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.StimParamsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetStimStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetStimStep',
            allegoserver__pb2.StimStepMessage.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStimStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetStimStep',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.StimStepMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ManualStimTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/ManualStimTrigger',
            allegoserver__pb2.ManualStimTriggerRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ManualStimTriggerToggle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/ManualStimTriggerToggle',
            allegoserver__pb2.ManualStimTriggerToggleRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetConfig',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.ConfigCore.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetWorkspace',
            common__pb2.GetWorkspaceRequest.SerializeToString,
            common__pb2.GetWorkspaceReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConfigRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetConfigRecording',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.ConfigRecording.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetStatus',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.BackboneStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConfigAndStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetConfigAndStatus',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.ConfigAndStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataSourceParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetDataSourceParams',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            datasource__pb2.DataSourceParams.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIntanImpedance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetIntanImpedance',
            datasource__pb2.ImpedanceRequest.SerializeToString,
            datasource__pb2.Impedance.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDSPGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetDSPGroup',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.DSPGroup.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDIOReg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetDIOReg',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.DigitalOutRegister.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDACReg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetDACReg',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.AnalogOutRegister.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSerial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetSerial',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.SerialNumber.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTriggerState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetTriggerState',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.TriggerState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetADCLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetADCLevel',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.GetADCLevelReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadWireOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/ReadWireOut',
            allegoserver__pb2.ReadWireOutRequest.SerializeToString,
            allegoserver__pb2.ReadWireOutReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSensorSpecs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/ListSensorSpecs',
            common__pb2.ListSensorSpecsRequest.SerializeToString,
            common__pb2.ListSensorSpecsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSignalGroupIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetSignalGroupIDs',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.GetSignalGroupIDsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSorterIDMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetSorterIDMap',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.GetSorterIDMapReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSpikeSorterIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetSpikeSorterIDs',
            common__pb2.StandardRequest.SerializeToString,
            spikesorter__pb2.GetSpikeSorterIDsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSignalGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetSignalGroup',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.SignalGroup.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSignalGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/UpdateSignalGroup',
            common__pb2.UpdateSignalGroupRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScanPorts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/ScanPorts',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.SignalGroup.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetSensor',
            common__pb2.SetSensorRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ImportSensorFromCSV(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/ImportSensorFromCSV',
            common__pb2.ImportSensorRequest.SerializeToString,
            common__pb2.ImportSensorReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSensorPositionTcs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetSensorPositionTcs',
            common__pb2.SetSensorPositionTcsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSitePositionsTcs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetSitePositionsTcs',
            common__pb2.SetSitePositionsTcsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataSourceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetDataSourceStatus',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.DataSourceStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FeatureStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/FeatureStart',
            common__pb2.FeatureStartStopRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FeatureStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/FeatureStop',
            common__pb2.FeatureStartStopRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrivacy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetPrivacy',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.PrivacyReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPrivacy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/SetPrivacy',
            common__pb2.SetPrivacyRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadAllMosi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/LoadAllMosi',
            allegoserver__pb2.LoadAllMosiRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransmitMosi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/TransmitMosi',
            allegoserver__pb2.TransmitMosiRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DumpMiso(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/DumpMiso',
            allegoserver__pb2.DumpMisoRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSinapsStatusRegisters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetSinapsStatusRegisters',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.SinapsStatusRegisters.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FlashSinaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/FlashSinaps',
            allegoserver__pb2.FlashSinapsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrCreateEventViewer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetOrCreateEventViewer',
            common__pb2.EventViewerID.SerializeToString,
            common__pb2.EventViewerConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEventViewer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/UpdateEventViewer',
            common__pb2.EventViewerConfig.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEventViewerEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/ListEventViewerEvents',
            common__pb2.EventViewerID.SerializeToString,
            common__pb2.ListEventViewerEventsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEventViewerEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetEventViewerEvent',
            common__pb2.GetEventViewerEventRequest.SerializeToString,
            common__pb2.EventViewerEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEventViewers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/ListEventViewers',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.ListEventViewersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHALdashboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.AllegoCore/GetHALdashboard',
            common__pb2.StandardRequest.SerializeToString,
            allegoserver__pb2.HALdashboard.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class Pcache1Stub(object):
    """The Pcache1 service definition.
    This is interface for getting data from the primary cache
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthcheck = channel.unary_unary(
                '/allego.Pcache1/Healthcheck',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetHDSnapshot = channel.unary_unary(
                '/allego.Pcache1/GetHDSnapshot',
                request_serializer=common__pb2.HDSnapshotRequest.SerializeToString,
                response_deserializer=common__pb2.HDSnapshot.FromString,
                _registered_method=True)
        self.GetHDSnapshotFromHead = channel.unary_unary(
                '/allego.Pcache1/GetHDSnapshotFromHead',
                request_serializer=common__pb2.HDSnapshotRequest2.SerializeToString,
                response_deserializer=common__pb2.HDSnapshot2.FromString,
                _registered_method=True)
        self.GetSignals = channel.unary_unary(
                '/allego.Pcache1/GetSignals',
                request_serializer=common__pb2.GetSignalsRequest.SerializeToString,
                response_deserializer=common__pb2.RawSignals.FromString,
                _registered_method=True)
        self.SetTimeRangeToHead = channel.unary_unary(
                '/allego.Pcache1/SetTimeRangeToHead',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)


class Pcache1Servicer(object):
    """The Pcache1 service definition.
    This is interface for getting data from the primary cache
    """

    def Healthcheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHDSnapshot(self, request, context):
        """rpc GetPCacheStatus(StandardRequest) returns (StandardReply) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHDSnapshotFromHead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTimeRangeToHead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Pcache1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetHDSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHDSnapshot,
                    request_deserializer=common__pb2.HDSnapshotRequest.FromString,
                    response_serializer=common__pb2.HDSnapshot.SerializeToString,
            ),
            'GetHDSnapshotFromHead': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHDSnapshotFromHead,
                    request_deserializer=common__pb2.HDSnapshotRequest2.FromString,
                    response_serializer=common__pb2.HDSnapshot2.SerializeToString,
            ),
            'GetSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignals,
                    request_deserializer=common__pb2.GetSignalsRequest.FromString,
                    response_serializer=common__pb2.RawSignals.SerializeToString,
            ),
            'SetTimeRangeToHead': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTimeRangeToHead,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allego.Pcache1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('allego.Pcache1', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Pcache1(object):
    """The Pcache1 service definition.
    This is interface for getting data from the primary cache
    """

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Pcache1/Healthcheck',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHDSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Pcache1/GetHDSnapshot',
            common__pb2.HDSnapshotRequest.SerializeToString,
            common__pb2.HDSnapshot.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHDSnapshotFromHead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Pcache1/GetHDSnapshotFromHead',
            common__pb2.HDSnapshotRequest2.SerializeToString,
            common__pb2.HDSnapshot2.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Pcache1/GetSignals',
            common__pb2.GetSignalsRequest.SerializeToString,
            common__pb2.RawSignals.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTimeRangeToHead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Pcache1/SetTimeRangeToHead',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class Kpi1Stub(object):
    """The Kpi1 service definition.
    This is interface for getting data from the KPI stream service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthcheck = channel.unary_unary(
                '/allego.Kpi1/Healthcheck',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.KpiGetMetrics = channel.unary_unary(
                '/allego.Kpi1/KpiGetMetrics',
                request_serializer=common__pb2.KpiMetricsReq.SerializeToString,
                response_deserializer=common__pb2.KpiBundlePacketMetrics.FromString,
                _registered_method=True)
        self.GetKpiStatus = channel.unary_unary(
                '/allego.Kpi1/GetKpiStatus',
                request_serializer=common__pb2.GetKpiStatusRequest.SerializeToString,
                response_deserializer=common__pb2.KpiStatusReply.FromString,
                _registered_method=True)
        self.SetKpiParam = channel.unary_unary(
                '/allego.Kpi1/SetKpiParam',
                request_serializer=common__pb2.SpikeSorterSetParamsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.GetKpiParam = channel.unary_unary(
                '/allego.Kpi1/GetKpiParam',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.GetSpikeSorterParamCommandReply.FromString,
                _registered_method=True)
        self.SetKpiUpdatePeriod = channel.unary_unary(
                '/allego.Kpi1/SetKpiUpdatePeriod',
                request_serializer=common__pb2.SetKpiParamRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SetKpiPacketDur = channel.unary_unary(
                '/allego.Kpi1/SetKpiPacketDur',
                request_serializer=common__pb2.SetKpiParamRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)


class Kpi1Servicer(object):
    """The Kpi1 service definition.
    This is interface for getting data from the KPI stream service
    """

    def Healthcheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KpiGetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKpiStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKpiParam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKpiParam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKpiUpdatePeriod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKpiPacketDur(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Kpi1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'KpiGetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.KpiGetMetrics,
                    request_deserializer=common__pb2.KpiMetricsReq.FromString,
                    response_serializer=common__pb2.KpiBundlePacketMetrics.SerializeToString,
            ),
            'GetKpiStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKpiStatus,
                    request_deserializer=common__pb2.GetKpiStatusRequest.FromString,
                    response_serializer=common__pb2.KpiStatusReply.SerializeToString,
            ),
            'SetKpiParam': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKpiParam,
                    request_deserializer=common__pb2.SpikeSorterSetParamsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetKpiParam': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKpiParam,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=spikesorter__pb2.GetSpikeSorterParamCommandReply.SerializeToString,
            ),
            'SetKpiUpdatePeriod': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKpiUpdatePeriod,
                    request_deserializer=common__pb2.SetKpiParamRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetKpiPacketDur': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKpiPacketDur,
                    request_deserializer=common__pb2.SetKpiParamRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allego.Kpi1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('allego.Kpi1', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Kpi1(object):
    """The Kpi1 service definition.
    This is interface for getting data from the KPI stream service
    """

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Kpi1/Healthcheck',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def KpiGetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Kpi1/KpiGetMetrics',
            common__pb2.KpiMetricsReq.SerializeToString,
            common__pb2.KpiBundlePacketMetrics.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKpiStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Kpi1/GetKpiStatus',
            common__pb2.GetKpiStatusRequest.SerializeToString,
            common__pb2.KpiStatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetKpiParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Kpi1/SetKpiParam',
            common__pb2.SpikeSorterSetParamsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKpiParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Kpi1/GetKpiParam',
            datasource__pb2.DataSourceRequest.SerializeToString,
            spikesorter__pb2.GetSpikeSorterParamCommandReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetKpiUpdatePeriod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Kpi1/SetKpiUpdatePeriod',
            common__pb2.SetKpiParamRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetKpiPacketDur(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Kpi1/SetKpiPacketDur',
            common__pb2.SetKpiParamRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class Neurons1Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthcheck = channel.unary_unary(
                '/allego.Neurons1/Healthcheck',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SpikeSorterCommand = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterCommand',
                request_serializer=spikesorter__pb2.SpikeSorterCommandRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SpikeSorterSetParam = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterSetParam',
                request_serializer=common__pb2.SpikeSorterSetParamRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SpikeSorterSetParams = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterSetParams',
                request_serializer=common__pb2.SpikeSorterSetParamsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                _registered_method=True)
        self.SpikeSorterGetParam = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterGetParam',
                request_serializer=spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.GetSpikeSorterParamCommandReply.FromString,
                _registered_method=True)
        self.SpikeSorterIsAnyActive = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterIsAnyActive',
                request_serializer=spikesorter__pb2.SpikeSorterIsAnyActiveRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterIsAnyActiveReply.FromString,
                _registered_method=True)
        self.SpikeSorterGetState = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterGetState',
                request_serializer=spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterState.FromString,
                _registered_method=True)
        self.SpikeSorterGetDashboard = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterGetDashboard',
                request_serializer=spikesorter__pb2.SpikeSorterDashboardRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterDashboardReply.FromString,
                _registered_method=True)
        self.SpikeSorterGetRasterData = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterGetRasterData',
                request_serializer=spikesorter__pb2.SpikeSorterGetRasterDataRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterRasterDataReply.FromString,
                _registered_method=True)
        self.SpikeSorterGetFeatureParams = channel.unary_unary(
                '/allego.Neurons1/SpikeSorterGetFeatureParams',
                request_serializer=spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterFeatureParamsReply.FromString,
                _registered_method=True)
        self.BiointerfaceGetSpikesDense = channel.unary_unary(
                '/allego.Neurons1/BiointerfaceGetSpikesDense',
                request_serializer=biointerface__pb2.SpikesGetSpikesRequest.SerializeToString,
                response_deserializer=biointerface__pb2.SpikesSpikeDataDenseReply.FromString,
                _registered_method=True)
        self.BiointerfaceGetNeurons = channel.unary_unary(
                '/allego.Neurons1/BiointerfaceGetNeurons',
                request_serializer=biointerface__pb2.BiointerfaceGetNeuronsRequest.SerializeToString,
                response_deserializer=biointerface__pb2.BiointerfaceGetNeuronsReply.FromString,
                _registered_method=True)
        self.BiointerfaceSeekEndSpikeTimestamps = channel.unary_unary(
                '/allego.Neurons1/BiointerfaceSeekEndSpikeTimestamps',
                request_serializer=biointerface__pb2.BiointerfaceSeekEndSpikeTimestampsRequest.SerializeToString,
                response_deserializer=common__pb2.TimeRange.FromString,
                _registered_method=True)
        self.SpikesGetSpec = channel.unary_unary(
                '/allego.Neurons1/SpikesGetSpec',
                request_serializer=spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
                response_deserializer=biointerface__pb2.SpikesSpecReply.FromString,
                _registered_method=True)
        self.BiointerfaceViz = channel.unary_unary(
                '/allego.Neurons1/BiointerfaceViz',
                request_serializer=biointerface__pb2.BiointerfaceVizRequest.SerializeToString,
                response_deserializer=biointerface__pb2.BiointerfaceVizReply.FromString,
                _registered_method=True)
        self.GetSpikeTrainAnalytic = channel.unary_unary(
                '/allego.Neurons1/GetSpikeTrainAnalytic',
                request_serializer=biointerface__pb2.SpikesGetSpikeTrainAnalyticsRequest.SerializeToString,
                response_deserializer=biointerface__pb2.SpikesGetSpikeTrainAnalyticsReply.FromString,
                _registered_method=True)


class Neurons1Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def Healthcheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterSetParam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterSetParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetParam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterIsAnyActive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetDashboard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetRasterData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetFeatureParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceGetSpikesDense(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceGetNeurons(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceSeekEndSpikeTimestamps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesGetSpec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceViz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpikeTrainAnalytic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Neurons1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikeSorterCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterCommand,
                    request_deserializer=spikesorter__pb2.SpikeSorterCommandRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikeSorterSetParam': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterSetParam,
                    request_deserializer=common__pb2.SpikeSorterSetParamRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikeSorterSetParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterSetParams,
                    request_deserializer=common__pb2.SpikeSorterSetParamsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikeSorterGetParam': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetParam,
                    request_deserializer=spikesorter__pb2.SpikeSorterStandardRequest.FromString,
                    response_serializer=spikesorter__pb2.GetSpikeSorterParamCommandReply.SerializeToString,
            ),
            'SpikeSorterIsAnyActive': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterIsAnyActive,
                    request_deserializer=spikesorter__pb2.SpikeSorterIsAnyActiveRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterIsAnyActiveReply.SerializeToString,
            ),
            'SpikeSorterGetState': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetState,
                    request_deserializer=spikesorter__pb2.SpikeSorterStandardRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterState.SerializeToString,
            ),
            'SpikeSorterGetDashboard': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetDashboard,
                    request_deserializer=spikesorter__pb2.SpikeSorterDashboardRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterDashboardReply.SerializeToString,
            ),
            'SpikeSorterGetRasterData': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetRasterData,
                    request_deserializer=spikesorter__pb2.SpikeSorterGetRasterDataRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterRasterDataReply.SerializeToString,
            ),
            'SpikeSorterGetFeatureParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetFeatureParams,
                    request_deserializer=spikesorter__pb2.SpikeSorterStandardRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterFeatureParamsReply.SerializeToString,
            ),
            'BiointerfaceGetSpikesDense': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceGetSpikesDense,
                    request_deserializer=biointerface__pb2.SpikesGetSpikesRequest.FromString,
                    response_serializer=biointerface__pb2.SpikesSpikeDataDenseReply.SerializeToString,
            ),
            'BiointerfaceGetNeurons': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceGetNeurons,
                    request_deserializer=biointerface__pb2.BiointerfaceGetNeuronsRequest.FromString,
                    response_serializer=biointerface__pb2.BiointerfaceGetNeuronsReply.SerializeToString,
            ),
            'BiointerfaceSeekEndSpikeTimestamps': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceSeekEndSpikeTimestamps,
                    request_deserializer=biointerface__pb2.BiointerfaceSeekEndSpikeTimestampsRequest.FromString,
                    response_serializer=common__pb2.TimeRange.SerializeToString,
            ),
            'SpikesGetSpec': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesGetSpec,
                    request_deserializer=spikesorter__pb2.SpikeSorterStandardRequest.FromString,
                    response_serializer=biointerface__pb2.SpikesSpecReply.SerializeToString,
            ),
            'BiointerfaceViz': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceViz,
                    request_deserializer=biointerface__pb2.BiointerfaceVizRequest.FromString,
                    response_serializer=biointerface__pb2.BiointerfaceVizReply.SerializeToString,
            ),
            'GetSpikeTrainAnalytic': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpikeTrainAnalytic,
                    request_deserializer=biointerface__pb2.SpikesGetSpikeTrainAnalyticsRequest.FromString,
                    response_serializer=biointerface__pb2.SpikesGetSpikeTrainAnalyticsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allego.Neurons1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('allego.Neurons1', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Neurons1(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/Healthcheck',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterCommand',
            spikesorter__pb2.SpikeSorterCommandRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterSetParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterSetParam',
            common__pb2.SpikeSorterSetParamRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterSetParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterSetParams',
            common__pb2.SpikeSorterSetParamsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterGetParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterGetParam',
            spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
            spikesorter__pb2.GetSpikeSorterParamCommandReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterIsAnyActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterIsAnyActive',
            spikesorter__pb2.SpikeSorterIsAnyActiveRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterIsAnyActiveReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterGetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterGetState',
            spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterGetDashboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterGetDashboard',
            spikesorter__pb2.SpikeSorterDashboardRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterDashboardReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterGetRasterData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterGetRasterData',
            spikesorter__pb2.SpikeSorterGetRasterDataRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterRasterDataReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikeSorterGetFeatureParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikeSorterGetFeatureParams',
            spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterFeatureParamsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BiointerfaceGetSpikesDense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/BiointerfaceGetSpikesDense',
            biointerface__pb2.SpikesGetSpikesRequest.SerializeToString,
            biointerface__pb2.SpikesSpikeDataDenseReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BiointerfaceGetNeurons(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/BiointerfaceGetNeurons',
            biointerface__pb2.BiointerfaceGetNeuronsRequest.SerializeToString,
            biointerface__pb2.BiointerfaceGetNeuronsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BiointerfaceSeekEndSpikeTimestamps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/BiointerfaceSeekEndSpikeTimestamps',
            biointerface__pb2.BiointerfaceSeekEndSpikeTimestampsRequest.SerializeToString,
            common__pb2.TimeRange.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpikesGetSpec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/SpikesGetSpec',
            spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
            biointerface__pb2.SpikesSpecReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BiointerfaceViz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/BiointerfaceViz',
            biointerface__pb2.BiointerfaceVizRequest.SerializeToString,
            biointerface__pb2.BiointerfaceVizReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSpikeTrainAnalytic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/allego.Neurons1/GetSpikeTrainAnalytic',
            biointerface__pb2.SpikesGetSpikeTrainAnalyticsRequest.SerializeToString,
            biointerface__pb2.SpikesGetSpikeTrainAnalyticsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

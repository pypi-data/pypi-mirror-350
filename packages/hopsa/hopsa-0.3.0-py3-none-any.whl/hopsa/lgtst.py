"""Utilities to ease the setting of logging and tests"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/lgtst.ipynb.

# %% auto 0
__all__ = ['set_logging']

# %% ../nbs/lgtst.ipynb 3
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path

from . import ossys

# %% ../nbs/lgtst.ipynb 7
def set_logging(
        level: int = logging.INFO, # The logging level
        format_file: str = '%(asctime)s - %(name)s - %(levelname)s - %(message)s', # The logging format for the file
        format_console: str = '%(levelname)s - %(message)s', # The logging format for the console
        datefmt: str = '%Y-%m-%d %H:%M:%S', # The date format
        log_dir: str = None, # The logging directory, if None, logs to console
        filemode: str = 'a', # The logging file mode. 'a' for append, 'w' for overwrite
        backupCount: int = 5, # The number of backup files to keep
        maxBytes: int = 1024*1024*5, # The maximum size of the log file in bytes
    ) -> logging.Logger:
    """Set up the root Logger"""

    if log_dir is None:
        log_dir = ossys.get_project_root() / 'logs'
    else:
        log_dir = Path(log_dir)
    
    log_dir.mkdir(exist_ok=True, parents=True)

    log_file = log_dir / f'{ossys.get_project_name()}.log'

    # Configure root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(level)

    # Create console handler
    console_handler = logging.StreamHandler()
    console_handler.setLevel(level)
    console_handler.setFormatter(logging.Formatter(format_console))

    # Create rotating file handler
    file_handler = RotatingFileHandler(
        log_file,
        maxBytes=maxBytes,
        backupCount=backupCount,
        encoding='utf-8'
        )
    file_handler.setLevel(level)
    file_handler.setFormatter(logging.Formatter(format_file, datefmt=datefmt))

    # Add handlers to root logger
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)

    # Log startup information
    logging.info(f"Log file: {log_file}")
    logging.info(f"Log file mode: {filemode}")
    logging.info(f"Log backup count: {backupCount}")
    logging.info(f"Log max bytes: {maxBytes}")
    
    return root_logger

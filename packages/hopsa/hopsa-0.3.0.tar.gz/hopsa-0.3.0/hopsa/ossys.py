"""Utilities to ease the use of operation system commands and files and folders"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/ossys.ipynb.

# %% auto 0
__all__ = ['get_project_root', 'get_project_name', 'sanitize_name']

# %% ../nbs/ossys.ipynb 3
import re
import unicodedata
import tomllib
from pathlib import Path
from typing import Optional
from fastcore.test import test_eq

# %% ../nbs/ossys.ipynb 5
def get_project_root() -> Optional[Path]:
    """Get the project root directory from either notebook or module context"""
    try:
        try:
            get_ipython()
            current = Path.cwd()
        except NameError:
            current = Path(__file__).resolve().parent

        while current != current.parent: # Stop at root directory
            if (current / 'pyproject.toml').exists():
                return current
            current = current.parent
        raise FileNotFoundError("Could not find pyproject.toml in any parent directory")
    except Exception as e:
        print(f"Error finding project root: {str(e)}")
        return None

# %% ../nbs/ossys.ipynb 9
def get_project_name():
    try:
        toml_file = get_project_root() / "pyproject.toml"
        with open(toml_file, "rb") as f:
            pyproject = tomllib.load(f)
            return pyproject.get("project", {}).get("name", "app")
    except (FileNotFoundError, KeyError):
        # Default to 'app' if file not found or missing project name
        return "app"

# %% ../nbs/ossys.ipynb 13
def sanitize_name(name: str) -> str:
    """Remove special characters from names, convert to lowercase, and remove leading and trailing whitespace."""
    nfkd_form = unicodedata.normalize('NFKD', name)
    ascii_name = ''.join([c for c in nfkd_form if not unicodedata.combining(c)])
    return re.sub(r'_+', '_', re.sub(r'[^a-z0-9]', '_', ascii_name.lower()).strip('_'))


Metadata-Version: 2.4
Name: nombre-normalizer-es
Version: 0.0.3
Summary: Biblioteca completa para normalizar nombres y apellidos en espa√±ol con redistribuci√≥n inteligente y detecci√≥n de patrones
Author-email: KC <rmr@keepcoding.io>
Maintainer-email: KC <rmr@keepcoding.io>
License: MIT
Project-URL: Homepage, https://github.com/KeepCoding/normalize_tools
Project-URL: Documentation, https://github.com/KeepCoding/normalize_tools#readme
Project-URL: Repository, https://github.com/KeepCoding/normalize_tools
Project-URL: Bug Tracker, https://github.com/KeepCoding/normalize_tools/issues
Project-URL: Changelog, https://github.com/KeepCoding/normalize_tools/blob/main/CHANGELOG.md
Keywords: nombres,apellidos,normalizaci√≥n,espa√±ol,spanish,names,normalization,nlp,text-processing,data-cleaning
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Linguistic
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Natural Language :: Spanish
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pandas>=1.3.0
Requires-Dist: unicodedata2>=15.0.0; python_version < "3.13"
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: pre-commit>=2.20.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=5.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0.0; extra == "docs"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Dynamic: license-file

# Nombre Normalizer ES

[![PyPI version](https://badge.fury.io/py/nombre-normalizer-es.svg)](https://badge.fury.io/py/nombre-normalizer-es)
[![Python](https://img.shields.io/pypi/pyversions/nombre-normalizer-es.svg)](https://pypi.org/project/nombre-normalizer-es/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

Una biblioteca completa para normalizar nombres y apellidos en espa√±ol con redistribuci√≥n inteligente y detecci√≥n de patrones avanzada.

## Caracter√≠sticas principales

üéØ **Redistribuci√≥n inteligente**: Detecta y redistribuye apellidos mezclados en el campo nombre
üîç **Detecci√≥n de patrones**: Reconoce nombres compuestos tradicionales espa√±oles
üî§ **Manejo de tildes**: Normaliza autom√°ticamente acentos y caracteres especiales
üìä **Procesamiento masivo**: Procesa DataFrames completos de forma eficiente
üö® **Detecci√≥n de casos problem√°ticos**: Identifica registros que requieren revisi√≥n manual
‚ö° **Alto rendimiento**: Optimizado para grandes vol√∫menes de datos

## Instalaci√≥n

```bash
pip install nombre-normalizer-es
```

## Uso b√°sico

### Normalizaci√≥n simple

```python
from nombre_normalizer import NombreNormalizer

# Crear instancia del normalizador
normalizador = NombreNormalizer()

# Normalizar un nombre simple
resultado = normalizador.normalizar_registro("JUAN CARLOS GARCIA LOPEZ")
print(resultado['nombres'])    # "Juan Carlos"
print(resultado['apellidos'])  # "Garc√≠a L√≥pez"

# Con redistribuci√≥n inteligente
resultado = normalizador.normalizar_registro(
    nombre="Maria del Carmen Fernandez Rodriguez",
    apellido="Martinez"
)
print(resultado['nombres'])    # "Mar√≠a del Carmen"
print(resultado['apellidos'])  # "Fern√°ndez Rodr√≠guez Mart√≠nez"
```

### Funci√≥n de conveniencia

```python
from nombre_normalizer import normalizar_nombre_simple

resultado = normalizar_nombre_simple("jose maria de la cruz")
print(resultado['nombres'])    # "Jos√© Mar√≠a de la Cruz"
print(resultado['apellidos'])  # ""
```

### Procesamiento de DataFrames

```python
import pandas as pd
from nombre_normalizer import NombreNormalizer

# Crear datos de ejemplo
df = pd.DataFrame({
    'nombre_completo': [
        'JUAN CARLOS GARCIA LOPEZ',
        'maria del carmen rodriguez',
        'JOSE LUIS DE LA TORRE MARTINEZ'
    ]
})

# Procesar DataFrame
normalizador = NombreNormalizer()
df_procesado = normalizador.procesar_dataframe(
    df, 
    col_nombre='nombre_completo'
)

# Ver resultados
print(df_procesado[['nombres_norm', 'apellidos_norm']])
```

### Procesamiento de archivos CSV

```python
from nombre_normalizer import procesar_csv

# Procesar archivo CSV completo
procesar_csv(
    archivo_entrada='datos_originales.csv',
    archivo_salida='datos_normalizados.csv',
    col_nombre='nombre',
    col_apellido='apellido'  # Opcional
)
```

## Caracter√≠sticas avanzadas

### Detecci√≥n de nombres compuestos

La biblioteca reconoce autom√°ticamente nombres compuestos tradicionales espa√±oles:

```python
normalizador = NombreNormalizer()

# Nombres compuestos con part√≠culas
resultado = normalizador.normalizar_registro("MARIA DE LOS ANGELES GARCIA")
print(resultado['nombres'])    # "Mar√≠a de los √Ångeles"
print(resultado['apellidos'])  # "Garc√≠a"

# Nombres dobles tradicionales
resultado = normalizador.normalizar_registro("JOSE MARIA FERNANDEZ LOPEZ")
print(resultado['nombres'])    # "Jos√© Mar√≠a"
print(resultado['apellidos'])  # "Fern√°ndez L√≥pez"
```

### Manejo de part√≠culas

Las part√≠culas se mantienen en min√∫scula seg√∫n las reglas del espa√±ol:

```python
resultado = normalizador.normalizar_registro("juan de la torre")
print(resultado['nombres'])    # "Juan"
print(resultado['apellidos'])  # "de la Torre"
```

### Detecci√≥n de casos problem√°ticos

```python
normalizador = NombreNormalizer()

# Procesar varios registros
registros = [
    "NOMBRE COMPLEJO CON MUCHAS PALABRAS QUE ES DIFICIL DE SEPARAR",
    "JUAN CARLOS GARCIA LOPEZ",
    "X Y Z"  # Caso problem√°tico
]

for registro in registros:
    resultado = normalizador.normalizar_registro(registro)
    if resultado['es_problematico']:
        print(f"‚ö†Ô∏è  Revisar: {registro}")

# Obtener todos los casos problem√°ticos
casos_problema = normalizador.obtener_casos_problema()
print(f"Encontrados {len(casos_problema)} casos problem√°ticos")

# Exportar casos problem√°ticos a CSV
normalizador.exportar_casos_problema("revision_manual.csv")
```

## Ejemplos de casos de uso

### 1. Limpieza de base de datos de clientes

```python
import pandas as pd
from nombre_normalizer import NombreNormalizer

# Cargar datos
df = pd.read_csv('clientes.csv')

# Normalizar
normalizador = NombreNormalizer()
df_limpio = normalizador.procesar_dataframe(
    df, 
    col_nombre='nombre_cliente',
    col_apellido='apellido_cliente'
)

# Guardar resultado
df_limpio.to_csv('clientes_normalizados.csv', index=False)

# Revisar casos problem√°ticos
if normalizador.casos_problema:
    print(f"‚ö†Ô∏è  {len(normalizador.casos_problema)} casos requieren revisi√≥n")
    normalizador.exportar_casos_problema('clientes_revisar.csv')
```

### 2. Procesamiento de formularios web

```python
from nombre_normalizer import normalizar_nombre_simple

def procesar_formulario(datos_formulario):
    """Procesa y normaliza datos de un formulario web"""
    
    resultado = normalizar_nombre_simple(
        nombre=datos_formulario.get('nombre_completo', ''),
        apellido=datos_formulario.get('apellidos', '')
    )
    
    return {
        'nombres_normalizados': resultado['nombres'],
        'apellidos_normalizados': resultado['apellidos'],
        'requiere_revision': resultado['es_problematico']
    }

# Ejemplo de uso
datos = {'nombre_completo': 'maria del carmen garcia lopez'}
resultado = procesar_formulario(datos)
print(resultado)
```

### 3. An√°lisis de datos con pandas

```python
import pandas as pd
from nombre_normalizer import NombreNormalizer

# Cargar datos
df = pd.read_excel('empleados.xlsx')

# Normalizar nombres
normalizador = NombreNormalizer()
df = normalizador.procesar_dataframe(df, 'nombre_completo')

# An√°lisis post-normalizaci√≥n
print("Estad√≠sticas de normalizaci√≥n:")
print(f"- Total registros: {len(df)}")
print(f"- Casos problem√°ticos: {df['es_problematico'].sum()}")
print(f"- Nombres √∫nicos: {df['nombres_norm'].nunique()}")

# Encontrar posibles duplicados por nombre
duplicados = df.groupby(['nombres_norm', 'apellidos_norm']).size()
duplicados = duplicados[duplicados > 1]
print(f"- Posibles duplicados: {len(duplicados)}")
```

## API Reference

### Clase NombreNormalizer

#### `__init__()`
Inicializa el normalizador con diccionarios predefinidos de nombres, apellidos y part√≠culas espa√±olas.

#### `normalizar_registro(nombre: str, apellido: str = "") -> Dict`
Normaliza un registro individual.

**Par√°metros:**
- `nombre` (str): Campo nombre (puede incluir apellidos)
- `apellido` (str): Campo apellido (opcional)

**Retorna:**
- `dict` con claves: `nombres`, `apellidos`, `es_problematico`, `original_nombre`, `original_apellido`

#### `procesar_dataframe(df: DataFrame, col_nombre: str, col_apellido: str = None, inplace: bool = False) -> DataFrame`
Procesa un DataFrame completo.

**Par√°metros:**
- `df` (DataFrame): DataFrame a procesar
- `col_nombre` (str): Nombre de la columna con nombres
- `col_apellido` (str): Nombre de la columna con apellidos (opcional)
- `inplace` (bool): Si modificar el DataFrame original

**Retorna:**
- `DataFrame` con columnas adicionales: `nombres_norm`, `apellidos_norm`, `es_problematico`

#### `obtener_casos_problema() -> List[Dict]`
Retorna la lista de casos problem√°ticos detectados durante el procesamiento.

#### `exportar_casos_problema(archivo: str = "casos_problema.csv")`
Exporta los casos problem√°ticos a un archivo CSV para revisi√≥n manual.

### Funciones de conveniencia

#### `normalizar_nombre_simple(nombre: str, apellido: str = "") -> Dict`
Funci√≥n de conveniencia para normalizar un nombre simple sin crear una instancia de la clase.

#### `procesar_csv(archivo_entrada: str, archivo_salida: str, col_nombre: str, col_apellido: str = None)`
Funci√≥n de conveniencia para procesar un archivo CSV completo.

## Casos especiales manejados

### Nombres compuestos reconocidos
- Mar√≠a del Carmen, Mar√≠a de los √Ångeles, Jos√© Mar√≠a, Juan Carlos, etc.
- Nombres con part√≠culas religiosas: Mar√≠a del Socorro, Mar√≠a de la Paz
- Nombres dobles tradicionales: Ana Mar√≠a, Jos√© Luis, Miguel √Ångel

### Part√≠culas manejadas
- `de`, `del`, `de la`, `de los`, `de las`
- `y`, `e`, `i`
- `van`, `von`, `da`, `dos`, `das`, `do`
- `san`, `santa`, `santo`
- `mc`, `mac`, `o`, `di`, `du`, `le`, `lo`

### Normalizaci√≥n de acentos
- Manejo autom√°tico de tildes y caracteres especiales
- Reconocimiento de variantes con y sin acentos
- Normalizaci√≥n Unicode completa

## Requisitos

- Python 3.8+
- pandas >= 1.3.0
- unicodedata2 >= 15.0.0 (para Python < 3.13)

## Licencia

Este proyecto est√° bajo la Licencia MIT. Ver el archivo [LICENSE](LICENSE) para m√°s detalles.

## Contribuciones

Las contribuciones son bienvenidas. Por favor:

1. Fork el proyecto
2. Crea una rama para tu feature (`git checkout -b feature/AmazingFeature`)
3. Commit tus cambios (`git commit -m 'Add some AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abre un Pull Request

## Soporte

Si encuentras alg√∫n problema o tienes sugerencias:

- Abre un [issue](https://github.com/KeepCoding/normalize_tools/issues)
- Contacta al mantenedor: rmr@keepcoding.io

## Changelog

### v1.0.0
- Versi√≥n inicial
- Normalizaci√≥n inteligente de nombres y apellidos espa√±oles
- Redistribuci√≥n autom√°tica de apellidos
- Detecci√≥n de casos problem√°ticos
- Soporte para procesamiento masivo con pandas

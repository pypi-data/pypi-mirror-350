name: Test, Version & Publish

on:
  push:
    branches:
      - master

permissions:
  contents: write
  id-token: write  # Required for trusted publishing

env:
  UV_SYSTEM_PYTHON: 1

jobs:
  test-version-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}  # Use personal token for pushing tags

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: "0.7.8"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run tests
        run: uv run pytest

      - name: Install semantic-release
        run: uv tool install python-semantic-release
      - name: Configure Git for semantic-release
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Semantic Release (version bump & tag)
        id: semantic_release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          semantic-release version
          echo "tag_name=$(git tag --points-at HEAD)" >> $GITHUB_OUTPUT

      - name: Show version after bump
        run: |
          echo "init:"
          cat src/job_posting_parser/__init__.py
          echo "pyproject:"
          grep version pyproject.toml

      - name: Sync version to pyproject.toml
        run: |
          VERSION=$(python -c "import re; print(re.search(r'__version__ = \"([^\"]+)\"', open('src/job_posting_parser/__init__.py').read()).group(1))")
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          echo "pyproject.toml after sync:"
          grep version pyproject.toml

      - name: Build package
        if: steps.semantic_release.outputs.tag_name != ''
        run: uv build

      - name: Publish to PyPI
        if: steps.semantic_release.outputs.tag_name != ''
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: uv publish

      - name: Prune uv cache
        run: uv cache prune --ci
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/mnt/Daten/Projekte/MTGProxyPrinter/mtg_proxy_printer/resources/ui/settings_window/pdf_settings_page.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_PDFSettingsPage(object):
    def setupUi(self, PDFSettingsPage):
        PDFSettingsPage.setObjectName("PDFSettingsPage")
        PDFSettingsPage.resize(420, 126)
        self.gridLayout = QtWidgets.QGridLayout(PDFSettingsPage)
        self.gridLayout.setObjectName("gridLayout")
        self.pdf_save_path = QtWidgets.QLineEdit(PDFSettingsPage)
        self.pdf_save_path.setInputMethodHints(QtCore.Qt.ImhNoAutoUppercase)
        self.pdf_save_path.setClearButtonEnabled(True)
        self.pdf_save_path.setObjectName("pdf_save_path")
        self.gridLayout.addWidget(self.pdf_save_path, 2, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 5, 0, 1, 3)
        self.pdf_save_path_label = QtWidgets.QLabel(PDFSettingsPage)
        self.pdf_save_path_label.setObjectName("pdf_save_path_label")
        self.gridLayout.addWidget(self.pdf_save_path_label, 2, 0, 1, 1)
        self.pdf_save_path_browse_button = QtWidgets.QPushButton(PDFSettingsPage)
        self.pdf_save_path_browse_button.setText("")
        icon = QtGui.QIcon.fromTheme("document-open")
        self.pdf_save_path_browse_button.setIcon(icon)
        self.pdf_save_path_browse_button.setObjectName("pdf_save_path_browse_button")
        self.gridLayout.addWidget(self.pdf_save_path_browse_button, 2, 2, 1, 1)
        self.pdf_page_count_limit_label = QtWidgets.QLabel(PDFSettingsPage)
        self.pdf_page_count_limit_label.setObjectName("pdf_page_count_limit_label")
        self.gridLayout.addWidget(self.pdf_page_count_limit_label, 3, 0, 1, 1)
        self.pdf_page_count_limit = QtWidgets.QSpinBox(PDFSettingsPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pdf_page_count_limit.sizePolicy().hasHeightForWidth())
        self.pdf_page_count_limit.setSizePolicy(sizePolicy)
        self.pdf_page_count_limit.setMaximum(2000000000)
        self.pdf_page_count_limit.setObjectName("pdf_page_count_limit")
        self.gridLayout.addWidget(self.pdf_page_count_limit, 3, 1, 1, 2)
        self.landscape_workaround = QtWidgets.QCheckBox(PDFSettingsPage)
        self.landscape_workaround.setProperty("wordWrap", True)
        self.landscape_workaround.setObjectName("landscape_workaround")
        self.gridLayout.addWidget(self.landscape_workaround, 4, 0, 1, 3)
        self.pdf_save_path_label.setBuddy(self.pdf_save_path)
        self.pdf_page_count_limit_label.setBuddy(self.pdf_page_count_limit)

        self.retranslateUi(PDFSettingsPage)
        QtCore.QMetaObject.connectSlotsByName(PDFSettingsPage)
        PDFSettingsPage.setTabOrder(self.pdf_save_path, self.pdf_save_path_browse_button)
        PDFSettingsPage.setTabOrder(self.pdf_save_path_browse_button, self.pdf_page_count_limit)

    def retranslateUi(self, PDFSettingsPage):
        _translate = QtCore.QCoreApplication.translate
        self.pdf_save_path.setToolTip(_translate("PDFSettingsPage", "If set, use this as the default location for saving exported PDF documents."))
        self.pdf_save_path.setPlaceholderText(_translate("PDFSettingsPage", "Path to a directory"))
        self.pdf_save_path_label.setText(_translate("PDFSettingsPage", "PDF export path"))
        self.pdf_save_path_browse_button.setToolTip(_translate("PDFSettingsPage", "Browse…"))
        self.pdf_page_count_limit_label.setToolTip(_translate("PDFSettingsPage", "Automatically split PDF documents, if they get longer than this many pages.\n"
"Set to zero to disable splitting.\n"
"\n"
"\n"
"When printing PDFs using a USB flash drive directly connected to the printer,\n"
"the printer may refuse to print documents exceeding some arbitrary size limit.\n"
"To work around this limitation, you can enable this option,\n"
"and limit the number of pages per PDF. If the document has more pages,\n"
"it will be exported into multiple PDF documents automatically."))
        self.pdf_page_count_limit_label.setText(_translate("PDFSettingsPage", "Split PDF documents longer than"))
        self.pdf_page_count_limit.setToolTip(_translate("PDFSettingsPage", "Automatically split PDF documents, if they get longer than this many pages.\n"
"Set to zero to disable splitting.\n"
"\n"
"\n"
"When printing PDFs using a USB flash drive directly connected to the printer,\n"
"the printer may refuse to print documents exceeding some arbitrary size limit.\n"
"To work around this limitation, you can enable this option,\n"
"and limit the number of pages per PDF. If the document has more pages,\n"
"it will be exported into multiple PDF documents automatically."))
        self.pdf_page_count_limit.setSuffix(_translate("PDFSettingsPage", " pages"))
        self.landscape_workaround.setToolTip(_translate("PDFSettingsPage", "If enabled, landscape documents are rotated by 90° to portrait mode during export.\n"
"Enable this, if printing from PDFs in landscape format results in portrait printouts with cropped-off sides.\n"
"\n"
"Enabling this may cause the cut helper lines to flicker or not show in some PDF viewers.\n"
"So only enable this, if actually required."))
        self.landscape_workaround.setText(_translate("PDFSettingsPage", "Enable landscape workaround: Rotate landscape PDFs by 90°"))

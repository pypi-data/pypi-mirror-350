# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _blsct
else:
    import _blsct

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


DOUBLE_PUBLIC_KEY_SIZE = _blsct.DOUBLE_PUBLIC_KEY_SIZE
KEY_ID_SIZE = _blsct.KEY_ID_SIZE
POINT_SIZE = _blsct.POINT_SIZE
PUBLIC_KEY_SIZE = _blsct.PUBLIC_KEY_SIZE
SCRIPT_SIZE = _blsct.SCRIPT_SIZE
SIGNATURE_SIZE = _blsct.SIGNATURE_SIZE
SUB_ADDR_ID_SIZE = _blsct.SUB_ADDR_ID_SIZE
TX_ID_SIZE = _blsct.TX_ID_SIZE
BLSCT_IN_AMOUNT_ERROR = _blsct.BLSCT_IN_AMOUNT_ERROR
BLSCT_OUT_AMOUNT_ERROR = _blsct.BLSCT_OUT_AMOUNT_ERROR

def cast_to_dpk(x):
    return _blsct.cast_to_dpk(x)

def cast_to_key_id(x):
    return _blsct.cast_to_key_id(x)

def cast_to_out_point(x):
    return _blsct.cast_to_out_point(x)

def cast_to_point(x):
    return _blsct.cast_to_point(x)

def cast_to_pub_key(x):
    return _blsct.cast_to_pub_key(x)

def cast_to_range_proof(x):
    return _blsct.cast_to_range_proof(x)

def cast_to_scalar(x):
    return _blsct.cast_to_scalar(x)

def cast_to_signature(x):
    return _blsct.cast_to_signature(x)

def cast_to_sub_addr(x):
    return _blsct.cast_to_sub_addr(x)

def cast_to_sub_addr_id(x):
    return _blsct.cast_to_sub_addr_id(x)

def cast_to_token_id(x):
    return _blsct.cast_to_token_id(x)

def cast_to_tx(x):
    return _blsct.cast_to_tx(x)

def cast_to_tx_in(x):
    return _blsct.cast_to_tx_in(x)

def cast_to_tx_out(x):
    return _blsct.cast_to_tx_out(x)

def cast_to_uint8_t_ptr(x):
    return _blsct.cast_to_uint8_t_ptr(x)

def cast_to_cscript(x):
    return _blsct.cast_to_cscript(x)

def cast_to_amount_recovery_req(x):
    return _blsct.cast_to_amount_recovery_req(x)

def cast_to_size_t(x):
    return _blsct.cast_to_size_t(x)

def to_hex(buf, buf_size):
    return _blsct.to_hex(buf, buf_size)

def as_string(str_buf):
    return _blsct.as_string(str_buf)

def create_uint64_vec():
    return _blsct.create_uint64_vec()

def free_uint64_vec(vp_vec):
    return _blsct.free_uint64_vec(vp_vec)

def add_to_uint64_vec(vp_uint64_vec, n):
    return _blsct.add_to_uint64_vec(vp_uint64_vec, n)

def create_range_proof_vec():
    return _blsct.create_range_proof_vec()

def add_range_proof_to_vec(vp_range_proofs, range_proof_size, vp_blsct_range_proof):
    return _blsct.add_range_proof_to_vec(vp_range_proofs, range_proof_size, vp_blsct_range_proof)

def free_range_proof_vec(vp_range_proofs):
    return _blsct.free_range_proof_vec(vp_range_proofs)

def create_tx_in_vec():
    return _blsct.create_tx_in_vec()

def add_tx_in_to_vec(vp_tx_ins, vp_tx_in):
    return _blsct.add_tx_in_to_vec(vp_tx_ins, vp_tx_in)

def free_tx_in_vec(vp_tx_ins):
    return _blsct.free_tx_in_vec(vp_tx_ins)

def create_tx_out_vec():
    return _blsct.create_tx_out_vec()

def add_tx_out_to_vec(vp_tx_outs, vp_tx_out):
    return _blsct.add_tx_out_to_vec(vp_tx_outs, vp_tx_out)

def free_tx_out_vec(vp_tx_outs):
    return _blsct.free_tx_out_vec(vp_tx_outs)

def create_amount_recovery_req_vec():
    return _blsct.create_amount_recovery_req_vec()

def add_to_amount_recovery_req_vec(vp_amt_recovery_req_vec, vp_amt_recovery_req):
    return _blsct.add_to_amount_recovery_req_vec(vp_amt_recovery_req_vec, vp_amt_recovery_req)

def free_amount_recovery_req_vec(vp_amt_recovery_req_vec):
    return _blsct.free_amount_recovery_req_vec(vp_amt_recovery_req_vec)

def get_amount_recovery_result_size(vp_amt_recovery_req_vec):
    return _blsct.get_amount_recovery_result_size(vp_amt_recovery_req_vec)

def get_amount_recovery_result_is_succ(vp_amt_recovery_req_vec, idx):
    return _blsct.get_amount_recovery_result_is_succ(vp_amt_recovery_req_vec, idx)

def get_amount_recovery_result_amount(vp_amt_recovery_req_vec, idx):
    return _blsct.get_amount_recovery_result_amount(vp_amt_recovery_req_vec, idx)

def get_amount_recovery_result_msg(vp_amt_recovery_req_vec, idx):
    return _blsct.get_amount_recovery_result_msg(vp_amt_recovery_req_vec, idx)

def hex_to_malloced_buf(hex):
    return _blsct.hex_to_malloced_buf(hex)
MainNet = _blsct.MainNet
TestNet = _blsct.TestNet
Bech32 = _blsct.Bech32
Bech32M = _blsct.Bech32M
Normal = _blsct.Normal
StakedCommitment = _blsct.StakedCommitment
class BlsctRetVal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_blsct.BlsctRetVal_result_get, _blsct.BlsctRetVal_result_set)
    value = property(_blsct.BlsctRetVal_value_get, _blsct.BlsctRetVal_value_set)
    value_size = property(_blsct.BlsctRetVal_value_size_get, _blsct.BlsctRetVal_value_size_set)

    def __init__(self):
        _blsct.BlsctRetVal_swiginit(self, _blsct.new_BlsctRetVal())
    __swig_destroy__ = _blsct.delete_BlsctRetVal

# Register BlsctRetVal in _blsct:
_blsct.BlsctRetVal_swigregister(BlsctRetVal)
class BlsctBoolRetVal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_blsct.BlsctBoolRetVal_result_get, _blsct.BlsctBoolRetVal_result_set)
    value = property(_blsct.BlsctBoolRetVal_value_get, _blsct.BlsctBoolRetVal_value_set)

    def __init__(self):
        _blsct.BlsctBoolRetVal_swiginit(self, _blsct.new_BlsctBoolRetVal())
    __swig_destroy__ = _blsct.delete_BlsctBoolRetVal

# Register BlsctBoolRetVal in _blsct:
_blsct.BlsctBoolRetVal_swigregister(BlsctBoolRetVal)
class BlsctAmountsRetVal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_blsct.BlsctAmountsRetVal_result_get, _blsct.BlsctAmountsRetVal_result_set)
    value = property(_blsct.BlsctAmountsRetVal_value_get, _blsct.BlsctAmountsRetVal_value_set)

    def __init__(self):
        _blsct.BlsctAmountsRetVal_swiginit(self, _blsct.new_BlsctAmountsRetVal())
    __swig_destroy__ = _blsct.delete_BlsctAmountsRetVal

# Register BlsctAmountsRetVal in _blsct:
_blsct.BlsctAmountsRetVal_swigregister(BlsctAmountsRetVal)
class BlsctTxRetVal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_blsct.BlsctTxRetVal_result_get, _blsct.BlsctTxRetVal_result_set)
    ser_tx = property(_blsct.BlsctTxRetVal_ser_tx_get, _blsct.BlsctTxRetVal_ser_tx_set)
    ser_tx_size = property(_blsct.BlsctTxRetVal_ser_tx_size_get, _blsct.BlsctTxRetVal_ser_tx_size_set)
    in_amount_err_index = property(_blsct.BlsctTxRetVal_in_amount_err_index_get, _blsct.BlsctTxRetVal_in_amount_err_index_set)
    out_amount_err_index = property(_blsct.BlsctTxRetVal_out_amount_err_index_get, _blsct.BlsctTxRetVal_out_amount_err_index_set)

    def __init__(self):
        _blsct.BlsctTxRetVal_swiginit(self, _blsct.new_BlsctTxRetVal())
    __swig_destroy__ = _blsct.delete_BlsctTxRetVal

# Register BlsctTxRetVal in _blsct:
_blsct.BlsctTxRetVal_swigregister(BlsctTxRetVal)

def init():
    return _blsct.init()

def set_chain(chain):
    return _blsct.set_chain(chain)

def free_obj(rv):
    return _blsct.free_obj(rv)

def free_amounts_ret_val(rv):
    return _blsct.free_amounts_ret_val(rv)

def gen_scalar(n):
    return _blsct.gen_scalar(n)

def gen_random_scalar():
    return _blsct.gen_random_scalar()

def scalar_to_uint64(blsct_scalar):
    return _blsct.scalar_to_uint64(blsct_scalar)

def scalar_to_hex(blsct_scalar):
    return _blsct.scalar_to_hex(blsct_scalar)

def hex_to_scalar(hex):
    return _blsct.hex_to_scalar(hex)

def is_scalar_equal(a, b):
    return _blsct.is_scalar_equal(a, b)

def scalar_to_str(blsct_scalar):
    return _blsct.scalar_to_str(blsct_scalar)

def gen_base_point():
    return _blsct.gen_base_point()

def gen_random_point():
    return _blsct.gen_random_point()

def point_to_hex(blsct_point):
    return _blsct.point_to_hex(blsct_point)

def hex_to_point(hex):
    return _blsct.hex_to_point(hex)

def is_point_equal(a, b):
    return _blsct.is_point_equal(a, b)

def point_to_str(blsct_point):
    return _blsct.point_to_str(blsct_point)

def point_from_scalar(blsct_scalar):
    return _blsct.point_from_scalar(blsct_scalar)

def gen_random_public_key():
    return _blsct.gen_random_public_key()

def get_public_key_point(blsct_pub_key):
    return _blsct.get_public_key_point(blsct_pub_key)

def point_to_public_key(blsct_point):
    return _blsct.point_to_public_key(blsct_point)

def gen_double_pub_key(pk1, pk2):
    return _blsct.gen_double_pub_key(pk1, pk2)

def decode_address(blsct_enc_addr):
    return _blsct.decode_address(blsct_enc_addr)

def encode_address(blsct_dpk, encoding):
    return _blsct.encode_address(blsct_dpk, encoding)

def gen_token_id_with_subid(token, subid):
    return _blsct.gen_token_id_with_subid(token, subid)

def gen_token_id(token):
    return _blsct.gen_token_id(token)

def gen_default_token_id():
    return _blsct.gen_default_token_id()

def get_token_id_token(blsct_token_id):
    return _blsct.get_token_id_token(blsct_token_id)

def get_token_id_subid(blsct_token_id):
    return _blsct.get_token_id_subid(blsct_token_id)

def build_range_proof(vp_int_vec, blsct_nonce, blsct_message, blsct_token_id):
    return _blsct.build_range_proof(vp_int_vec, blsct_nonce, blsct_message, blsct_token_id)

def verify_range_proofs(vp_range_proofs):
    return _blsct.verify_range_proofs(vp_range_proofs)

def gen_recover_amount_req(vp_blsct_range_proof, range_proof_size, vp_blsct_nonce):
    return _blsct.gen_recover_amount_req(vp_blsct_range_proof, range_proof_size, vp_blsct_nonce)

def recover_amount(vp_amt_recovery_req_vec):
    return _blsct.recover_amount(vp_amt_recovery_req_vec)

def gen_out_point(tx_id_c_str, n):
    return _blsct.gen_out_point(tx_id_c_str, n)

def build_tx_in(amount, gamma, spendingKey, tokenId, outPoint, rbf):
    return _blsct.build_tx_in(amount, gamma, spendingKey, tokenId, outPoint, rbf)

def dpk_to_sub_addr(blsct_dpk):
    return _blsct.dpk_to_sub_addr(blsct_dpk)

def build_tx_out(blsct_dest, amount, in_memo_c_str, blsct_token_id, output_type, min_stake):
    return _blsct.build_tx_out(blsct_dest, amount, in_memo_c_str, blsct_token_id, output_type, min_stake)

def build_tx(void_tx_ins, void_tx_outs):
    return _blsct.build_tx(void_tx_ins, void_tx_outs)

def get_tx_id(tx):
    return _blsct.get_tx_id(tx)

def deserialize_tx(ser_tx, ser_tx_size):
    return _blsct.deserialize_tx(ser_tx, ser_tx_size)

def get_tx_ins(tx):
    return _blsct.get_tx_ins(tx)

def get_tx_ins_size(tx_ins):
    return _blsct.get_tx_ins_size(tx_ins)

def get_tx_in(tx_ins, i):
    return _blsct.get_tx_in(tx_ins, i)

def get_tx_outs(tx):
    return _blsct.get_tx_outs(tx)

def get_tx_outs_size(tx_outs):
    return _blsct.get_tx_outs_size(tx_outs)

def get_tx_out(tx_outs, i):
    return _blsct.get_tx_out(tx_outs, i)

def get_tx_in_prev_out_hash(tx_in):
    return _blsct.get_tx_in_prev_out_hash(tx_in)

def get_tx_in_prev_out_n(tx_in):
    return _blsct.get_tx_in_prev_out_n(tx_in)

def get_tx_in_script_sig(tx_in):
    return _blsct.get_tx_in_script_sig(tx_in)

def get_tx_in_sequence(tx_in):
    return _blsct.get_tx_in_sequence(tx_in)

def get_tx_in_script_witness(tx_in):
    return _blsct.get_tx_in_script_witness(tx_in)

def get_tx_out_value(tx_out):
    return _blsct.get_tx_out_value(tx_out)

def get_tx_out_token_id(tx_out):
    return _blsct.get_tx_out_token_id(tx_out)

def get_tx_out_script_pubkey(tx_out):
    return _blsct.get_tx_out_script_pubkey(tx_out)

def get_tx_out_spending_key(tx_out):
    return _blsct.get_tx_out_spending_key(tx_out)

def get_tx_out_ephemeral_key(tx_out):
    return _blsct.get_tx_out_ephemeral_key(tx_out)

def get_tx_out_blinding_key(tx_out):
    return _blsct.get_tx_out_blinding_key(tx_out)

def get_tx_out_view_tag(tx_out):
    return _blsct.get_tx_out_view_tag(tx_out)

def get_tx_out_range_proof_A(tx_out):
    return _blsct.get_tx_out_range_proof_A(tx_out)

def get_tx_out_range_proof_B(tx_out):
    return _blsct.get_tx_out_range_proof_B(tx_out)

def get_tx_out_range_proof_r_prime(tx_out):
    return _blsct.get_tx_out_range_proof_r_prime(tx_out)

def get_tx_out_range_proof_s_prime(tx_out):
    return _blsct.get_tx_out_range_proof_s_prime(tx_out)

def get_tx_out_range_proof_delta_prime(tx_out):
    return _blsct.get_tx_out_range_proof_delta_prime(tx_out)

def get_tx_out_range_proof_alpha_hat(tx_out):
    return _blsct.get_tx_out_range_proof_alpha_hat(tx_out)

def get_tx_out_range_proof_tau_x(tx_out):
    return _blsct.get_tx_out_range_proof_tau_x(tx_out)

def sign_message(blsct_priv_key, blsct_msg):
    return _blsct.sign_message(blsct_priv_key, blsct_msg)

def verify_msg_sig(blsct_pub_key, blsct_msg, blsct_signature):
    return _blsct.verify_msg_sig(blsct_pub_key, blsct_msg, blsct_signature)

def scalar_to_pub_key(blsct_scalar):
    return _blsct.scalar_to_pub_key(blsct_scalar)

def from_seed_to_child_key(blsct_seed):
    return _blsct.from_seed_to_child_key(blsct_seed)

def from_child_key_to_blinding_key(blsct_child_key):
    return _blsct.from_child_key_to_blinding_key(blsct_child_key)

def from_child_key_to_token_key(blsct_child_key):
    return _blsct.from_child_key_to_token_key(blsct_child_key)

def from_child_key_to_tx_key(blsct_child_key):
    return _blsct.from_child_key_to_tx_key(blsct_child_key)

def from_tx_key_to_view_key(blsct_tx_key):
    return _blsct.from_tx_key_to_view_key(blsct_tx_key)

def from_tx_key_to_spending_key(blsct_tx_key):
    return _blsct.from_tx_key_to_spending_key(blsct_tx_key)

def calc_priv_spending_key(blsct_blinding_pub_key, blsct_view_key, blsct_spending_key, account, address):
    return _blsct.calc_priv_spending_key(blsct_blinding_pub_key, blsct_view_key, blsct_spending_key, account, address)

def calc_view_tag(blinding_pub_key, view_key):
    return _blsct.calc_view_tag(blinding_pub_key, view_key)

def calc_hash_id(blsct_blinding_pub_key, blsct_spending_pub_key, blsct_view_key):
    return _blsct.calc_hash_id(blsct_blinding_pub_key, blsct_spending_pub_key, blsct_view_key)

def get_key_id_hex(blsct_key_id):
    return _blsct.get_key_id_hex(blsct_key_id)

def calc_nonce(blsct_blinding_pub_key, view_key):
    return _blsct.calc_nonce(blsct_blinding_pub_key, view_key)

def derive_sub_address(blsct_view_key, blsct_spending_pub_key, blsct_sub_addr_id):
    return _blsct.derive_sub_address(blsct_view_key, blsct_spending_pub_key, blsct_sub_addr_id)

def gen_sub_addr_id(account, address):
    return _blsct.gen_sub_addr_id(account, address)

def get_sub_addr_id_account(blsct_sub_addr_id):
    return _blsct.get_sub_addr_id_account(blsct_sub_addr_id)

def get_sub_addr_id_address(blsct_sub_addr_id):
    return _blsct.get_sub_addr_id_address(blsct_sub_addr_id)

def is_valid_point(blsct_point):
    return _blsct.is_valid_point(blsct_point)

def gen_dpk_with_keys_and_sub_addr_id(blsct_view_key, blsct_spending_pub_key, account, address):
    return _blsct.gen_dpk_with_keys_and_sub_addr_id(blsct_view_key, blsct_spending_pub_key, account, address)


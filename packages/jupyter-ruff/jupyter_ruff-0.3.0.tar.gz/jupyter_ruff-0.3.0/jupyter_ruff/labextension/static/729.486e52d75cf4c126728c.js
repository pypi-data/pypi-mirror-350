"use strict";(self.webpackChunkjupyter_ruff=self.webpackChunkjupyter_ruff||[]).push([[729],{729:(e,t,o)=>{o.r(t),o.d(t,{default:()=>C});var n=o(551),r=o(263),c=o(461),i=o(653),s=o(914),a=o(266),l=o(505),f=o.n(l),u=o(114),d=o(811);function m(e,t){const o=e.getOffsetAt(e.getCursorPosition()),n=function(e,t,o){const[n,r]=[e.slice(0,o),e.slice(o)];function c(e){return(0,d.distance)(n,t.slice(0,e))+(0,d.distance)(r,t.slice(e))}let[i,s]=[0,t.length];for(;i<s;){const e=Math.floor(i+(s-i)/2),t=c(e);for(let o=1;;o++){const n=c(e+o);if(t<n){s=e;break}if(t>n){i=e+o;break}if(e+o>s){s=e;break}}}return i}(e.model.sharedModel.source,t,o);e.model.sharedModel.setSource(t),e.setCursorPosition(e.getPositionAt(n)??{line:0,column:0})}class p{indices;constructor(e){this.indices=[];const t=e.split("\n");let o=0;for(const e of t)o+=e.length+1,this.indices.push(o)}maxPosition(){return this.indices.at(this.indices.length-1)??0}convert(e,t){const[o,n]=[e-1,t-1];return(o>0?this.indices[o-1]:0)+n}}function h(e,t){return null!==e.currentWidget&&e.currentWidget===t.currentWidget}function g(e){return!(e instanceof s.CellModel&&"code"!==e.type||"text/x-python"!==e?.mimeType&&"text/x-ipython"!==e?.mimeType)}function y(e,t){return Object.fromEntries(Object.keys({...e,...t}).map(((o,n)=>[o,e[o],t[o]])).map((([e,t,o])=>[e,!(t instanceof Object)||t instanceof u.TomlDate||t instanceof Array||!(o instanceof Object)||o instanceof u.TomlDate||o instanceof Array?o??t:y(t,o)])))}function b(e){if(e?.tool?.ruff instanceof Object)return e.tool.ruff}async function j(e,t,o){let n=t.path;do{n=a.PathExt.dirname(n);const t=await e.serviceManager.contents.get(n).then((e=>e.content));for(const n of[".ruff.toml","ruff.toml","pyproject.toml"]){const r=t.find((e=>e.name===n));if(void 0===r)continue;const c=await e.serviceManager.contents.get(r.path),i=u.parse(c.content);if("pyproject.toml"!==n)return new l.Workspace(y(i,o));{const e=b(i);if(void 0!==e)return new l.Workspace(y(e,o))}}}while(""!==n);return new l.Workspace(o)}const C={id:"jupyter-ruff:plugin",description:"A JupyterLab and Jupyter Notebook extension for formatting code with Ruff.",autoStart:!0,requires:[n.ICommandPalette,r.INotebookTracker,c.IEditorTracker,i.ISettingRegistry],activate:async(e,t,o,n,c)=>{await f()();const i=await c.load("jupyter-ruff:plugin");let[s,a,u]=[i.get("format-on-run").composite,i.get("format-on-save").composite,i.get("sort-imports").composite];i.changed.connect(((e,t)=>{[s,a,u]=[e.get("format-on-run").composite,e.get("format-on-save").composite,e.get("sort-imports").composite]}));const d={lint:{select:["I"]}};let y=new l.Workspace(d);for(const t of[o,n])t.currentChanged.connect((async(t,o)=>{o&&(y=await j(e,o.context,d))}));function b(e){const t=u?function(e,t){let o;try{o=e.check(t)}catch{return t}return function(e,t){const o=new p(e);let n=o.maxPosition();const r=[];for(const c of t.reverse())for(const t of c.fix?.edits.reverse()??[]){const[c,i]=[o.convert(t.location.row,t.location.column),o.convert(t.end_location.row,t.end_location.column)];r.push(e.slice(i,n)),r.push(t.content),n=c}return r.push(e.slice(0,n)),r.reverse().join("")}(t,o)}(y,e):e;return function(e,t){try{return e.format(t).trimEnd()}catch{return t}}(y,t)}e.commands.addCommand("jupyter-ruff:format-cell",{label:"Format Cell Using Ruff",isEnabled:()=>h(o,e.shell)&&g(o.activeCell?.model),isVisible:()=>h(o,e.shell),execute:function(e){const t=b(o.activeCell.model.sharedModel.source);m(o.activeCell.editor,t)}}),e.commands.addCommand("jupyter-ruff:format-all-cells",{label:"Format All Cells Using Ruff",isEnabled:()=>h(o,e.shell),isVisible:()=>h(o,e.shell),execute:function(e){const t=o.currentWidget?.content.widgets??[];for(const e of t){if(!g(e.model))continue;const t=b(e.model.sharedModel.source);m(e.editor,t)}}}),e.commands.addCommand("jupyter-ruff:format-editor",{label:"Format Editor Contents Using Ruff",isEnabled:()=>h(n,e.shell)&&g(n.currentWidget?.content.model),isVisible:()=>h(n,e.shell),execute:function(e){const t=n.currentWidget.content.editor;m(t,b(t.model.sharedModel.source))}}),e.commands.addCommand("jupyter-ruff:reload-configuration",{label:"Reload Configuration Files for Ruff",isEnabled:()=>!0,isVisible:()=>!0,execute:async function(t){y=await j(e,o.currentWidget.context,d)}}),t.addItem({command:"jupyter-ruff:format-cell",category:"ruff"}),t.addItem({command:"jupyter-ruff:format-all-cells",category:"ruff"}),t.addItem({command:"jupyter-ruff:format-editor",category:"ruff"}),t.addItem({command:"jupyter-ruff:reload-configuration",category:"ruff"}),r.NotebookActions.executionScheduled.connect(((e,{cell:t})=>{if(g(t.model)&&s){const e=b(t.model.sharedModel.source);m(t.editor,e)}})),o.currentChanged.connect((async(e,t)=>{t?.context.saveState.connect(((e,o)=>{if("started"===o&&a)for(const e of t.content.widgets){if(!g(e.model))continue;const t=b(e.model.sharedModel.source);m(e.editor,t)}}))})),n.currentChanged.connect((async(e,t)=>{t?.context.saveState.connect(((e,o)=>{if("started"===o&&a&&g(t?.content.model)){const e=b(t.content.model.sharedModel.source);m(t.content.editor,e)}}))}))}}}}]);